{
 "roles": [
  {
   "name": "roles/accesscontextmanager.policyAdmin",
   "role": {
    "description": "Full access to policies, access levels, and access zones",
    "etag": "AA==",
    "name": "roles/accesscontextmanager.policyAdmin",
    "stage": "GA",
    "title": "Access Context Manager Admin"
   },
   "included_permissions": [
    "accesscontextmanager.accessLevels.create",
    "accesscontextmanager.accessLevels.delete",
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessLevels.replaceAll",
    "accesscontextmanager.accessLevels.update",
    "accesscontextmanager.accessPolicies.create",
    "accesscontextmanager.accessPolicies.delete",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessPolicies.setIamPolicy",
    "accesscontextmanager.accessPolicies.update",
    "accesscontextmanager.accessZones.create",
    "accesscontextmanager.accessZones.delete",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.accessZones.update",
    "accesscontextmanager.policies.create",
    "accesscontextmanager.policies.delete",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.policies.setIamPolicy",
    "accesscontextmanager.policies.update",
    "accesscontextmanager.servicePerimeters.commit",
    "accesscontextmanager.servicePerimeters.create",
    "accesscontextmanager.servicePerimeters.delete",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "accesscontextmanager.servicePerimeters.replaceAll",
    "accesscontextmanager.servicePerimeters.update",
    "cloudasset.assets.searchAllResources",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/accessapproval.configEditor",
   "role": {
    "description": "Ability update the Access Approval configuration",
    "etag": "AA==",
    "name": "roles/accessapproval.configEditor",
    "stage": "BETA",
    "title": "Access Approval Config Editor"
   },
   "included_permissions": [
    "accessapproval.settings.delete",
    "accessapproval.settings.get",
    "accessapproval.settings.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/androidmanagement.user",
   "role": {
    "description": "Full access to manage devices.",
    "etag": "AA==",
    "name": "roles/androidmanagement.user",
    "stage": "GA",
    "title": "Android Management User"
   },
   "included_permissions": [
    "androidmanagement.enterprises.manage",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/accesscontextmanager.gcpAccessReader",
   "role": {
    "description": "Read access to Cloud access bindings.",
    "etag": "AA==",
    "name": "roles/accesscontextmanager.gcpAccessReader",
    "stage": "GA",
    "title": "Cloud Access Binding Reader"
   },
   "included_permissions": [
    "accesscontextmanager.gcpUserAccessBindings.get",
    "accesscontextmanager.gcpUserAccessBindings.list"
   ]
  },
  {
   "name": "roles/accessapproval.viewer",
   "role": {
    "description": "Ability to view access approval requests and configuration",
    "etag": "AA==",
    "name": "roles/accessapproval.viewer",
    "stage": "BETA",
    "title": "Access Approval Viewer"
   },
   "included_permissions": [
    "accessapproval.requests.get",
    "accessapproval.requests.list",
    "accessapproval.settings.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/accesscontextmanager.gcpAccessAdmin",
   "role": {
    "description": "Create, edit, and change Cloud access bindings.",
    "etag": "AA==",
    "name": "roles/accesscontextmanager.gcpAccessAdmin",
    "stage": "GA",
    "title": "Cloud Access Binding Admin"
   },
   "included_permissions": [
    "accesscontextmanager.gcpUserAccessBindings.create",
    "accesscontextmanager.gcpUserAccessBindings.delete",
    "accesscontextmanager.gcpUserAccessBindings.get",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.gcpUserAccessBindings.update"
   ]
  },
  {
   "name": "roles/dialogflow.admin",
   "role": {
    "description": "Can query for intent; read \u0026 write session properties; read \u0026 write agent properties.",
    "etag": "AA==",
    "name": "roles/dialogflow.admin",
    "stage": "GA",
    "title": "Dialogflow API Admin"
   },
   "included_permissions": [
    "dialogflow.agents.create",
    "dialogflow.agents.delete",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.import",
    "dialogflow.agents.list",
    "dialogflow.agents.restore",
    "dialogflow.agents.search",
    "dialogflow.agents.train",
    "dialogflow.agents.update",
    "dialogflow.agents.validate",
    "dialogflow.answerrecords.delete",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.answerrecords.update",
    "dialogflow.callMatchers.create",
    "dialogflow.callMatchers.delete",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversationDatasets.create",
    "dialogflow.conversationDatasets.delete",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.import",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.create",
    "dialogflow.conversationModels.delete",
    "dialogflow.conversationModels.deploy",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationModels.undeploy",
    "dialogflow.conversationProfiles.create",
    "dialogflow.conversationProfiles.delete",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversationProfiles.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.create",
    "dialogflow.documents.delete",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.create",
    "dialogflow.entityTypes.createEntity",
    "dialogflow.entityTypes.delete",
    "dialogflow.entityTypes.deleteEntity",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.entityTypes.update",
    "dialogflow.entityTypes.updateEntity",
    "dialogflow.environments.create",
    "dialogflow.environments.delete",
    "dialogflow.environments.get",
    "dialogflow.environments.getHistory",
    "dialogflow.environments.list",
    "dialogflow.environments.lookupHistory",
    "dialogflow.environments.update",
    "dialogflow.flows.create",
    "dialogflow.flows.delete",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.flows.train",
    "dialogflow.flows.update",
    "dialogflow.flows.validate",
    "dialogflow.fulfillments.get",
    "dialogflow.fulfillments.update",
    "dialogflow.intents.create",
    "dialogflow.intents.delete",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.intents.update",
    "dialogflow.knowledgeBases.create",
    "dialogflow.knowledgeBases.delete",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.create",
    "dialogflow.pages.delete",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.pages.update",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.phoneNumberOrders.cancel",
    "dialogflow.phoneNumberOrders.create",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumberOrders.update",
    "dialogflow.phoneNumbers.delete",
    "dialogflow.phoneNumbers.list",
    "dialogflow.phoneNumbers.undelete",
    "dialogflow.phoneNumbers.update",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.create",
    "dialogflow.smartMessagingEntries.delete",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.create",
    "dialogflow.transitionRouteGroups.delete",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.transitionRouteGroups.update",
    "dialogflow.versions.create",
    "dialogflow.versions.delete",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.versions.load",
    "dialogflow.versions.update",
    "dialogflow.webhooks.create",
    "dialogflow.webhooks.delete",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dialogflow.webhooks.update",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/cloudmigration.inframanager",
   "role": {
    "description": "Ability to create and manage Compute VMs to run Velostrata Infrastructure",
    "etag": "AA==",
    "name": "roles/cloudmigration.inframanager",
    "stage": "BETA",
    "title": "Velostrata Manager"
   },
   "included_permissions": [
    "cloudmigration.velostrataendpoints.connect",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.list",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.globalOperations.get",
    "compute.images.get",
    "compute.images.list",
    "compute.images.useReadOnly",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getSerialPortOutput",
    "compute.instances.list",
    "compute.instances.reset",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setLabels",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.update",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.list",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.get",
    "compute.licenses.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.get",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.list",
    "compute.projects.get",
    "compute.regionOperations.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.zoneOperations.get",
    "compute.zones.get",
    "compute.zones.list",
    "gkehub.endpoints.connect",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.buckets.update"
   ]
  },
  {
   "name": "roles/cloudprivatecatalog.consumer",
   "role": {
    "description": "Can browse catalogs in the target resource context.",
    "etag": "AA==",
    "name": "roles/cloudprivatecatalog.consumer",
    "stage": "BETA",
    "title": "Catalog Consumer"
   },
   "included_permissions": [
    "cloudprivatecatalog.targets.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudmigration.storageaccess",
   "role": {
    "description": "Ability to access migration storage",
    "etag": "AA==",
    "name": "roles/cloudmigration.storageaccess",
    "stage": "BETA",
    "title": "Velostrata Storage Access"
   },
   "included_permissions": [
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/cloudmigration.velostrataconnect",
   "role": {
    "description": "Ability to set up connection between Velostrata Manager and Google",
    "etag": "AA==",
    "name": "roles/cloudmigration.velostrataconnect",
    "stage": "BETA",
    "title": "Velostrata Manager Connection Agent"
   },
   "included_permissions": [
    "cloudmigration.velostrataendpoints.connect",
    "gkehub.endpoints.connect"
   ]
  },
  {
   "name": "roles/cloudoptimization.serviceAgent",
   "role": {
    "description": "Grants Cloud Optimization Service Account access to read and write data in the user project.",
    "etag": "AA==",
    "name": "roles/cloudoptimization.serviceAgent",
    "stage": "GA",
    "title": "Cloud Optimization Service Agent"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/cloudscheduler.admin",
   "role": {
    "description": "Full access to jobs and executions.",
    "etag": "AA==",
    "name": "roles/cloudscheduler.admin",
    "stage": "GA",
    "title": "Cloud Scheduler Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudscheduler.jobs.create",
    "cloudscheduler.jobs.delete",
    "cloudscheduler.jobs.enable",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.get",
    "cloudscheduler.jobs.list",
    "cloudscheduler.jobs.pause",
    "cloudscheduler.jobs.run",
    "cloudscheduler.jobs.update",
    "cloudscheduler.locations.get",
    "cloudscheduler.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudprivatecatalogproducer.admin",
   "role": {
    "description": "Can manage catalog and view its associations.",
    "etag": "AA==",
    "name": "roles/cloudprivatecatalogproducer.admin",
    "stage": "BETA",
    "title": "Catalog Admin"
   },
   "included_permissions": [
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.create",
    "cloudprivatecatalogproducer.associations.delete",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.create",
    "cloudprivatecatalogproducer.catalogAssociations.delete",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.create",
    "cloudprivatecatalogproducer.catalogs.delete",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.catalogs.setIamPolicy",
    "cloudprivatecatalogproducer.catalogs.undelete",
    "cloudprivatecatalogproducer.catalogs.update",
    "cloudprivatecatalogproducer.producerCatalogs.attachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.create",
    "cloudprivatecatalogproducer.producerCatalogs.delete",
    "cloudprivatecatalogproducer.producerCatalogs.detachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.setIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.update",
    "cloudprivatecatalogproducer.products.create",
    "cloudprivatecatalogproducer.products.delete",
    "cloudprivatecatalogproducer.products.get",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.products.setIamPolicy",
    "cloudprivatecatalogproducer.products.update",
    "cloudprivatecatalogproducer.targets.associate",
    "cloudprivatecatalogproducer.targets.unassociate",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudscheduler.serviceAgent",
   "role": {
    "description": "Grants Cloud Scheduler Service Account access to manage resources.",
    "etag": "AA==",
    "name": "roles/cloudscheduler.serviceAgent",
    "stage": "GA",
    "title": "Cloud Scheduler Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "logging.logEntries.create",
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/accesscontextmanager.policyReader",
   "role": {
    "description": "Read access to policies, access levels, and access zones.",
    "etag": "AA==",
    "name": "roles/accesscontextmanager.policyReader",
    "stage": "GA",
    "title": "Access Context Manager Reader"
   },
   "included_permissions": [
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/anthosaudit.serviceAgent",
   "role": {
    "description": "Gives the Anthos Audit service agent access toCloud Platform resources.",
    "etag": "AA==",
    "name": "roles/anthosaudit.serviceAgent",
    "stage": "GA",
    "title": "Anthos Audit Service Agent"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list"
   ]
  },
  {
   "name": "roles/actions.Admin",
   "role": {
    "description": "Access to edit and deploy an action",
    "etag": "AA==",
    "name": "roles/actions.Admin",
    "stage": "GA",
    "title": "Actions Admin"
   },
   "included_permissions": [
    "actions.agent.claimContentProvider",
    "actions.agent.get",
    "actions.agent.update",
    "actions.agentVersions.create",
    "actions.agentVersions.delete",
    "actions.agentVersions.deploy",
    "actions.agentVersions.get",
    "actions.agentVersions.list",
    "firebase.projects.get",
    "firebase.projects.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/accesscontextmanager.policyEditor",
   "role": {
    "description": "Edit access to policies.  Create, edit, and change access levels and access zones.",
    "etag": "AA==",
    "name": "roles/accesscontextmanager.policyEditor",
    "stage": "GA",
    "title": "Access Context Manager Editor"
   },
   "included_permissions": [
    "accesscontextmanager.accessLevels.create",
    "accesscontextmanager.accessLevels.delete",
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessLevels.replaceAll",
    "accesscontextmanager.accessLevels.update",
    "accesscontextmanager.accessPolicies.create",
    "accesscontextmanager.accessPolicies.delete",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessPolicies.update",
    "accesscontextmanager.accessZones.create",
    "accesscontextmanager.accessZones.delete",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.accessZones.update",
    "accesscontextmanager.policies.create",
    "accesscontextmanager.policies.delete",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.policies.update",
    "accesscontextmanager.servicePerimeters.commit",
    "accesscontextmanager.servicePerimeters.create",
    "accesscontextmanager.servicePerimeters.delete",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "accesscontextmanager.servicePerimeters.replaceAll",
    "accesscontextmanager.servicePerimeters.update",
    "cloudasset.assets.searchAllResources",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudprivatecatalogproducer.orgAdmin",
   "role": {
    "description": "Can manage catalog org settings.",
    "etag": "AA==",
    "name": "roles/cloudprivatecatalogproducer.orgAdmin",
    "stage": "BETA",
    "title": "Catalog Org Admin"
   },
   "included_permissions": [
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.create",
    "cloudprivatecatalogproducer.associations.delete",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.create",
    "cloudprivatecatalogproducer.catalogAssociations.delete",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.create",
    "cloudprivatecatalogproducer.catalogs.delete",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.catalogs.setIamPolicy",
    "cloudprivatecatalogproducer.catalogs.undelete",
    "cloudprivatecatalogproducer.catalogs.update",
    "cloudprivatecatalogproducer.producerCatalogs.attachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.create",
    "cloudprivatecatalogproducer.producerCatalogs.delete",
    "cloudprivatecatalogproducer.producerCatalogs.detachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.setIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.update",
    "cloudprivatecatalogproducer.products.create",
    "cloudprivatecatalogproducer.products.delete",
    "cloudprivatecatalogproducer.products.get",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.products.setIamPolicy",
    "cloudprivatecatalogproducer.products.update",
    "cloudprivatecatalogproducer.settings.get",
    "cloudprivatecatalogproducer.settings.update",
    "cloudprivatecatalogproducer.targets.associate",
    "cloudprivatecatalogproducer.targets.unassociate",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudprofiler.agent",
   "role": {
    "description": "Cloud Profiler agents are allowed to register and provide the profiling data.",
    "etag": "AA==",
    "name": "roles/cloudprofiler.agent",
    "stage": "GA",
    "title": "Cloud Profiler Agent"
   },
   "included_permissions": [
    "cloudprofiler.profiles.create",
    "cloudprofiler.profiles.update"
   ]
  },
  {
   "name": "roles/cloudprofiler.user",
   "role": {
    "description": "Cloud Profiler users are allowed to query and view the profiling data.",
    "etag": "AA==",
    "name": "roles/cloudprofiler.user",
    "stage": "GA",
    "title": "Cloud Profiler User"
   },
   "included_permissions": [
    "cloudprofiler.profiles.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudscheduler.jobRunner",
   "role": {
    "description": "Access to run jobs.",
    "etag": "AA==",
    "name": "roles/cloudscheduler.jobRunner",
    "stage": "GA",
    "title": "Cloud Scheduler Job Runner"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.run",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/anthos.serviceAgent",
   "role": {
    "description": "Gives the Anthos service agent access to Cloud Platformresources.",
    "etag": "AA==",
    "name": "roles/anthos.serviceAgent",
    "stage": "GA",
    "title": "Anthos Service Agent"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudprivatecatalogproducer.manager",
   "role": {
    "description": "Can manage associations between a catalog and a target resource.",
    "etag": "AA==",
    "name": "roles/cloudprivatecatalogproducer.manager",
    "stage": "BETA",
    "title": "Catalog Manager"
   },
   "included_permissions": [
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.create",
    "cloudprivatecatalogproducer.associations.delete",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.create",
    "cloudprivatecatalogproducer.catalogAssociations.delete",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.targets.associate",
    "cloudprivatecatalogproducer.targets.unassociate",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudscheduler.viewer",
   "role": {
    "description": "Get and list access to jobs, executions, and locations.",
    "etag": "AA==",
    "name": "roles/cloudscheduler.viewer",
    "stage": "GA",
    "title": "Cloud Scheduler Viewer"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.get",
    "cloudscheduler.jobs.list",
    "cloudscheduler.locations.get",
    "cloudscheduler.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/accesscontextmanager.vpcScTroubleshooterViewer",
   "role": {
    "etag": "AA==",
    "name": "roles/accesscontextmanager.vpcScTroubleshooterViewer",
    "stage": "GA",
    "title": "VPC Service Controls Troubleshooter Viewer"
   },
   "included_permissions": [
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudsupport.viewer",
   "role": {
    "description": "Read-only access to details of a support account. This does not allow viewing cases.",
    "etag": "AA==",
    "name": "roles/cloudsupport.viewer",
    "stage": "GA",
    "title": "Support Account Viewer"
   },
   "included_permissions": [
    "cloudsupport.accounts.get",
    "cloudsupport.accounts.getUserRoles",
    "cloudsupport.accounts.list",
    "cloudsupport.properties.get"
   ]
  },
  {
   "name": "roles/aiplatform.featurestoreAdmin",
   "role": {
    "description": "Grants full access to all resources in AI Platform Feature Store",
    "etag": "AA==",
    "name": "roles/aiplatform.featurestoreAdmin",
    "stage": "BETA",
    "title": "AI Platform Feature Store Admin"
   },
   "included_permissions": [
    "aiplatform.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/aiplatform.customCodeServiceAgent",
   "role": {
    "description": "Gives AI Platform Custom Code the proper permissions.",
    "etag": "AA==",
    "name": "roles/aiplatform.customCodeServiceAgent",
    "stage": "GA",
    "title": "AI Platform Custom Code Service Agent"
   },
   "included_permissions": [
    "aiplatform.annotationSpecs.create",
    "aiplatform.annotationSpecs.delete",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotationSpecs.update",
    "aiplatform.annotations.create",
    "aiplatform.annotations.delete",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.annotations.update",
    "aiplatform.batchPredictionJobs.cancel",
    "aiplatform.batchPredictionJobs.create",
    "aiplatform.batchPredictionJobs.delete",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.delete",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.create",
    "aiplatform.dataItems.delete",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataItems.update",
    "aiplatform.dataLabelingJobs.cancel",
    "aiplatform.dataLabelingJobs.create",
    "aiplatform.dataLabelingJobs.delete",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.delete",
    "aiplatform.datasets.export",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.list",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.create",
    "aiplatform.endpoints.delete",
    "aiplatform.endpoints.deploy",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.endpoints.undeploy",
    "aiplatform.endpoints.update",
    "aiplatform.hyperparameterTuningJobs.cancel",
    "aiplatform.hyperparameterTuningJobs.create",
    "aiplatform.hyperparameterTuningJobs.delete",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.exportEvaluatedDataItems",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.delete",
    "aiplatform.models.export",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.models.upload",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.create",
    "aiplatform.specialistPools.delete",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.create",
    "aiplatform.studies.delete",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.studies.update",
    "aiplatform.trainingPipelines.cancel",
    "aiplatform.trainingPipelines.create",
    "aiplatform.trainingPipelines.delete",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.create",
    "aiplatform.trials.delete",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "aiplatform.trials.update",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.versions.get",
    "bigquery.datasets.get",
    "bigquery.readsessions.create",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.implicitDelegation",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "logging.logEntries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/cloudsecurityscanner.runner",
   "role": {
    "description": "Read access to Scan and ScanRun, plus the ability to start scans",
    "etag": "AA==",
    "name": "roles/cloudsecurityscanner.runner",
    "stage": "GA",
    "title": "Web Security Scanner Runner"
   },
   "included_permissions": [
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run"
   ]
  },
  {
   "name": "roles/cloudsecurityscanner.viewer",
   "role": {
    "description": "Read access to all Web Security Scanner resources",
    "etag": "AA==",
    "name": "roles/cloudsecurityscanner.viewer",
    "stage": "GA",
    "title": "Web Security Scanner Viewer"
   },
   "included_permissions": [
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudsql.admin",
   "role": {
    "description": "Full control of Cloud SQL resources.",
    "etag": "AA==",
    "name": "roles/cloudsql.admin",
    "stage": "GA",
    "title": "Cloud SQL Admin"
   },
   "included_permissions": [
    "cloudsql.backupRuns.create",
    "cloudsql.backupRuns.delete",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.create",
    "cloudsql.databases.delete",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.databases.update",
    "cloudsql.instances.addServerCa",
    "cloudsql.instances.clone",
    "cloudsql.instances.connect",
    "cloudsql.instances.create",
    "cloudsql.instances.delete",
    "cloudsql.instances.demoteMaster",
    "cloudsql.instances.export",
    "cloudsql.instances.failover",
    "cloudsql.instances.get",
    "cloudsql.instances.import",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.instances.login",
    "cloudsql.instances.promoteReplica",
    "cloudsql.instances.resetSslConfig",
    "cloudsql.instances.restart",
    "cloudsql.instances.restoreBackup",
    "cloudsql.instances.rotateServerCa",
    "cloudsql.instances.startReplica",
    "cloudsql.instances.stopReplica",
    "cloudsql.instances.truncateLog",
    "cloudsql.instances.update",
    "cloudsql.sslCerts.create",
    "cloudsql.sslCerts.createEphemeral",
    "cloudsql.sslCerts.delete",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.create",
    "cloudsql.users.delete",
    "cloudsql.users.list",
    "cloudsql.users.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudsql.client",
   "role": {
    "description": "Connectivity access to Cloud SQL instances.",
    "etag": "AA==",
    "name": "roles/cloudsql.client",
    "stage": "GA",
    "title": "Cloud SQL Client"
   },
   "included_permissions": [
    "cloudsql.instances.connect",
    "cloudsql.instances.get"
   ]
  },
  {
   "name": "roles/cloudsql.editor",
   "role": {
    "description": "Full control of existing Cloud SQL instances excluding modifying users, SSL certificates or deleting resources.",
    "etag": "AA==",
    "name": "roles/cloudsql.editor",
    "stage": "GA",
    "title": "Cloud SQL Editor"
   },
   "included_permissions": [
    "cloudsql.backupRuns.create",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.create",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.databases.update",
    "cloudsql.instances.addServerCa",
    "cloudsql.instances.connect",
    "cloudsql.instances.export",
    "cloudsql.instances.failover",
    "cloudsql.instances.get",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.instances.restart",
    "cloudsql.instances.rotateServerCa",
    "cloudsql.instances.truncateLog",
    "cloudsql.instances.update",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/anthosconfigmanagement.serviceAgent",
   "role": {
    "description": "Gives the Anthos Config Management service agent access toCloud Platform resources.",
    "etag": "AA==",
    "name": "roles/anthosconfigmanagement.serviceAgent",
    "stage": "GA",
    "title": "Anthos Config Management Service Agent"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list"
   ]
  },
  {
   "name": "roles/cloudsql.instanceUser",
   "role": {
    "description": "Role allowing access to a Cloud SQL instance",
    "etag": "AA==",
    "name": "roles/cloudsql.instanceUser",
    "stage": "GA",
    "title": "Cloud SQL Instance User"
   },
   "included_permissions": [
    "cloudsql.instances.get",
    "cloudsql.instances.login"
   ]
  },
  {
   "name": "roles/cloudsql.serviceAgent",
   "role": {
    "description": "Grants Cloud SQL access to services and APIs in the user project",
    "etag": "AA==",
    "name": "roles/cloudsql.serviceAgent",
    "stage": "GA",
    "title": "Cloud SQL Service Agent"
   },
   "included_permissions": [
    "cloudsql.instances.get"
   ]
  },
  {
   "name": "roles/cloudsql.viewer",
   "role": {
    "description": "Read-only access to Cloud SQL resources.",
    "etag": "AA==",
    "name": "roles/cloudsql.viewer",
    "stage": "GA",
    "title": "Cloud SQL Viewer"
   },
   "included_permissions": [
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.instances.export",
    "cloudsql.instances.get",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudsupport.admin",
   "role": {
    "description": "Allows management of a support account without giving access to support cases.",
    "etag": "AA==",
    "name": "roles/cloudsupport.admin",
    "stage": "GA",
    "title": "Support Account Administrator"
   },
   "included_permissions": [
    "cloudsupport.accounts.create",
    "cloudsupport.accounts.delete",
    "cloudsupport.accounts.get",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.getUserRoles",
    "cloudsupport.accounts.list",
    "cloudsupport.accounts.setIamPolicy",
    "cloudsupport.accounts.update",
    "cloudsupport.accounts.updateUserRoles",
    "cloudsupport.operations.get",
    "cloudsupport.properties.get",
    "resourcemanager.organizations.get"
   ]
  },
  {
   "name": "roles/cloudsupport.techSupportEditor",
   "role": {
    "description": "Full read-write access to technical support cases (applicable for GCP Customer Care and Maps support).",
    "etag": "AA==",
    "name": "roles/cloudsupport.techSupportEditor",
    "stage": "GA",
    "title": "Tech Support Editor"
   },
   "included_permissions": [
    "cloudsupport.properties.get",
    "cloudsupport.techCases.create",
    "cloudsupport.techCases.escalate",
    "cloudsupport.techCases.get",
    "cloudsupport.techCases.list",
    "cloudsupport.techCases.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/anthosidentityservice.serviceAgent",
   "role": {
    "description": "Gives the Anthos Identity service agent access toCloud Platform resources.",
    "etag": "AA==",
    "name": "roles/anthosidentityservice.serviceAgent",
    "stage": "GA",
    "title": "Anthos Identity Service Agent"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list"
   ]
  },
  {
   "name": "roles/cloudtrace.admin",
   "role": {
    "description": "Admin access to Stackdriver Trace.",
    "etag": "AA==",
    "name": "roles/cloudtrace.admin",
    "stage": "GA",
    "title": "Cloud Trace Admin"
   },
   "included_permissions": [
    "cloudtrace.insights.get",
    "cloudtrace.insights.list",
    "cloudtrace.stats.get",
    "cloudtrace.tasks.create",
    "cloudtrace.tasks.delete",
    "cloudtrace.tasks.get",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.get",
    "cloudtrace.traces.list",
    "cloudtrace.traces.patch",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/actions.Viewer",
   "role": {
    "description": "Access to view an action",
    "etag": "AA==",
    "name": "roles/actions.Viewer",
    "stage": "GA",
    "title": "Actions Viewer"
   },
   "included_permissions": [
    "actions.agent.get",
    "actions.agentVersions.get",
    "actions.agentVersions.list",
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/aiplatform.serviceAgent",
   "role": {
    "description": "Gives AI Platform the permissions it needs to function.",
    "etag": "AA==",
    "name": "roles/aiplatform.serviceAgent",
    "stage": "GA",
    "title": "AI Platform Service Agent"
   },
   "included_permissions": [
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.predict",
    "artifactregistry.repositories.create",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.get",
    "artifactregistry.versions.get",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.list",
    "automl.modelEvaluations.list",
    "automl.models.get",
    "automl.models.list",
    "automl.operations.get",
    "automl.tableSpecs.get",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.readsessions.create",
    "bigquery.tables.create",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigtable.tables.get",
    "bigtable.tables.list",
    "bigtable.tables.readRows",
    "datalabeling.annotateddatasets.get",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.list",
    "datalabeling.operations.get",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.getAccessToken",
    "logging.logEntries.create",
    "ml.models.list",
    "ml.operations.get",
    "ml.versions.get",
    "ml.versions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/cloudtrace.agent",
   "role": {
    "description": "Agent access to Stackdriver Trace. Can write trace data.",
    "etag": "AA==",
    "name": "roles/cloudtrace.agent",
    "stage": "GA",
    "title": "Cloud Trace Agent"
   },
   "included_permissions": [
    "cloudtrace.traces.patch"
   ]
  },
  {
   "name": "roles/aiplatform.user",
   "role": {
    "description": "Grants access to use all resource in AI Platform",
    "etag": "AA==",
    "name": "roles/aiplatform.user",
    "stage": "BETA",
    "title": "AI Platform User"
   },
   "included_permissions": [
    "aiplatform.annotationSpecs.create",
    "aiplatform.annotationSpecs.delete",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotationSpecs.update",
    "aiplatform.annotations.create",
    "aiplatform.annotations.delete",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.annotations.update",
    "aiplatform.batchPredictionJobs.cancel",
    "aiplatform.batchPredictionJobs.create",
    "aiplatform.batchPredictionJobs.delete",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.delete",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.create",
    "aiplatform.dataItems.delete",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataItems.update",
    "aiplatform.dataLabelingJobs.cancel",
    "aiplatform.dataLabelingJobs.create",
    "aiplatform.dataLabelingJobs.delete",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.delete",
    "aiplatform.datasets.export",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.list",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.create",
    "aiplatform.endpoints.delete",
    "aiplatform.endpoints.deploy",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.endpoints.undeploy",
    "aiplatform.endpoints.update",
    "aiplatform.hyperparameterTuningJobs.cancel",
    "aiplatform.hyperparameterTuningJobs.create",
    "aiplatform.hyperparameterTuningJobs.delete",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.exportEvaluatedDataItems",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.delete",
    "aiplatform.models.export",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.models.upload",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.create",
    "aiplatform.specialistPools.delete",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.create",
    "aiplatform.studies.delete",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.studies.update",
    "aiplatform.trainingPipelines.cancel",
    "aiplatform.trainingPipelines.create",
    "aiplatform.trainingPipelines.delete",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.create",
    "aiplatform.trials.delete",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "aiplatform.trials.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudsupport.techSupportViewer",
   "role": {
    "description": "Read-only access to technical support cases (applicable for GCP Customer Care and Maps support).",
    "etag": "AA==",
    "name": "roles/cloudsupport.techSupportViewer",
    "stage": "GA",
    "title": "Tech Support Viewer"
   },
   "included_permissions": [
    "cloudsupport.properties.get",
    "cloudsupport.techCases.get",
    "cloudsupport.techCases.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/aiplatform.admin",
   "role": {
    "description": "Grants full access to all resources in AI Platform",
    "etag": "AA==",
    "name": "roles/aiplatform.admin",
    "stage": "BETA",
    "title": "AI Platform Administrator"
   },
   "included_permissions": [
    "aiplatform.annotationSpecs.create",
    "aiplatform.annotationSpecs.delete",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotationSpecs.update",
    "aiplatform.annotations.create",
    "aiplatform.annotations.delete",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.annotations.update",
    "aiplatform.batchPredictionJobs.cancel",
    "aiplatform.batchPredictionJobs.create",
    "aiplatform.batchPredictionJobs.delete",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.delete",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.create",
    "aiplatform.dataItems.delete",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataItems.update",
    "aiplatform.dataLabelingJobs.cancel",
    "aiplatform.dataLabelingJobs.create",
    "aiplatform.dataLabelingJobs.delete",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.delete",
    "aiplatform.datasets.export",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.list",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.create",
    "aiplatform.endpoints.delete",
    "aiplatform.endpoints.deploy",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.endpoints.undeploy",
    "aiplatform.endpoints.update",
    "aiplatform.hyperparameterTuningJobs.cancel",
    "aiplatform.hyperparameterTuningJobs.create",
    "aiplatform.hyperparameterTuningJobs.delete",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.migratableResources.migrate",
    "aiplatform.migratableResources.search",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.exportEvaluatedDataItems",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.delete",
    "aiplatform.models.export",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.models.upload",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.create",
    "aiplatform.specialistPools.delete",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.create",
    "aiplatform.studies.delete",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.studies.update",
    "aiplatform.trainingPipelines.cancel",
    "aiplatform.trainingPipelines.create",
    "aiplatform.trainingPipelines.delete",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.create",
    "aiplatform.trials.delete",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "aiplatform.trials.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudsecurityscanner.editor",
   "role": {
    "description": "Full access to all Web Security Scanner resources",
    "etag": "AA==",
    "name": "roles/cloudsecurityscanner.editor",
    "stage": "GA",
    "title": "Web Security Scanner Editor"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "compute.addresses.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudtasks.admin",
   "role": {
    "description": "Full access to queues and tasks.",
    "etag": "AA==",
    "name": "roles/cloudtasks.admin",
    "stage": "BETA",
    "title": "Cloud Tasks Admin"
   },
   "included_permissions": [
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.create",
    "cloudtasks.queues.delete",
    "cloudtasks.queues.get",
    "cloudtasks.queues.getIamPolicy",
    "cloudtasks.queues.list",
    "cloudtasks.queues.pause",
    "cloudtasks.queues.purge",
    "cloudtasks.queues.resume",
    "cloudtasks.queues.setIamPolicy",
    "cloudtasks.queues.update",
    "cloudtasks.tasks.create",
    "cloudtasks.tasks.delete",
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.get",
    "cloudtasks.tasks.list",
    "cloudtasks.tasks.run",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.enqueuer",
   "role": {
    "description": "Access to create tasks.",
    "etag": "AA==",
    "name": "roles/cloudtasks.enqueuer",
    "stage": "BETA",
    "title": "Cloud Tasks Enqueuer"
   },
   "included_permissions": [
    "cloudtasks.tasks.create",
    "cloudtasks.tasks.fullView",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.queueAdmin",
   "role": {
    "description": "Admin access to queues.",
    "etag": "AA==",
    "name": "roles/cloudtasks.queueAdmin",
    "stage": "BETA",
    "title": "Cloud Tasks Queue Admin"
   },
   "included_permissions": [
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.create",
    "cloudtasks.queues.delete",
    "cloudtasks.queues.get",
    "cloudtasks.queues.getIamPolicy",
    "cloudtasks.queues.list",
    "cloudtasks.queues.pause",
    "cloudtasks.queues.purge",
    "cloudtasks.queues.resume",
    "cloudtasks.queues.setIamPolicy",
    "cloudtasks.queues.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.serviceAgent",
   "role": {
    "description": "Grants Cloud Tasks Service Account access to manage resources.",
    "etag": "AA==",
    "name": "roles/cloudtasks.serviceAgent",
    "stage": "GA",
    "title": "Cloud Tasks Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "logging.logEntries.create"
   ]
  },
  {
   "name": "roles/anthosservicemesh.serviceAgent",
   "role": {
    "description": "Gives the Anthos Service Mesh service agent access to Cloud Platform resources.",
    "etag": "AA==",
    "name": "roles/anthosservicemesh.serviceAgent",
    "stage": "GA",
    "title": "Anthos Service Mesh Service Agent"
   },
   "included_permissions": [
    "container.configMaps.get",
    "container.configMaps.list",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.list",
    "container.deployments.get",
    "container.deployments.list",
    "container.events.get",
    "container.events.list",
    "container.namespaces.get",
    "container.namespaces.list",
    "container.pods.get",
    "container.pods.list",
    "container.services.get",
    "container.services.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list"
   ]
  },
  {
   "name": "roles/codelabapikeys.viewer",
   "role": {
    "description": "This role can view all properties except change history of API keys.",
    "etag": "AA==",
    "name": "roles/codelabapikeys.viewer",
    "stage": "BETA",
    "title": "Codelab API Keys Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.taskDeleter",
   "role": {
    "description": "Access to delete tasks.",
    "etag": "AA==",
    "name": "roles/cloudtasks.taskDeleter",
    "stage": "BETA",
    "title": "Cloud Tasks Task Deleter"
   },
   "included_permissions": [
    "cloudtasks.tasks.delete",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.taskRunner",
   "role": {
    "description": "Access to run tasks.",
    "etag": "AA==",
    "name": "roles/cloudtasks.taskRunner",
    "stage": "BETA",
    "title": "Cloud Tasks Task Runner"
   },
   "included_permissions": [
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.run",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtasks.viewer",
   "role": {
    "description": "Get and list access to tasks, queues, and locations.",
    "etag": "AA==",
    "name": "roles/cloudtasks.viewer",
    "stage": "BETA",
    "title": "Cloud Tasks Viewer"
   },
   "included_permissions": [
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.get",
    "cloudtasks.queues.list",
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.get",
    "cloudtasks.tasks.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtestservice.testAdmin",
   "role": {
    "description": "Full access to all Test Lab features",
    "etag": "AA==",
    "name": "roles/cloudtestservice.testAdmin",
    "stage": "GA",
    "title": "Firebase Test Lab Admin"
   },
   "included_permissions": [
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.create",
    "cloudtestservice.matrices.get",
    "cloudtestservice.matrices.update",
    "cloudtoolresults.executions.create",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.executions.update",
    "cloudtoolresults.histories.create",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.create",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.settings.update",
    "cloudtoolresults.steps.create",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "cloudtoolresults.steps.update",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/cloudtestservice.testViewer",
   "role": {
    "description": "Read access to Test Lab features",
    "etag": "AA==",
    "name": "roles/cloudtestservice.testViewer",
    "stage": "GA",
    "title": "Firebase Test Lab Viewer"
   },
   "included_permissions": [
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.get",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/cloudtpu.serviceAgent",
   "role": {
    "description": "Give Cloud TPUs service account access to managed resources",
    "etag": "AA==",
    "name": "roles/cloudtpu.serviceAgent",
    "stage": "GA",
    "title": "Cloud TPU V2 API Service Agent"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.operations.get",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/aiplatform.migrator",
   "role": {
    "description": "Grants access to use migration service in AI platform",
    "etag": "AA==",
    "name": "roles/aiplatform.migrator",
    "stage": "BETA",
    "title": "AI Platform Migration Service User"
   },
   "included_permissions": [
    "aiplatform.migratableResources.migrate",
    "aiplatform.migratableResources.search"
   ]
  },
  {
   "name": "roles/apigateway.admin",
   "role": {
    "description": "Full access to ApiGateway and related resources.",
    "etag": "AA==",
    "name": "roles/apigateway.admin",
    "stage": "GA",
    "title": "ApiGateway Admin"
   },
   "included_permissions": [
    "apigateway.apiconfigs.create",
    "apigateway.apiconfigs.delete",
    "apigateway.apiconfigs.get",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apiconfigs.setIamPolicy",
    "apigateway.apiconfigs.update",
    "apigateway.apis.create",
    "apigateway.apis.delete",
    "apigateway.apis.get",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.apis.setIamPolicy",
    "apigateway.apis.update",
    "apigateway.gateways.create",
    "apigateway.gateways.delete",
    "apigateway.gateways.get",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.gateways.setIamPolicy",
    "apigateway.gateways.update",
    "apigateway.locations.get",
    "apigateway.locations.list",
    "apigateway.operations.cancel",
    "apigateway.operations.delete",
    "apigateway.operations.get",
    "apigateway.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtrace.user",
   "role": {
    "description": "User access to Stackdriver Trace. Can view traces, insights and stats. Can create, list, view, and delete tasks.",
    "etag": "AA==",
    "name": "roles/cloudtrace.user",
    "stage": "GA",
    "title": "Cloud Trace User"
   },
   "included_permissions": [
    "cloudtrace.insights.get",
    "cloudtrace.insights.list",
    "cloudtrace.stats.get",
    "cloudtrace.tasks.create",
    "cloudtrace.tasks.delete",
    "cloudtrace.tasks.get",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.get",
    "cloudtrace.traces.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtranslate.admin",
   "role": {
    "description": "Full access to all Cloud Translation resources",
    "etag": "AA==",
    "name": "roles/cloudtranslate.admin",
    "stage": "GA",
    "title": "Cloud Translation API Admin"
   },
   "included_permissions": [
    "automl.models.get",
    "automl.models.predict",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.create",
    "cloudtranslate.glossaries.delete",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.cancel",
    "cloudtranslate.operations.delete",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtranslate.editor",
   "role": {
    "description": "Editor of all Cloud Translation resources",
    "etag": "AA==",
    "name": "roles/cloudtranslate.editor",
    "stage": "GA",
    "title": "Cloud Translation API Editor"
   },
   "included_permissions": [
    "automl.models.get",
    "automl.models.predict",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.create",
    "cloudtranslate.glossaries.delete",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.cancel",
    "cloudtranslate.operations.delete",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/assuredworkloads.reader",
   "role": {
    "description": "Grants read access to all Assured Workloads resources.",
    "etag": "AA==",
    "name": "roles/assuredworkloads.reader",
    "stage": "GA",
    "title": "Assured Workloads Reader"
   },
   "included_permissions": [
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/composer.admin",
   "role": {
    "description": "Full control of Composer resources.",
    "etag": "AA==",
    "name": "roles/composer.admin",
    "stage": "GA",
    "title": "Composer Administrator"
   },
   "included_permissions": [
    "composer.environments.create",
    "composer.environments.delete",
    "composer.environments.get",
    "composer.environments.list",
    "composer.environments.update",
    "composer.imageversions.list",
    "composer.operations.delete",
    "composer.operations.get",
    "composer.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudtranslate.serviceAgent",
   "role": {
    "description": "Gives Cloud Translation Service Account access to consumer resources.",
    "etag": "AA==",
    "name": "roles/cloudtranslate.serviceAgent",
    "stage": "GA",
    "title": "Cloud Translation API Service Agent"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/assuredworkloads.serviceAgent",
   "role": {
    "description": "Gives the Assured Workloads service account access to create KMS keyrings and keys.",
    "etag": "AA==",
    "name": "roles/assuredworkloads.serviceAgent",
    "stage": "GA",
    "title": "Assured Workloads Service Agent"
   },
   "included_permissions": [
    "cloudkms.cryptoKeys.create",
    "cloudkms.keyRings.create",
    "serviceusage.services.enable"
   ]
  },
  {
   "name": "roles/composer.environmentAndStorageObjectAdmin",
   "role": {
    "description": "Full control of Cloud Composer environments and Cloud Storage objects.",
    "etag": "AA==",
    "name": "roles/composer.environmentAndStorageObjectAdmin",
    "stage": "GA",
    "title": "Environment and Storage Object Administrator"
   },
   "included_permissions": [
    "composer.environments.create",
    "composer.environments.delete",
    "composer.environments.get",
    "composer.environments.list",
    "composer.environments.update",
    "composer.imageversions.list",
    "composer.operations.delete",
    "composer.operations.get",
    "composer.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/automl.admin",
   "role": {
    "description": "Full access to all AutoML resources",
    "etag": "AA==",
    "name": "roles/automl.admin",
    "stage": "BETA",
    "title": "AutoML Admin"
   },
   "included_permissions": [
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.setIamPolicy",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.locations.setIamPolicy",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.setIamPolicy",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigateway.viewer",
   "role": {
    "description": "Read-only access to ApiGateway and related resources.",
    "etag": "AA==",
    "name": "roles/apigateway.viewer",
    "stage": "GA",
    "title": "ApiGateway Viewer"
   },
   "included_permissions": [
    "apigateway.apiconfigs.get",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apis.get",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.gateways.get",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.locations.get",
    "apigateway.locations.list",
    "apigateway.operations.get",
    "apigateway.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtranslate.user",
   "role": {
    "description": "User of Cloud Translation and AutoML models",
    "etag": "AA==",
    "name": "roles/cloudtranslate.user",
    "stage": "GA",
    "title": "Cloud Translation API User"
   },
   "included_permissions": [
    "automl.models.get",
    "automl.models.predict",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/automl.predictor",
   "role": {
    "description": "Predict using models",
    "etag": "AA==",
    "name": "roles/automl.predictor",
    "stage": "BETA",
    "title": "AutoML Predictor"
   },
   "included_permissions": [
    "automl.models.predict",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudtranslate.viewer",
   "role": {
    "description": "Viewer of all Translation resources",
    "etag": "AA==",
    "name": "roles/cloudtranslate.viewer",
    "stage": "GA",
    "title": "Cloud Translation API Viewer"
   },
   "included_permissions": [
    "automl.models.get",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/codelabapikeys.admin",
   "role": {
    "description": "Full access to API keys",
    "etag": "AA==",
    "name": "roles/codelabapikeys.admin",
    "stage": "BETA",
    "title": "Codelab ApiKeys Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/codelabapikeys.editor",
   "role": {
    "description": "This role can view and edit all properties of API keys.",
    "etag": "AA==",
    "name": "roles/codelabapikeys.editor",
    "stage": "BETA",
    "title": "Codelab API Keys Editor"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/apigee.admin",
   "role": {
    "description": "Full access to all apigee resource features",
    "etag": "AA==",
    "name": "roles/apigee.admin",
    "stage": "GA",
    "title": "Apigee Organization Admin"
   },
   "included_permissions": [
    "apigee.apiproductattributes.createOrUpdateAll",
    "apigee.apiproductattributes.delete",
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproductattributes.update",
    "apigee.apiproducts.create",
    "apigee.apiproducts.delete",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.apiproducts.update",
    "apigee.appkeys.create",
    "apigee.appkeys.delete",
    "apigee.appkeys.get",
    "apigee.appkeys.manage",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.caches.delete",
    "apigee.caches.list",
    "apigee.canaryevaluations.create",
    "apigee.canaryevaluations.get",
    "apigee.datacollectors.create",
    "apigee.datacollectors.delete",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datacollectors.update",
    "apigee.datastores.create",
    "apigee.datastores.delete",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.datastores.update",
    "apigee.deployments.create",
    "apigee.deployments.delete",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.deployments.update",
    "apigee.developerappattributes.createOrUpdateAll",
    "apigee.developerappattributes.delete",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerappattributes.update",
    "apigee.developerapps.create",
    "apigee.developerapps.delete",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerapps.manage",
    "apigee.developerattributes.createOrUpdateAll",
    "apigee.developerattributes.delete",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developerattributes.update",
    "apigee.developers.create",
    "apigee.developers.delete",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.developers.update",
    "apigee.envgroupattachments.create",
    "apigee.envgroupattachments.delete",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.create",
    "apigee.envgroups.delete",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.envgroups.update",
    "apigee.environments.create",
    "apigee.environments.delete",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.getIamPolicy",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.environments.manageRuntime",
    "apigee.environments.setIamPolicy",
    "apigee.environments.update",
    "apigee.exports.create",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.flowhooks.attachSharedFlow",
    "apigee.flowhooks.detachSharedFlow",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.hostqueries.create",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.ingressconfigs.get",
    "apigee.instanceattachments.create",
    "apigee.instanceattachments.delete",
    "apigee.instanceattachments.get",
    "apigee.instanceattachments.list",
    "apigee.instances.create",
    "apigee.instances.delete",
    "apigee.instances.get",
    "apigee.instances.list",
    "apigee.instances.reportStatus",
    "apigee.keystorealiases.create",
    "apigee.keystorealiases.delete",
    "apigee.keystorealiases.exportCertificate",
    "apigee.keystorealiases.generateCSR",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystorealiases.update",
    "apigee.keystores.create",
    "apigee.keystores.delete",
    "apigee.keystores.export",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.create",
    "apigee.keyvaluemaps.delete",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.maskconfigs.update",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.create",
    "apigee.organizations.delete",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.organizations.update",
    "apigee.portals.create",
    "apigee.portals.delete",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.portals.update",
    "apigee.projects.update",
    "apigee.proxies.create",
    "apigee.proxies.delete",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.delete",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.proxyrevisions.update",
    "apigee.queries.create",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.references.create",
    "apigee.references.delete",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.references.update",
    "apigee.reports.create",
    "apigee.reports.delete",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.reports.update",
    "apigee.resourcefiles.create",
    "apigee.resourcefiles.delete",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.resourcefiles.update",
    "apigee.sharedflowrevisions.delete",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflowrevisions.update",
    "apigee.sharedflows.create",
    "apigee.sharedflows.delete",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.create",
    "apigee.targetservers.delete",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.targetservers.update",
    "apigee.tracesessions.create",
    "apigee.tracesessions.delete",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/aiplatform.viewer",
   "role": {
    "description": "Grants access to view all resource in AI Platform",
    "etag": "AA==",
    "name": "roles/aiplatform.viewer",
    "stage": "BETA",
    "title": "AI Platform Viewer"
   },
   "included_permissions": [
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.get",
    "aiplatform.datasets.list",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/apigee.analyticsAgent",
   "role": {
    "description": "Curated set of permissions for Apigee Universal Data Collection Agent to manage analytics for an Apigee Organization",
    "etag": "AA==",
    "name": "roles/apigee.analyticsAgent",
    "stage": "GA",
    "title": "Apigee Analytics Agent"
   },
   "included_permissions": [
    "apigee.environments.getDataLocation"
   ]
  },
  {
   "name": "roles/apigee.analyticsEditor",
   "role": {
    "description": "Analytics editor for an Apigee Organization",
    "etag": "AA==",
    "name": "roles/apigee.analyticsEditor",
    "stage": "GA",
    "title": "Apigee Analytics Editor"
   },
   "included_permissions": [
    "apigee.datacollectors.create",
    "apigee.datacollectors.delete",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datacollectors.update",
    "apigee.datastores.create",
    "apigee.datastores.delete",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.datastores.update",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.exports.create",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.hostqueries.create",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.queries.create",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.reports.create",
    "apigee.reports.delete",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.reports.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/assuredworkloads.admin",
   "role": {
    "description": "Grants full access to Assured Workloads resources, including IAM policy administration.",
    "etag": "AA==",
    "name": "roles/assuredworkloads.admin",
    "stage": "GA",
    "title": "Assured Workloads Administrator"
   },
   "included_permissions": [
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.create",
    "assuredworkloads.workload.delete",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "assuredworkloads.workload.update",
    "orgpolicy.policy.get",
    "orgpolicy.policy.set",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/assuredworkloads.editor",
   "role": {
    "description": "Grants access to read and write to Assured Workloads resources.",
    "etag": "AA==",
    "name": "roles/assuredworkloads.editor",
    "stage": "GA",
    "title": "Assured Workloads Editor"
   },
   "included_permissions": [
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.create",
    "assuredworkloads.workload.delete",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "assuredworkloads.workload.update",
    "orgpolicy.policy.get",
    "orgpolicy.policy.set",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/apigee.analyticsViewer",
   "role": {
    "description": "Analytics viewer for an Apigee Organization",
    "etag": "AA==",
    "name": "roles/apigee.analyticsViewer",
    "stage": "GA",
    "title": "Apigee Analytics Viewer"
   },
   "included_permissions": [
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.reports.get",
    "apigee.reports.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/composer.environmentAndStorageObjectViewer",
   "role": {
    "description": "Read access to Cloud Composer environments and Cloud Storage objects.",
    "etag": "AA==",
    "name": "roles/composer.environmentAndStorageObjectViewer",
    "stage": "GA",
    "title": "Environment User and Storage Object Viewer"
   },
   "included_permissions": [
    "composer.environments.get",
    "composer.environments.list",
    "composer.imageversions.list",
    "composer.operations.get",
    "composer.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/composer.serviceAgent",
   "role": {
    "description": "Cloud Composer API service agent can manage environments.",
    "etag": "AA==",
    "name": "roles/composer.serviceAgent",
    "stage": "GA",
    "title": "Cloud Composer API Service Agent"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.applications.update",
    "appengine.instances.delete",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.runtimes.actAsAdmin",
    "appengine.services.delete",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.services.update",
    "appengine.versions.create",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.list",
    "appengine.versions.update",
    "artifactregistry.repositories.delete",
    "cloudnotifications.activities.list",
    "cloudsql.backupRuns.create",
    "cloudsql.backupRuns.delete",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.create",
    "cloudsql.databases.delete",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.databases.update",
    "cloudsql.instances.addServerCa",
    "cloudsql.instances.clone",
    "cloudsql.instances.connect",
    "cloudsql.instances.create",
    "cloudsql.instances.delete",
    "cloudsql.instances.demoteMaster",
    "cloudsql.instances.export",
    "cloudsql.instances.failover",
    "cloudsql.instances.get",
    "cloudsql.instances.import",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.instances.login",
    "cloudsql.instances.promoteReplica",
    "cloudsql.instances.resetSslConfig",
    "cloudsql.instances.restart",
    "cloudsql.instances.restoreBackup",
    "cloudsql.instances.rotateServerCa",
    "cloudsql.instances.startReplica",
    "cloudsql.instances.stopReplica",
    "cloudsql.instances.truncateLog",
    "cloudsql.instances.update",
    "cloudsql.sslCerts.create",
    "cloudsql.sslCerts.createEphemeral",
    "cloudsql.sslCerts.delete",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.create",
    "cloudsql.users.delete",
    "cloudsql.users.list",
    "cloudsql.users.update",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.use",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.approve",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.hostServiceAgent.use",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.bind",
    "container.roles.create",
    "container.roles.delete",
    "container.roles.escalate",
    "container.roles.get",
    "container.roles.list",
    "container.roles.update",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.deployments.cancelPreview",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.stop",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "firebase.projects.get",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "logging.buckets.create",
    "logging.buckets.delete",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.buckets.undelete",
    "logging.buckets.update",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.create",
    "logging.exclusions.delete",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.exclusions.update",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.sinks.update",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.update",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "orgpolicy.policy.get",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.operations.get",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "stackdriver.projects.get",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/apigee.apiAdmin",
   "role": {
    "description": "Full read/write access to all apigee API resources",
    "etag": "AA==",
    "name": "roles/apigee.apiAdmin",
    "stage": "GA",
    "title": "Apigee API Admin"
   },
   "included_permissions": [
    "apigee.apiproductattributes.createOrUpdateAll",
    "apigee.apiproductattributes.delete",
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproductattributes.update",
    "apigee.apiproducts.create",
    "apigee.apiproducts.delete",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.apiproducts.update",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.keyvaluemaps.list",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.proxies.create",
    "apigee.proxies.delete",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.delete",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.proxyrevisions.update",
    "apigee.sharedflowrevisions.delete",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflowrevisions.update",
    "apigee.sharedflows.create",
    "apigee.sharedflows.delete",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.tracesessions.create",
    "apigee.tracesessions.delete",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/composer.worker",
   "role": {
    "description": "Worker access to Composer. Intended for service accounts.",
    "etag": "AA==",
    "name": "roles/composer.worker",
    "stage": "GA",
    "title": "Composer Worker"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.delete",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.create",
    "artifactregistry.repositories.delete",
    "artifactregistry.repositories.deleteArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.setIamPolicy",
    "artifactregistry.repositories.update",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.delete",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.delete",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.approve",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.hostServiceAgent.use",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.bind",
    "container.roles.create",
    "container.roles.delete",
    "container.roles.escalate",
    "container.roles.get",
    "container.roles.list",
    "container.roles.update",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.list",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "source.repos.get",
    "source.repos.list",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/compute.admin",
   "role": {
    "description": "Full control of all Compute Engine resources.",
    "etag": "AA==",
    "name": "roles/compute.admin",
    "stage": "GA",
    "title": "Compute Admin"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.commitments.create",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.commitments.updateReservations",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.delete",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.globalPublicDelegatedPrefixes.create",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.globalPublicDelegatedPrefixes.use",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.create",
    "compute.maintenancePolicies.delete",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.maintenancePolicies.setIamPolicy",
    "compute.maintenancePolicies.use",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.addNodes",
    "compute.nodeGroups.create",
    "compute.nodeGroups.delete",
    "compute.nodeGroups.deleteNodes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeGroups.setIamPolicy",
    "compute.nodeGroups.setNodeTemplate",
    "compute.nodeGroups.update",
    "compute.nodeTemplates.create",
    "compute.nodeTemplates.delete",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTemplates.setIamPolicy",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.administerXpn",
    "compute.organizations.disableXpnHost",
    "compute.organizations.disableXpnResource",
    "compute.organizations.enableXpnHost",
    "compute.organizations.enableXpnResource",
    "compute.organizations.listAssociations",
    "compute.organizations.setSecurityPolicy",
    "compute.oslogin.updateExternalUser",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.projects.setDefaultNetworkTier",
    "compute.projects.setDefaultServiceAccount",
    "compute.projects.setUsageExportBucket",
    "compute.publicAdvertisedPrefixes.create",
    "compute.publicAdvertisedPrefixes.delete",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicAdvertisedPrefixes.update",
    "compute.publicAdvertisedPrefixes.updatePolicy",
    "compute.publicAdvertisedPrefixes.use",
    "compute.publicDelegatedPrefixes.create",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.publicDelegatedPrefixes.use",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.delete",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionOperations.setIamPolicy",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.create",
    "compute.reservations.delete",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.reservations.resize",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.delete",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zoneOperations.setIamPolicy",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.apiReader",
   "role": {
    "description": "Reader of apigee resources",
    "etag": "AA==",
    "name": "roles/apigee.apiReader",
    "stage": "GA",
    "title": "Apigee API Reader"
   },
   "included_permissions": [
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.keyvaluemaps.list",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.osLogin",
   "role": {
    "description": "Access to log in to a Compute Engine instance as a standard (non-administrator) user.",
    "etag": "AA==",
    "name": "roles/compute.osLogin",
    "stage": "GA",
    "title": "Compute OS Login"
   },
   "included_permissions": [
    "compute.instances.get",
    "compute.instances.list",
    "compute.instances.osLogin",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/compute.imageUser",
   "role": {
    "description": "Read and use image resources.",
    "etag": "AA==",
    "name": "roles/compute.imageUser",
    "stage": "GA",
    "title": "Compute Image User"
   },
   "included_permissions": [
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.list",
    "compute.images.useReadOnly",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/compute.instanceAdmin",
   "role": {
    "description": "Full control of Compute Engine instance resources.",
    "etag": "AA==",
    "name": "roles/compute.instanceAdmin",
    "stage": "GA",
    "title": "Compute Instance Admin (beta)"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.list",
    "compute.disks.resize",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.list",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.licenses.get",
    "compute.licenses.list",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/compute.instanceAdmin.v1",
   "role": {
    "description": "Full control of Compute Engine instances, instance groups, disks, snapshots, and images. Read access to all Compute Engine networking resources.",
    "etag": "AA==",
    "name": "roles/compute.instanceAdmin.v1",
    "stage": "GA",
    "title": "Compute Instance Admin (v1)"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.developerAdmin",
   "role": {
    "description": "Developer admin of apigee resources",
    "etag": "AA==",
    "name": "roles/apigee.developerAdmin",
    "stage": "GA",
    "title": "Apigee Developer Admin"
   },
   "included_permissions": [
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.appkeys.create",
    "apigee.appkeys.delete",
    "apigee.appkeys.get",
    "apigee.appkeys.manage",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.datacollectors.create",
    "apigee.datacollectors.delete",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datacollectors.update",
    "apigee.developerappattributes.createOrUpdateAll",
    "apigee.developerappattributes.delete",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerappattributes.update",
    "apigee.developerapps.create",
    "apigee.developerapps.delete",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerapps.manage",
    "apigee.developerattributes.createOrUpdateAll",
    "apigee.developerattributes.delete",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developerattributes.update",
    "apigee.developers.create",
    "apigee.developers.delete",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.developers.update",
    "apigee.environments.get",
    "apigee.environments.getStats",
    "apigee.hoststats.get",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.loadBalancerAdmin",
   "role": {
    "description": "Full control of Compute Engine resources related to load balancer.",
    "etag": "AA==",
    "name": "roles/compute.loadBalancerAdmin",
    "stage": "BETA",
    "title": "Compute Load Balancer Admin"
   },
   "included_permissions": [
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instances.get",
    "compute.instances.list",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.projects.get",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.use",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/automlrecommendations.editor",
   "role": {
    "description": "Editor of all Recommendations AI resources.",
    "etag": "AA==",
    "name": "roles/automlrecommendations.editor",
    "stage": "BETA",
    "title": "Recommendations AI Editor"
   },
   "included_permissions": [
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.serviceAgent",
   "role": {
    "description": "Service agent that grants access to Apigee resources - API Products, Developers, Developer Apps, and App Keys.",
    "etag": "AA==",
    "name": "roles/apigee.serviceAgent",
    "stage": "GA",
    "title": "Apigee Service Agent"
   },
   "included_permissions": [
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.appkeys.create",
    "apigee.appkeys.manage",
    "apigee.apps.get",
    "apigee.canaryevaluations.create",
    "apigee.canaryevaluations.get",
    "apigee.developerapps.create",
    "apigee.developerapps.delete",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerapps.manage",
    "apigee.developers.create",
    "apigee.developers.get",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.manageRuntime",
    "apigee.ingressconfigs.get",
    "apigee.instances.reportStatus",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.get",
    "apigee.proxyrevisions.get",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create"
   ]
  },
  {
   "name": "roles/compute.packetMirroringAdmin",
   "role": {
    "description": "Specify resources to be mirrored.",
    "etag": "AA==",
    "name": "roles/compute.packetMirroringAdmin",
    "stage": "GA",
    "title": "Compute packet mirroring admin"
   },
   "included_permissions": [
    "compute.networks.mirror",
    "compute.projects.get",
    "compute.subnetworks.mirror",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/autoscaling.metricsWriter",
   "role": {
    "description": "Access to write metrics for autoscaling site",
    "etag": "AA==",
    "name": "roles/autoscaling.metricsWriter",
    "stage": "BETA",
    "title": "Autoscaling Metrics Writer"
   },
   "included_permissions": [
    "autoscaling.sites.writeMetrics"
   ]
  },
  {
   "name": "roles/bigquery.jobUser",
   "role": {
    "description": "Access to run jobs",
    "etag": "AA==",
    "name": "roles/bigquery.jobUser",
    "stage": "GA",
    "title": "BigQuery Job User"
   },
   "included_permissions": [
    "bigquery.jobs.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/accessapproval.approver",
   "role": {
    "description": "Ability to view or act on access approval requests and view configuration",
    "etag": "AA==",
    "name": "roles/accessapproval.approver",
    "stage": "BETA",
    "title": "Access Approval Approver"
   },
   "included_permissions": [
    "accessapproval.requests.approve",
    "accessapproval.requests.dismiss",
    "accessapproval.requests.get",
    "accessapproval.requests.list",
    "accessapproval.settings.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.serviceAgent",
   "role": {
    "description": "Gives Compute Engine Service Account access to assert service account authority. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/compute.serviceAgent",
    "stage": "GA",
    "title": "Compute Engine Service Agent"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "compute.instanceGroupManagers.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.signJwt",
    "logging.logEntries.create",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/bigquery.admin",
   "role": {
    "description": "Administer all BigQuery resources and data",
    "etag": "AA==",
    "name": "roles/bigquery.admin",
    "stage": "GA",
    "title": "BigQuery Admin"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.bireservations.update",
    "bigquery.capacityCommitments.create",
    "bigquery.capacityCommitments.delete",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.capacityCommitments.update",
    "bigquery.config.get",
    "bigquery.config.update",
    "bigquery.connections.create",
    "bigquery.connections.delete",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.setIamPolicy",
    "bigquery.connections.update",
    "bigquery.connections.use",
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.jobs.update",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.savedqueries.create",
    "bigquery.savedqueries.delete",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.savedqueries.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setCategory",
    "bigquery.tables.setIamPolicy",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "bigquery.transfers.get",
    "bigquery.transfers.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.storageAdmin",
   "role": {
    "description": "Full control of Compute Engine storage resources.",
    "etag": "AA==",
    "name": "roles/compute.storageAdmin",
    "stage": "GA",
    "title": "Compute Storage Admin"
   },
   "included_permissions": [
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.projects.get",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/compute.networkUser",
   "role": {
    "description": "Access to use Compute Engine networking resources.",
    "etag": "AA==",
    "name": "roles/compute.networkUser",
    "stage": "GA",
    "title": "Compute Network User"
   },
   "included_permissions": [
    "compute.addresses.createInternal",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.useInternal",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.use",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.use",
    "compute.networks.access",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zones.get",
    "compute.zones.list",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.synchronizerManager",
   "role": {
    "description": "Curated set of permissions for a Synchronizer to manage environments in an Apigee Organization",
    "etag": "AA==",
    "name": "roles/apigee.synchronizerManager",
    "stage": "GA",
    "title": "Apigee Synchronizer Manager"
   },
   "included_permissions": [
    "apigee.environments.get",
    "apigee.environments.manageRuntime",
    "apigee.ingressconfigs.get"
   ]
  },
  {
   "name": "roles/appengine.serviceAdmin",
   "role": {
    "description": "Can view and change traffic splits, scaling settings, and delete old versions; can't create new versions.",
    "etag": "AA==",
    "name": "roles/appengine.serviceAdmin",
    "stage": "GA",
    "title": "App Engine Service Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.instances.delete",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.delete",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.services.update",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.list",
    "appengine.versions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.metadataViewer",
   "role": {
    "description": "Access to view table and dataset metadata",
    "etag": "AA==",
    "name": "roles/bigquery.metadataViewer",
    "stage": "GA",
    "title": "BigQuery Metadata Viewer"
   },
   "included_permissions": [
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.tables.get",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/consumerprocurement.orderViewer",
   "role": {
    "description": "Allows inspecting purchases",
    "etag": "AA==",
    "name": "roles/consumerprocurement.orderViewer",
    "stage": "BETA",
    "title": "Consumer Procurement Order Viewer"
   },
   "included_permissions": [
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list"
   ]
  },
  {
   "name": "roles/artifactregistry.reader",
   "role": {
    "description": "Access to read repository items.",
    "etag": "AA==",
    "name": "roles/artifactregistry.reader",
    "stage": "BETA",
    "title": "Artifact Registry Reader"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list"
   ]
  },
  {
   "name": "roles/bigquery.resourceAdmin",
   "role": {
    "description": "Administer all BigQuery resources.",
    "etag": "AA==",
    "name": "roles/bigquery.resourceAdmin",
    "stage": "GA",
    "title": "BigQuery Resource Admin"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.bireservations.update",
    "bigquery.capacityCommitments.create",
    "bigquery.capacityCommitments.delete",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.capacityCommitments.update",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/container.clusterAdmin",
   "role": {
    "description": "Management of Kubernetes Clusters.",
    "etag": "AA==",
    "name": "roles/container.clusterAdmin",
    "stage": "GA",
    "title": "Kubernetes Engine Cluster Admin"
   },
   "included_permissions": [
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.list",
    "container.clusters.update",
    "container.operations.get",
    "container.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.continuousValidationConfigViewer",
   "role": {
    "description": "Viewer of Binary Authorization ContinuousValidationConfig",
    "etag": "AA==",
    "name": "roles/binaryauthorization.continuousValidationConfigViewer",
    "stage": "BETA",
    "title": "Binary Authorization ContinuousValidationConfig Viewer"
   },
   "included_permissions": [
    "binaryauthorization.continuousValidationConfig.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/artifactregistry.writer",
   "role": {
    "description": "Access to read and write repository items.",
    "etag": "AA==",
    "name": "roles/artifactregistry.writer",
    "stage": "BETA",
    "title": "Artifact Registry Writer"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list"
   ]
  },
  {
   "name": "roles/container.hostServiceAgentUser",
   "role": {
    "description": "Allows the Kubernetes Engine service account in the host project to configure shared network resources for cluster management. Also gives access to inspect the firewall rules in the host project, and configure Cloud DNS resources.",
    "etag": "AA==",
    "name": "roles/container.hostServiceAgentUser",
    "stage": "GA",
    "title": "Kubernetes Engine Host Service Agent User"
   },
   "included_permissions": [
    "compute.firewalls.get",
    "container.hostServiceAgent.use",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone"
   ]
  },
  {
   "name": "roles/binaryauthorization.policyEditor",
   "role": {
    "description": "Editor of Binary Authorization Policy",
    "etag": "AA==",
    "name": "roles/binaryauthorization.policyEditor",
    "stage": "GA",
    "title": "Binary Authorization Policy Editor"
   },
   "included_permissions": [
    "binaryauthorization.policy.get",
    "binaryauthorization.policy.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigqueryconnection.serviceAgent",
   "role": {
    "description": "Gives BigQuery Connection Service access to Cloud SQL instances in user projects.",
    "etag": "AA==",
    "name": "roles/bigqueryconnection.serviceAgent",
    "stage": "GA",
    "title": "BigQuery Connection Service Agent"
   },
   "included_permissions": [
    "cloudsql.instances.connect",
    "cloudsql.instances.get",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create"
   ]
  },
  {
   "name": "roles/composer.sharedVpcAgent",
   "role": {
    "description": "Role that should be assigned to Composer Agent service account in Shared VPC host project",
    "etag": "AA==",
    "name": "roles/composer.sharedVpcAgent",
    "stage": "GA",
    "title": "Composer Shared VPC Agent"
   },
   "included_permissions": [
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.removePeering",
    "compute.networks.updatePeering",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.zones.get",
    "compute.zones.list"
   ]
  },
  {
   "name": "roles/chat.owner",
   "role": {
    "description": "Can view and modify bot configurations",
    "etag": "AA==",
    "name": "roles/chat.owner",
    "stage": "GA",
    "title": "Chat Bots Owner"
   },
   "included_permissions": [
    "chat.bots.get",
    "chat.bots.update"
   ]
  },
  {
   "name": "roles/bigtable.reader",
   "role": {
    "description": "Read access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
    "etag": "AA==",
    "name": "roles/bigtable.reader",
    "stage": "GA",
    "title": "Bigtable Reader"
   },
   "included_permissions": [
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.backups.get",
    "bigtable.backups.list",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.instances.get",
    "bigtable.instances.list",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.list",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/cloudasset.owner",
   "role": {
    "description": "Full access to cloud assets metadata",
    "etag": "AA==",
    "name": "roles/cloudasset.owner",
    "stage": "GA",
    "title": "Cloud Asset Owner"
   },
   "included_permissions": [
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "recommender.locations.get",
    "recommender.locations.list"
   ]
  },
  {
   "name": "roles/containeranalysis.notes.editor",
   "role": {
    "description": "Can edit Container Analysis Notes.",
    "etag": "AA==",
    "name": "roles/containeranalysis.notes.editor",
    "stage": "GA",
    "title": "Container Analysis Notes Editor"
   },
   "included_permissions": [
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.list",
    "containeranalysis.notes.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudfunctions.admin",
   "role": {
    "description": "Full access to functions, operations and locations.",
    "etag": "AA==",
    "name": "roles/cloudfunctions.admin",
    "stage": "GA",
    "title": "Cloud Functions Admin"
   },
   "included_permissions": [
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.attestorsAdmin",
   "role": {
    "description": "Adminstrator of Binary Authorization Attestors",
    "etag": "AA==",
    "name": "roles/binaryauthorization.attestorsAdmin",
    "stage": "GA",
    "title": "Binary Authorization Attestor Admin"
   },
   "included_permissions": [
    "binaryauthorization.attestors.create",
    "binaryauthorization.attestors.delete",
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.setIamPolicy",
    "binaryauthorization.attestors.update",
    "binaryauthorization.attestors.verifyImageAttested",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.continuousValidationConfigEditor",
   "role": {
    "description": "Editor of Binary Authorization ContinuousValidationConfig",
    "etag": "AA==",
    "name": "roles/binaryauthorization.continuousValidationConfigEditor",
    "stage": "BETA",
    "title": "Binary Authorization ContinuousValidationConfig Editor"
   },
   "included_permissions": [
    "binaryauthorization.continuousValidationConfig.get",
    "binaryauthorization.continuousValidationConfig.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.networkViewer",
   "role": {
    "description": "Read-only access to Compute Engine networking resources.",
    "etag": "AA==",
    "name": "roles/compute.networkViewer",
    "stage": "GA",
    "title": "Compute Network Viewer"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.projects.get",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zones.get",
    "compute.zones.list",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.list",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.list",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.list",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/compute.orgFirewallPolicyAdmin",
   "role": {
    "description": "Full control of Compute Engine Organization Firewall Policies.",
    "etag": "AA==",
    "name": "roles/compute.orgFirewallPolicyAdmin",
    "stage": "GA",
    "title": "Compute Organization Firewall Policy Admin"
   },
   "included_permissions": [
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/billing.user",
   "role": {
    "description": "Can associate projects with billing accounts",
    "etag": "AA==",
    "name": "roles/billing.user",
    "stage": "GA",
    "title": "Billing Account User"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.getIamPolicy",
    "billing.accounts.list",
    "billing.accounts.redeemPromotion",
    "billing.credits.list",
    "billing.resourceAssociations.create"
   ]
  },
  {
   "name": "roles/cloudbuild.builds.builder",
   "role": {
    "description": "Can perform builds",
    "etag": "AA==",
    "name": "roles/cloudbuild.builds.builder",
    "stage": "GA",
    "title": "Cloud Build Service Account"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "logging.logEntries.create",
    "pubsub.topics.create",
    "pubsub.topics.publish",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "source.repos.get",
    "source.repos.list",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/billing.viewer",
   "role": {
    "description": "Can view information about billing accounts.",
    "etag": "AA==",
    "name": "roles/billing.viewer",
    "stage": "GA",
    "title": "Billing Account Viewer"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.getIamPolicy",
    "billing.accounts.getPaymentInfo",
    "billing.accounts.getSpendingInformation",
    "billing.accounts.getUsageExportSpec",
    "billing.accounts.list",
    "billing.budgets.get",
    "billing.budgets.list",
    "billing.credits.list",
    "billing.resourceAssociations.list",
    "billing.subscriptions.get",
    "billing.subscriptions.list",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list"
   ]
  },
  {
   "name": "roles/cloudiot.admin",
   "role": {
    "description": "Full control of all Cloud IoT resources and permissions.",
    "etag": "AA==",
    "name": "roles/cloudiot.admin",
    "stage": "GA",
    "title": "Cloud IoT Admin"
   },
   "included_permissions": [
    "cloudiot.devices.bindGateway",
    "cloudiot.devices.create",
    "cloudiot.devices.delete",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.unbindGateway",
    "cloudiot.devices.update",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.create",
    "cloudiot.registries.delete",
    "cloudiot.registries.get",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudiot.registries.setIamPolicy",
    "cloudiot.registries.update",
    "cloudiottoken.tokensettings.get",
    "cloudiottoken.tokensettings.update"
   ]
  },
  {
   "name": "roles/compute.orgFirewallPolicyUser",
   "role": {
    "description": "View or use Compute Engine Firewall Policies to associate with the organization or folders.",
    "etag": "AA==",
    "name": "roles/compute.orgFirewallPolicyUser",
    "stage": "GA",
    "title": "Compute Organization Firewall Policy User"
   },
   "included_permissions": [
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.use",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.portalAdmin",
   "role": {
    "description": "Portal admin for an Apigee Organization",
    "etag": "AA==",
    "name": "roles/apigee.portalAdmin",
    "stage": "GA",
    "title": "Apigee Portal Admin"
   },
   "included_permissions": [
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.portals.create",
    "apigee.portals.delete",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.portals.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.orgSecurityPolicyAdmin",
   "role": {
    "description": "Full control of Compute Engine Organization Security Policies.",
    "etag": "AA==",
    "name": "roles/compute.orgSecurityPolicyAdmin",
    "stage": "GA",
    "title": "Compute Organization Security Policy Admin"
   },
   "included_permissions": [
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.projects.get",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudconfig.viewer",
   "role": {
    "description": "Read access to Firebase Remote Config resources.",
    "etag": "AA==",
    "name": "roles/cloudconfig.viewer",
    "stage": "GA",
    "title": "Firebase Remote Config Viewer"
   },
   "included_permissions": [
    "cloudconfig.configs.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudiot.provisioner",
   "role": {
    "description": "Access to create and delete devices from registries, but not to modify the registries.",
    "etag": "AA==",
    "name": "roles/cloudiot.provisioner",
    "stage": "GA",
    "title": "Cloud IoT Provisioner"
   },
   "included_permissions": [
    "cloudiot.devices.bindGateway",
    "cloudiot.devices.create",
    "cloudiot.devices.delete",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.unbindGateway",
    "cloudiot.devices.update",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.get",
    "cloudiot.registries.list",
    "cloudiottoken.tokensettings.get"
   ]
  },
  {
   "name": "roles/cloudjobdiscovery.profilesEditor",
   "role": {
    "description": "Write access to all profile data in Cloud Talent Solution.",
    "etag": "AA==",
    "name": "roles/cloudjobdiscovery.profilesEditor",
    "stage": "GA",
    "title": "Profile Editor"
   },
   "included_permissions": [
    "cloudjobdiscovery.events.create",
    "cloudjobdiscovery.profiles.create",
    "cloudjobdiscovery.profiles.delete",
    "cloudjobdiscovery.profiles.get",
    "cloudjobdiscovery.profiles.search",
    "cloudjobdiscovery.profiles.update",
    "cloudjobdiscovery.tenants.create",
    "cloudjobdiscovery.tenants.delete",
    "cloudjobdiscovery.tenants.get",
    "cloudjobdiscovery.tenants.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudkms.cryptoKeyDecrypter",
   "role": {
    "description": "Enables Decrypt operations",
    "etag": "AA==",
    "name": "roles/cloudkms.cryptoKeyDecrypter",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Decrypter"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.useToDecrypt",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/compute.orgSecurityResourceAdmin",
   "role": {
    "description": "Full control of Compute Engine Firewall Policy associations to the organization or folders.",
    "etag": "AA==",
    "name": "roles/compute.orgSecurityResourceAdmin",
    "stage": "GA",
    "title": "Compute Organization Resource Admin"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.organizations.listAssociations",
    "compute.organizations.setSecurityPolicy",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/cloudkms.cryptoKeyEncrypterDecrypter",
   "role": {
    "description": "Enables Encrypt and Decrypt operations",
    "etag": "AA==",
    "name": "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Encrypter/Decrypter"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.useToDecrypt",
    "cloudkms.cryptoKeyVersions.useToEncrypt",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/cloudjobdiscovery.profilesViewer",
   "role": {
    "description": "Read access to all profile data in Cloud Talent Solution.",
    "etag": "AA==",
    "name": "roles/cloudjobdiscovery.profilesViewer",
    "stage": "GA",
    "title": "Profile Viewer"
   },
   "included_permissions": [
    "cloudjobdiscovery.profiles.get",
    "cloudjobdiscovery.profiles.search",
    "cloudjobdiscovery.tenants.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudjobdiscovery.admin",
   "role": {
    "description": "Access to Cloud Talent Solution Self-Service Tools.",
    "etag": "AA==",
    "name": "roles/cloudjobdiscovery.admin",
    "stage": "GA",
    "title": "Admin"
   },
   "included_permissions": [
    "cloudjobdiscovery.tools.access",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datafusion.serviceAgent",
   "role": {
    "description": "Gives Cloud Data Fusion service account access to Service Networking, Cloud Dataproc, Cloud Storage, BigQuery, Cloud Spanner, and Cloud Bigtable resources.",
    "etag": "AA==",
    "name": "roles/datafusion.serviceAgent",
    "stage": "GA",
    "title": "Cloud Data Fusion API Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setCategory",
    "bigquery.tables.setIamPolicy",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "bigtable.appProfiles.create",
    "bigtable.appProfiles.delete",
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.appProfiles.update",
    "bigtable.backups.create",
    "bigtable.backups.delete",
    "bigtable.backups.get",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.backups.restore",
    "bigtable.backups.setIamPolicy",
    "bigtable.backups.update",
    "bigtable.clusters.create",
    "bigtable.clusters.delete",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.clusters.update",
    "bigtable.instances.create",
    "bigtable.instances.delete",
    "bigtable.instances.get",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.instances.setIamPolicy",
    "bigtable.instances.update",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.create",
    "bigtable.tables.delete",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.mutateRows",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "bigtable.tables.setIamPolicy",
    "bigtable.tables.update",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalOperations.get",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.projects.get",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.create",
    "dataproc.autoscalingPolicies.delete",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.update",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.list",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.list",
    "dataproc.jobs.update",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.list",
    "dataproc.workflowTemplates.create",
    "dataproc.workflowTemplates.delete",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.instantiate",
    "dataproc.workflowTemplates.instantiateInline",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.update",
    "firebase.projects.get",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.list",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.list",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.list",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.getDdl",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instances.get",
    "spanner.instances.list",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/cloudkms.signer",
   "role": {
    "description": "Enables Sign operations",
    "etag": "AA==",
    "name": "roles/cloudkms.signer",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Signer"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.useToSign",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/datafusion.viewer",
   "role": {
    "description": "Read-only access to Cloud Data Fusion Instances and related resources.",
    "etag": "AA==",
    "name": "roles/datafusion.viewer",
    "stage": "BETA",
    "title": "Cloud Data Fusion Viewer"
   },
   "included_permissions": [
    "datafusion.instances.get",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.runtime",
    "datafusion.locations.get",
    "datafusion.locations.list",
    "datafusion.operations.get",
    "datafusion.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudkms.signerVerifier",
   "role": {
    "description": "Enables Sign, Verify, and GetPublicKey operations",
    "etag": "AA==",
    "name": "roles/cloudkms.signerVerifier",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Signer/Verifier"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.useToSign",
    "cloudkms.cryptoKeyVersions.viewPublicKey",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/cloudkms.admin",
   "role": {
    "description": "Enables management of crypto resources.",
    "etag": "AA==",
    "name": "roles/cloudkms.admin",
    "stage": "GA",
    "title": "Cloud KMS Admin"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.create",
    "cloudkms.cryptoKeyVersions.destroy",
    "cloudkms.cryptoKeyVersions.get",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeyVersions.restore",
    "cloudkms.cryptoKeyVersions.update",
    "cloudkms.cryptoKeys.create",
    "cloudkms.cryptoKeys.get",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.cryptoKeys.setIamPolicy",
    "cloudkms.cryptoKeys.update",
    "cloudkms.importJobs.create",
    "cloudkms.importJobs.get",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.importJobs.setIamPolicy",
    "cloudkms.importJobs.useToImport",
    "cloudkms.keyRings.create",
    "cloudkms.keyRings.get",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudkms.keyRings.setIamPolicy",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/compute.osAdminLogin",
   "role": {
    "description": "Access to log in to a Compute Engine instance as an administrator user.",
    "etag": "AA==",
    "name": "roles/compute.osAdminLogin",
    "stage": "GA",
    "title": "Compute OS Admin Login"
   },
   "included_permissions": [
    "compute.instances.get",
    "compute.instances.list",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/datalabeling.serviceAgent",
   "role": {
    "description": "Gives DataLabeling service account read/write access to Cloud Storage, read/write BigQuery, update CMLE model versions, editor access to Annotation service and AutoML service.",
    "etag": "AA==",
    "name": "roles/datalabeling.serviceAgent",
    "stage": "GA",
    "title": "DataLabeling Service Agent"
   },
   "included_permissions": [
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.list",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.tables.create",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.create",
    "ml.models.delete",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.models.setIamPolicy",
    "ml.models.update",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.create",
    "ml.studies.delete",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.studies.setIamPolicy",
    "ml.trials.create",
    "ml.trials.delete",
    "ml.trials.get",
    "ml.trials.list",
    "ml.trials.update",
    "ml.versions.create",
    "ml.versions.delete",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "ml.versions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/apigee.readOnlyAdmin",
   "role": {
    "description": "Viewer of all apigee resources",
    "etag": "AA==",
    "name": "roles/apigee.readOnlyAdmin",
    "stage": "GA",
    "title": "Apigee Read-only Admin"
   },
   "included_permissions": [
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.appkeys.get",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.caches.list",
    "apigee.canaryevaluations.get",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.getIamPolicy",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.ingressconfigs.get",
    "apigee.instanceattachments.get",
    "apigee.instanceattachments.list",
    "apigee.instances.get",
    "apigee.instances.list",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/automl.serviceAgent",
   "role": {
    "description": "AutoML service agent can act as Cloud Storage admin and export BigQuery tables, which can be backed by Cloud Storage and Cloud Bigtable.",
    "etag": "AA==",
    "name": "roles/automl.serviceAgent",
    "stage": "GA",
    "title": "AutoML Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.tables.create",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigtable.tables.get",
    "bigtable.tables.list",
    "bigtable.tables.readRows",
    "serviceusage.services.use",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/bigquery.dataViewer",
   "role": {
    "description": "Access to view datasets and all of their contents",
    "etag": "AA==",
    "name": "roles/bigquery.dataViewer",
    "stage": "GA",
    "title": "BigQuery Data Viewer"
   },
   "included_permissions": [
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/automl.viewer",
   "role": {
    "description": "Viewer of all AutoML resources",
    "etag": "AA==",
    "name": "roles/automl.viewer",
    "stage": "BETA",
    "title": "AutoML Viewer"
   },
   "included_permissions": [
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.datasets.get",
    "automl.datasets.list",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.list",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.get",
    "automl.models.list",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/automlrecommendations.admin",
   "role": {
    "description": "Full access to all Recommendations AI resources.",
    "etag": "AA==",
    "name": "roles/automlrecommendations.admin",
    "stage": "BETA",
    "title": "Recommendations AI Admin"
   },
   "included_permissions": [
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.delete",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.catalogs.update",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.events.purge",
    "automlrecommendations.events.rejoin",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.delete",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.delete",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import",
    "retail.userEvents.purge",
    "retail.userEvents.rejoin",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigee.runtimeAgent",
   "role": {
    "description": "Curated set of permissions for a runtime agent to access Apigee Organization resources",
    "etag": "AA==",
    "name": "roles/apigee.runtimeAgent",
    "stage": "GA",
    "title": "Apigee Runtime Agent"
   },
   "included_permissions": [
    "apigee.canaryevaluations.create",
    "apigee.canaryevaluations.get",
    "apigee.ingressconfigs.get",
    "apigee.instances.reportStatus",
    "apigee.operations.get",
    "apigee.operations.list"
   ]
  },
  {
   "name": "roles/automlrecommendations.adminViewer",
   "role": {
    "description": "Viewer of all Recommendations AI resources.",
    "etag": "AA==",
    "name": "roles/automlrecommendations.adminViewer",
    "stage": "BETA",
    "title": "Recommendations AI Admin Viewer"
   },
   "included_permissions": [
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "retail.catalogs.list",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.export",
    "retail.products.get",
    "retail.products.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/compute.networkAdmin",
   "role": {
    "description": "Full control of Compute Engine networking resources.",
    "etag": "AA==",
    "name": "roles/compute.networkAdmin",
    "stage": "GA",
    "title": "Compute Network Admin"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.use",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.operations.get",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/automlrecommendations.serviceAgent",
   "role": {
    "description": "Recommendations AI service uploads catalog feeds from Cloud Storage, reports results to the customer Cloud Storage bucket, writes logs to customer projects, and writes and reads Stackdriver metrics for customer projects.",
    "etag": "AA==",
    "name": "roles/automlrecommendations.serviceAgent",
    "stage": "GA",
    "title": "Recommendations AI Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.update",
    "bigquery.tables.create",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.list",
    "bigquery.tables.updateData",
    "cloudnotifications.activities.list",
    "logging.logEntries.create",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/compute.osLoginExternalUser",
   "role": {
    "description": "Access for an external user to set OS Login information associated with this organization. This role does not grant access to instances. External users must be granted one of the required OS Login IAM roles (https://cloud.google.com/compute/docs/instances/managing-instance-access#configure_users) in order to allow access to instances using SSH.",
    "etag": "AA==",
    "name": "roles/compute.osLoginExternalUser",
    "stage": "GA",
    "title": "Compute OS Login External User"
   },
   "included_permissions": [
    "compute.oslogin.updateExternalUser"
   ]
  },
  {
   "name": "roles/autoscaling.recommendationsReader",
   "role": {
    "description": "Access to read recommendations from autoscaling site",
    "etag": "AA==",
    "name": "roles/autoscaling.recommendationsReader",
    "stage": "BETA",
    "title": "Autoscaling Recommendations Reader"
   },
   "included_permissions": [
    "autoscaling.sites.readRecommendations"
   ]
  },
  {
   "name": "roles/compute.packetMirroringUser",
   "role": {
    "description": "Use Compute Engine packet mirrorings.",
    "etag": "AA==",
    "name": "roles/compute.packetMirroringUser",
    "stage": "GA",
    "title": "Compute packet mirroring user"
   },
   "included_permissions": [
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/automlrecommendations.viewer",
   "role": {
    "description": "Viewer of all Recommendations AI resources except automlrecommendations.apiKeys. To have all read access use Recommendations AI Admin Viewer role instead.",
    "etag": "AA==",
    "name": "roles/automlrecommendations.viewer",
    "stage": "BETA",
    "title": "Recommendations AI Viewer"
   },
   "included_permissions": [
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "retail.catalogs.list",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.export",
    "retail.products.get",
    "retail.products.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/apigeeconnect.Admin",
   "role": {
    "description": "Admin of Apigee Connect",
    "etag": "AA==",
    "name": "roles/apigeeconnect.Admin",
    "stage": "GA",
    "title": "Apigee Connect Admin"
   },
   "included_permissions": [
    "apigeeconnect.connections.list"
   ]
  },
  {
   "name": "roles/autoscaling.sitesAdmin",
   "role": {
    "description": "Full access to all autoscaling site features",
    "etag": "AA==",
    "name": "roles/autoscaling.sitesAdmin",
    "stage": "BETA",
    "title": "Autoscaling Site Admin"
   },
   "included_permissions": [
    "autoscaling.sites.getIamPolicy",
    "autoscaling.sites.readRecommendations",
    "autoscaling.sites.setIamPolicy",
    "autoscaling.sites.writeMetrics",
    "autoscaling.sites.writeState",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/autoscaling.stateWriter",
   "role": {
    "description": "Access to write state for autoscaling site",
    "etag": "AA==",
    "name": "roles/autoscaling.stateWriter",
    "stage": "BETA",
    "title": "Autoscaling State Writer"
   },
   "included_permissions": [
    "autoscaling.sites.writeState"
   ]
  },
  {
   "name": "roles/compute.publicIpAdmin",
   "role": {
    "description": "Full control of public IP address management for Compute Engine.",
    "etag": "AA==",
    "name": "roles/compute.publicIpAdmin",
    "stage": "BETA",
    "title": "Compute Public IP Admin"
   },
   "included_permissions": [
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalPublicDelegatedPrefixes.create",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.globalPublicDelegatedPrefixes.use",
    "compute.publicAdvertisedPrefixes.create",
    "compute.publicAdvertisedPrefixes.delete",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicAdvertisedPrefixes.update",
    "compute.publicAdvertisedPrefixes.updatePolicy",
    "compute.publicAdvertisedPrefixes.use",
    "compute.publicDelegatedPrefixes.create",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.publicDelegatedPrefixes.use",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/axt.admin",
   "role": {
    "description": "Enable Access Transparency for Organization",
    "etag": "AA==",
    "name": "roles/axt.admin",
    "stage": "GA",
    "title": "Access Transparency Admin"
   },
   "included_permissions": [
    "axt.labels.get",
    "axt.labels.set",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/apigeeconnect.Agent",
   "role": {
    "description": "Ability to set up Apigee Connect agent between external clusters and Google.",
    "etag": "AA==",
    "name": "roles/apigeeconnect.Agent",
    "stage": "GA",
    "title": "Apigee Connect Agent"
   },
   "included_permissions": [
    "apigeeconnect.endpoints.connect"
   ]
  },
  {
   "name": "roles/compute.securityAdmin",
   "role": {
    "description": "Full control of Compute Engine security resources.",
    "etag": "AA==",
    "name": "roles/compute.securityAdmin",
    "stage": "GA",
    "title": "Compute Security Admin"
   },
   "included_permissions": [
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.updatePolicy",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/appengine.appAdmin",
   "role": {
    "description": "Full management of App Engine apps (but not storage).",
    "etag": "AA==",
    "name": "roles/appengine.appAdmin",
    "stage": "GA",
    "title": "App Engine Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.applications.update",
    "appengine.instances.delete",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.runtimes.actAsAdmin",
    "appengine.services.delete",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.services.update",
    "appengine.versions.create",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.list",
    "appengine.versions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/composer.user",
   "role": {
    "description": "Read and use access to Composer resources.",
    "etag": "AA==",
    "name": "roles/composer.user",
    "stage": "GA",
    "title": "Composer User"
   },
   "included_permissions": [
    "composer.environments.get",
    "composer.environments.list",
    "composer.imageversions.list",
    "composer.operations.get",
    "composer.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/automl.editor",
   "role": {
    "description": "Editor of all AutoML resources",
    "etag": "AA==",
    "name": "roles/automl.editor",
    "stage": "BETA",
    "title": "AutoML Editor"
   },
   "included_permissions": [
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.list",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/appengine.appCreator",
   "role": {
    "description": "Ability to create the App Engine resource for the project.",
    "etag": "AA==",
    "name": "roles/appengine.appCreator",
    "stage": "GA",
    "title": "App Engine Creator"
   },
   "included_permissions": [
    "appengine.applications.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.connectionAdmin",
   "role": {
    "etag": "AA==",
    "name": "roles/bigquery.connectionAdmin",
    "stage": "GA",
    "title": "BigQuery Connection Admin"
   },
   "included_permissions": [
    "bigquery.connections.create",
    "bigquery.connections.delete",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.setIamPolicy",
    "bigquery.connections.update",
    "bigquery.connections.use"
   ]
  },
  {
   "name": "roles/appengine.appViewer",
   "role": {
    "description": "Ability to view App Engine app status.",
    "etag": "AA==",
    "name": "roles/appengine.appViewer",
    "stage": "GA",
    "title": "App Engine Viewer"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.get",
    "appengine.versions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.connectionUser",
   "role": {
    "etag": "AA==",
    "name": "roles/bigquery.connectionUser",
    "stage": "GA",
    "title": "BigQuery Connection User"
   },
   "included_permissions": [
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.use"
   ]
  },
  {
   "name": "roles/appengine.codeViewer",
   "role": {
    "description": "Ability to view App Engine app status and deployed source code.",
    "etag": "AA==",
    "name": "roles/appengine.codeViewer",
    "stage": "GA",
    "title": "App Engine Code Viewer"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.get",
    "appengine.versions.getFileContents",
    "appengine.versions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.viewer",
   "role": {
    "description": "Read-only access to get and list information about all Compute Engine resources, including instances, disks, and firewalls. Allows getting and listing information about disks, images, and snapshots, but does not allow reading the data stored on them.",
    "etag": "AA==",
    "name": "roles/compute.viewer",
    "stage": "GA",
    "title": "Compute Viewer"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/bigquery.dataEditor",
   "role": {
    "description": "Access to edit all the contents of datasets",
    "etag": "AA==",
    "name": "roles/bigquery.dataEditor",
    "stage": "GA",
    "title": "BigQuery Data Editor"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.updateTag",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/appengine.deployer",
   "role": {
    "description": "Necessary permissions to deploy new code to App Engine, and remove old versions.",
    "etag": "AA==",
    "name": "roles/appengine.deployer",
    "stage": "GA",
    "title": "App Engine Deployer"
   },
   "included_permissions": [
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.create",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.xpnAdmin",
   "role": {
    "description": "Can administer shared VPC network (XPN).",
    "etag": "AA==",
    "name": "roles/compute.xpnAdmin",
    "stage": "GA",
    "title": "Compute Shared VPC Admin"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.organizations.administerXpn",
    "compute.organizations.disableXpnHost",
    "compute.organizations.disableXpnResource",
    "compute.organizations.enableXpnHost",
    "compute.organizations.enableXpnResource",
    "compute.projects.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.setIamPolicy",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/computescanning.serviceAgent",
   "role": {
    "description": "Gives Compute Scanning Service Account access to viewGoogle Compute Engine Images",
    "etag": "AA==",
    "name": "roles/computescanning.serviceAgent",
    "stage": "GA",
    "title": "Compute Scanning Service Agent"
   },
   "included_permissions": [
    "compute.images.get",
    "compute.images.list",
    "compute.images.useReadOnly",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.list",
    "compute.zones.get",
    "compute.zones.list",
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.list",
    "containeranalysis.notes.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/consumerprocurement.entitlementManager",
   "role": {
    "description": "Allows managing entitlements and enabling, disabling, and inspecting service states for a consumer project",
    "etag": "AA==",
    "name": "roles/consumerprocurement.entitlementManager",
    "stage": "BETA",
    "title": "Consumer Procurement Entitlement Manager"
   },
   "included_permissions": [
    "consumerprocurement.entitlements.get",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.create",
    "consumerprocurement.freeTrials.get",
    "consumerprocurement.freeTrials.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/bigquery.dataOwner",
   "role": {
    "description": "Full access to datasets and all of their contents",
    "etag": "AA==",
    "name": "roles/bigquery.dataOwner",
    "stage": "GA",
    "title": "BigQuery Data Owner"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setCategory",
    "bigquery.tables.setIamPolicy",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/apigee.environmentAdmin",
   "role": {
    "description": "Full read/write access to apigee environment resources, including deployments.",
    "etag": "AA==",
    "name": "roles/apigee.environmentAdmin",
    "stage": "GA",
    "title": "Apigee Environment Admin"
   },
   "included_permissions": [
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.deployments.create",
    "apigee.deployments.delete",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.deployments.update",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getIamPolicy",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.environments.setIamPolicy",
    "apigee.flowhooks.attachSharedFlow",
    "apigee.flowhooks.detachSharedFlow",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.ingressconfigs.get",
    "apigee.keystorealiases.create",
    "apigee.keystorealiases.delete",
    "apigee.keystorealiases.exportCertificate",
    "apigee.keystorealiases.generateCSR",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystorealiases.update",
    "apigee.keystores.create",
    "apigee.keystores.delete",
    "apigee.keystores.export",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.create",
    "apigee.keyvaluemaps.delete",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.maskconfigs.update",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.references.create",
    "apigee.references.delete",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.references.update",
    "apigee.resourcefiles.create",
    "apigee.resourcefiles.delete",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.resourcefiles.update",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.create",
    "apigee.targetservers.delete",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.targetservers.update",
    "apigee.tracesessions.create",
    "apigee.tracesessions.delete",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/consumerprocurement.entitlementViewer",
   "role": {
    "description": "Allows inspecting entitlements and service states for a consumer project",
    "etag": "AA==",
    "name": "roles/consumerprocurement.entitlementViewer",
    "stage": "BETA",
    "title": "Consumer Procurement Entitlement Viewer"
   },
   "included_permissions": [
    "consumerprocurement.entitlements.get",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.get",
    "consumerprocurement.freeTrials.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/consumerprocurement.orderAdmin",
   "role": {
    "description": "Allows managing purchases",
    "etag": "AA==",
    "name": "roles/consumerprocurement.orderAdmin",
    "stage": "BETA",
    "title": "Consumer Procurement Order Administrator"
   },
   "included_permissions": [
    "consumerprocurement.accounts.create",
    "consumerprocurement.accounts.delete",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.orders.cancel",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "consumerprocurement.orders.modify",
    "consumerprocurement.orders.place"
   ]
  },
  {
   "name": "roles/appengineflex.serviceAgent",
   "role": {
    "description": "Can edit and manage App Engine Flexible Environment apps. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/appengineflex.serviceAgent",
    "stage": "GA",
    "title": "App Engine flexible environment Service Agent"
   },
   "included_permissions": [
    "billing.accounts.get",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "compute.addresses.create",
    "compute.addresses.delete",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.update",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.disks.list",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.globalAddresses.create",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.get",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalOperations.get",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.update",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.get",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.update",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.getSerialPortOutput",
    "compute.instances.list",
    "compute.instances.reset",
    "compute.instances.setLabels",
    "compute.instances.setMetadata",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.stop",
    "compute.instances.use",
    "compute.machineTypes.get",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionOperations.get",
    "compute.regions.get",
    "compute.subnetworks.delete",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.get",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "logging.logEntries.create",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.update",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.setIamPolicy",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.attestorsEditor",
   "role": {
    "description": "Editor of Binary Authorization Attestors",
    "etag": "AA==",
    "name": "roles/binaryauthorization.attestorsEditor",
    "stage": "GA",
    "title": "Binary Authorization Attestor Editor"
   },
   "included_permissions": [
    "binaryauthorization.attestors.create",
    "binaryauthorization.attestors.delete",
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.update",
    "binaryauthorization.attestors.verifyImageAttested",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/artifactregistry.admin",
   "role": {
    "description": "Administrator access to create and manage repositories.",
    "etag": "AA==",
    "name": "roles/artifactregistry.admin",
    "stage": "BETA",
    "title": "Artifact Registry Administrator"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.delete",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.create",
    "artifactregistry.repositories.delete",
    "artifactregistry.repositories.deleteArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.setIamPolicy",
    "artifactregistry.repositories.update",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.delete",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.delete",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.attestorsVerifier",
   "role": {
    "description": "Caller of Binary Authorization Attestors VerifyImageAttested",
    "etag": "AA==",
    "name": "roles/binaryauthorization.attestorsVerifier",
    "stage": "GA",
    "title": "Binary Authorization Attestor Image Verifier"
   },
   "included_permissions": [
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.verifyImageAttested",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.readSessionUser",
   "role": {
    "description": "Access to create and use read sessions",
    "etag": "AA==",
    "name": "roles/bigquery.readSessionUser",
    "stage": "GA",
    "title": "BigQuery Read Session User"
   },
   "included_permissions": [
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.attestorsViewer",
   "role": {
    "description": "Viewer of Binary Authorization Attestors",
    "etag": "AA==",
    "name": "roles/binaryauthorization.attestorsViewer",
    "stage": "GA",
    "title": "Binary Authorization Attestor Viewer"
   },
   "included_permissions": [
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/contactcenterinsights.serviceAgent",
   "role": {
    "description": "Gives Contact Center AI Service Account access to get Google Cloud Storage files and to export data to BigQuery",
    "etag": "AA==",
    "name": "roles/contactcenterinsights.serviceAgent",
    "stage": "GA",
    "title": "Contact Center AI Insights Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.tables.create",
    "bigquery.tables.get",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "dialogflow.conversationDatasets.create",
    "dialogflow.conversationDatasets.delete",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.import",
    "dialogflow.conversationDatasets.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/container.admin",
   "role": {
    "description": "Full management of Kubernetes Clusters and their Kubernetes API objects.",
    "etag": "AA==",
    "name": "roles/container.admin",
    "stage": "GA",
    "title": "Kubernetes Engine Admin"
   },
   "included_permissions": [
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.approve",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.hostServiceAgent.use",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.bind",
    "container.roles.create",
    "container.roles.delete",
    "container.roles.escalate",
    "container.roles.get",
    "container.roles.list",
    "container.roles.update",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.continuousValidationConfigAdmin",
   "role": {
    "description": "Administrator of Binary Authorization ContinuousValidationConfig",
    "etag": "AA==",
    "name": "roles/binaryauthorization.continuousValidationConfigAdmin",
    "stage": "BETA",
    "title": "Binary Authorization ContinuousValidationConfig Administrator"
   },
   "included_permissions": [
    "binaryauthorization.continuousValidationConfig.get",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.continuousValidationConfig.setIamPolicy",
    "binaryauthorization.continuousValidationConfig.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/artifactregistry.repoAdmin",
   "role": {
    "description": "Access to manage artifacts in repositories.",
    "etag": "AA==",
    "name": "roles/artifactregistry.repoAdmin",
    "stage": "BETA",
    "title": "Artifact Registry Repository Administrator"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.delete",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.deleteArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.delete",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.delete",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list"
   ]
  },
  {
   "name": "roles/artifactregistry.serviceAgent",
   "role": {
    "description": "Gives the Artifact Registry service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/artifactregistry.serviceAgent",
    "stage": "GA",
    "title": "Artifact Registry Service Agent"
   },
   "included_permissions": [
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/container.clusterViewer",
   "role": {
    "description": "Get and list access to GKE Clusters.",
    "etag": "AA==",
    "name": "roles/container.clusterViewer",
    "stage": "GA",
    "title": "Kubernetes Engine Cluster Viewer"
   },
   "included_permissions": [
    "container.clusters.get",
    "container.clusters.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/container.developer",
   "role": {
    "description": "Full access to Kubernetes API objects inside Kubernetes Clusters.",
    "etag": "AA==",
    "name": "roles/container.developer",
    "stage": "GA",
    "title": "Kubernetes Engine Developer"
   },
   "included_permissions": [
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.resourceEditor",
   "role": {
    "description": "Manage all BigQuery resources, but cannot make purchasing decisions.",
    "etag": "AA==",
    "name": "roles/bigquery.resourceEditor",
    "stage": "GA",
    "title": "BigQuery Resource Editor"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.resourceViewer",
   "role": {
    "description": "View all BigQuery resources but cannot make changes or purchasing decisions.",
    "etag": "AA==",
    "name": "roles/bigquery.resourceViewer",
    "stage": "GA",
    "title": "BigQuery Resource Viewer"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.policyAdmin",
   "role": {
    "description": "Administrator of Binary Authorization Policy",
    "etag": "AA==",
    "name": "roles/binaryauthorization.policyAdmin",
    "stage": "GA",
    "title": "Binary Authorization Policy Administrator"
   },
   "included_permissions": [
    "binaryauthorization.policy.get",
    "binaryauthorization.policy.getIamPolicy",
    "binaryauthorization.policy.setIamPolicy",
    "binaryauthorization.policy.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquery.user",
   "role": {
    "description": "When applied to a project, access to run queries, create datasets, read dataset metadata, and list tables. When applied to a dataset, access to read dataset metadata and list tables within the dataset.",
    "etag": "AA==",
    "name": "roles/bigquery.user",
    "stage": "GA",
    "title": "BigQuery User"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.config.get",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.jobs.create",
    "bigquery.jobs.list",
    "bigquery.models.list",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.routines.list",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.tables.list",
    "bigquery.transfers.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.policyViewer",
   "role": {
    "description": "Viewer of Binary Authorization Policy",
    "etag": "AA==",
    "name": "roles/binaryauthorization.policyViewer",
    "stage": "GA",
    "title": "Binary Authorization Policy Viewer"
   },
   "included_permissions": [
    "binaryauthorization.policy.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/binaryauthorization.serviceAgent",
   "role": {
    "description": "Can read Notes and Occurrences from the Container Analysis Service to find and verify signatures.",
    "etag": "AA==",
    "name": "roles/binaryauthorization.serviceAgent",
    "stage": "GA",
    "title": "Binary Authorization Service Agent"
   },
   "included_permissions": [
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.verifyImageAttested",
    "containeranalysis.notes.get",
    "containeranalysis.notes.list",
    "containeranalysis.notes.listOccurrences",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/container.serviceAgent",
   "role": {
    "description": "Gives Kubernetes Engine account access to manage cluster resources. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/container.serviceAgent",
    "stage": "GA",
    "title": "Kubernetes Engine Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.tables.create",
    "bigquery.tables.get",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.get",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.approve",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.hostServiceAgent.use",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.bind",
    "container.roles.create",
    "container.roles.delete",
    "container.roles.escalate",
    "container.roles.get",
    "container.roles.list",
    "container.roles.update",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.networks.targetWithPeeringZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.list",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "pubsub.topics.create",
    "pubsub.topics.get",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.operations.get",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.create",
    "tpu.nodes.delete",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.operations.get",
    "tpu.operations.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/containeranalysis.ServiceAgent",
   "role": {
    "description": "Gives Container Analysis API the access it needs to function",
    "etag": "AA==",
    "name": "roles/containeranalysis.ServiceAgent",
    "stage": "GA",
    "title": "Container Analysis Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.list",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/browser",
   "role": {
    "description": "Access to browse GCP resources.",
    "etag": "AA==",
    "name": "roles/browser",
    "stage": "GA",
    "title": "Browser"
   },
   "included_permissions": [
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/container.viewer",
   "role": {
    "description": "Read-only access to Kubernetes Engine resources.",
    "etag": "AA==",
    "name": "roles/container.viewer",
    "stage": "GA",
    "title": "Kubernetes Engine Viewer"
   },
   "included_permissions": [
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.bindings.get",
    "container.bindings.list",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.deployments.get",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.events.get",
    "container.events.list",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.leases.get",
    "container.leases.list",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.petSets.get",
    "container.petSets.list",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.pods.get",
    "container.pods.getStatus",
    "container.pods.list",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.statefulSets.get",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageStates.get",
    "container.storageStates.list",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.tokenReviews.create",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigtable.admin",
   "role": {
    "description": "Full access to all Bigtable resources and ability to assign Bigtable IAM roles.",
    "etag": "AA==",
    "name": "roles/bigtable.admin",
    "stage": "GA",
    "title": "Bigtable Administrator"
   },
   "included_permissions": [
    "bigtable.appProfiles.create",
    "bigtable.appProfiles.delete",
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.appProfiles.update",
    "bigtable.backups.create",
    "bigtable.backups.delete",
    "bigtable.backups.get",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.backups.restore",
    "bigtable.backups.setIamPolicy",
    "bigtable.backups.update",
    "bigtable.clusters.create",
    "bigtable.clusters.delete",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.clusters.update",
    "bigtable.instances.create",
    "bigtable.instances.delete",
    "bigtable.instances.get",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.instances.setIamPolicy",
    "bigtable.instances.update",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.create",
    "bigtable.tables.delete",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.mutateRows",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "bigtable.tables.setIamPolicy",
    "bigtable.tables.update",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/containeranalysis.admin",
   "role": {
    "description": "Access to all Container Analysis resources.",
    "etag": "AA==",
    "name": "roles/containeranalysis.admin",
    "stage": "GA",
    "title": "Container Analysis Admin"
   },
   "included_permissions": [
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.notes.setIamPolicy",
    "containeranalysis.notes.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.setIamPolicy",
    "containeranalysis.occurrences.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/bigquerydatatransfer.serviceAgent",
   "role": {
    "description": "Gives BigQuery Data Transfer Service access to start bigquery jobs in consumer project. ",
    "etag": "AA==",
    "name": "roles/bigquerydatatransfer.serviceAgent",
    "stage": "GA",
    "title": "BigQuery Data Transfer Service Agent"
   },
   "included_permissions": [
    "bigquery.jobs.create",
    "iam.serviceAccounts.getAccessToken",
    "logging.logEntries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/containeranalysis.notes.attacher",
   "role": {
    "description": "Can attach Container Analysis Occurrences to Notes.",
    "etag": "AA==",
    "name": "roles/containeranalysis.notes.attacher",
    "stage": "GA",
    "title": "Container Analysis Notes Attacher"
   },
   "included_permissions": [
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.get"
   ]
  },
  {
   "name": "roles/chat.reader",
   "role": {
    "description": "Can view bot configurations",
    "etag": "AA==",
    "name": "roles/chat.reader",
    "stage": "GA",
    "title": "Chat Bots Viewer"
   },
   "included_permissions": [
    "chat.bots.get"
   ]
  },
  {
   "name": "roles/clouddebugger.agent",
   "role": {
    "description": "Cloud Debugger agents are allowed to register and provide debug snapshot data.",
    "etag": "AA==",
    "name": "roles/clouddebugger.agent",
    "stage": "BETA",
    "title": "Cloud Debugger Agent"
   },
   "included_permissions": [
    "clouddebugger.breakpoints.list",
    "clouddebugger.breakpoints.listActive",
    "clouddebugger.breakpoints.update",
    "clouddebugger.debuggees.create"
   ]
  },
  {
   "name": "roles/bigtable.user",
   "role": {
    "description": "Read and write access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
    "etag": "AA==",
    "name": "roles/bigtable.user",
    "stage": "GA",
    "title": "Bigtable User"
   },
   "included_permissions": [
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.backups.get",
    "bigtable.backups.list",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.instances.get",
    "bigtable.instances.list",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.list",
    "bigtable.tables.mutateRows",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/containeranalysis.notes.occurrences.viewer",
   "role": {
    "description": "Can view all Container Analysis Occurrences attached to a Note.",
    "etag": "AA==",
    "name": "roles/containeranalysis.notes.occurrences.viewer",
    "stage": "GA",
    "title": "Container Analysis Occurrences for Notes Viewer"
   },
   "included_permissions": [
    "containeranalysis.notes.get",
    "containeranalysis.notes.listOccurrences"
   ]
  },
  {
   "name": "roles/clouddebugger.user",
   "role": {
    "description": "User Access to Cloud Debugger.  Can create, delete and view snapshots and logpoints.",
    "etag": "AA==",
    "name": "roles/clouddebugger.user",
    "stage": "BETA",
    "title": "Cloud Debugger User"
   },
   "included_permissions": [
    "clouddebugger.breakpoints.create",
    "clouddebugger.breakpoints.delete",
    "clouddebugger.breakpoints.get",
    "clouddebugger.breakpoints.list",
    "clouddebugger.debuggees.list"
   ]
  },
  {
   "name": "roles/bigtable.viewer",
   "role": {
    "description": "Read access to metadata for instances, clusters, and tables, including column families.",
    "etag": "AA==",
    "name": "roles/bigtable.viewer",
    "stage": "GA",
    "title": "Bigtable Viewer"
   },
   "included_permissions": [
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.backups.get",
    "bigtable.backups.list",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.instances.get",
    "bigtable.instances.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.list",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/billing.admin",
   "role": {
    "description": "Authorized to see and manage all aspects of billing accounts.",
    "etag": "AA==",
    "name": "roles/billing.admin",
    "stage": "GA",
    "title": "Billing Account Administrator"
   },
   "included_permissions": [
    "billing.accounts.close",
    "billing.accounts.get",
    "billing.accounts.getIamPolicy",
    "billing.accounts.getPaymentInfo",
    "billing.accounts.getSpendingInformation",
    "billing.accounts.getUsageExportSpec",
    "billing.accounts.list",
    "billing.accounts.move",
    "billing.accounts.redeemPromotion",
    "billing.accounts.removeFromOrganization",
    "billing.accounts.reopen",
    "billing.accounts.setIamPolicy",
    "billing.accounts.update",
    "billing.accounts.updatePaymentInfo",
    "billing.accounts.updateUsageExportSpec",
    "billing.budgets.create",
    "billing.budgets.delete",
    "billing.budgets.get",
    "billing.budgets.list",
    "billing.budgets.update",
    "billing.credits.list",
    "billing.resourceAssociations.create",
    "billing.resourceAssociations.delete",
    "billing.resourceAssociations.list",
    "billing.subscriptions.create",
    "billing.subscriptions.get",
    "billing.subscriptions.list",
    "billing.subscriptions.update",
    "cloudnotifications.activities.list",
    "consumerprocurement.accounts.create",
    "consumerprocurement.accounts.delete",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.orders.cancel",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "consumerprocurement.orders.modify",
    "consumerprocurement.orders.place",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "logging.logEntries.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.privateLogEntries.list",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.commitmentUtilizationInsights.update",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "recommender.usageCommitmentRecommendations.update",
    "resourcemanager.projects.createBillingAssignment",
    "resourcemanager.projects.deleteBillingAssignment"
   ]
  },
  {
   "name": "roles/containeranalysis.notes.viewer",
   "role": {
    "description": "Can view Container Analysis Notes.",
    "etag": "AA==",
    "name": "roles/containeranalysis.notes.viewer",
    "stage": "GA",
    "title": "Container Analysis Notes Viewer"
   },
   "included_permissions": [
    "containeranalysis.notes.get",
    "containeranalysis.notes.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/billing.costsManager",
   "role": {
    "description": "Can view and export cost information of billing accounts.",
    "etag": "AA==",
    "name": "roles/billing.costsManager",
    "stage": "GA",
    "title": "Billing Account Costs Manager"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.getIamPolicy",
    "billing.accounts.getSpendingInformation",
    "billing.accounts.getUsageExportSpec",
    "billing.accounts.list",
    "billing.accounts.updateUsageExportSpec",
    "billing.budgets.create",
    "billing.budgets.delete",
    "billing.budgets.get",
    "billing.budgets.list",
    "billing.budgets.update"
   ]
  },
  {
   "name": "roles/containeranalysis.occurrences.editor",
   "role": {
    "description": "Can edit Container Analysis Occurrences.",
    "etag": "AA==",
    "name": "roles/containeranalysis.occurrences.editor",
    "stage": "GA",
    "title": "Container Analysis Occurrences Editor"
   },
   "included_permissions": [
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/containeranalysis.occurrences.viewer",
   "role": {
    "description": "Can view Container Analysis Occurrences.",
    "etag": "AA==",
    "name": "roles/containeranalysis.occurrences.viewer",
    "stage": "GA",
    "title": "Container Analysis Occurrences Viewer"
   },
   "included_permissions": [
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/billing.creator",
   "role": {
    "description": "Creator of billing accounts.",
    "etag": "AA==",
    "name": "roles/billing.creator",
    "stage": "GA",
    "title": "Billing Account Creator"
   },
   "included_permissions": [
    "billing.accounts.create",
    "resourcemanager.organizations.get"
   ]
  },
  {
   "name": "roles/containerregistry.ServiceAgent",
   "role": {
    "description": "Access for Container Registry",
    "etag": "AA==",
    "name": "roles/containerregistry.ServiceAgent",
    "stage": "GA",
    "title": "Container Registry Service Agent"
   },
   "included_permissions": [
    "pubsub.topics.publish",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/billing.projectManager",
   "role": {
    "description": "Can assign a project's billing account or disable its billing.",
    "etag": "AA==",
    "name": "roles/billing.projectManager",
    "stage": "GA",
    "title": "Project Billing Manager"
   },
   "included_permissions": [
    "resourcemanager.projects.createBillingAssignment",
    "resourcemanager.projects.deleteBillingAssignment"
   ]
  },
  {
   "name": "roles/cloudasset.serviceAgent",
   "role": {
    "description": "Gives Cloud Asset service agent permissions to Cloud Storage and BigQuery for exporting Assets, and permission to publish to Cloud Pub/Sub topics for Asset Real Time Feed.",
    "etag": "AA==",
    "name": "roles/cloudasset.serviceAgent",
    "stage": "GA",
    "title": "Cloud Asset Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.get",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "pubsub.topics.publish",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get"
   ]
  },
  {
   "name": "roles/containerscanning.ServiceAgent",
   "role": {
    "description": "Gives Container Scanner the access it needs to analyzecontainers for vulnerabilities and create occurrences using the Container Analysis API",
    "etag": "AA==",
    "name": "roles/containerscanning.ServiceAgent",
    "stage": "GA",
    "title": "Container Scanner Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/cloudasset.viewer",
   "role": {
    "description": "Read only access to cloud assets metadata",
    "etag": "AA==",
    "name": "roles/cloudasset.viewer",
    "stage": "GA",
    "title": "Cloud Asset Viewer"
   },
   "included_permissions": [
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "recommender.locations.get",
    "recommender.locations.list"
   ]
  },
  {
   "name": "roles/cloudfunctions.developer",
   "role": {
    "description": "Read and write access to all functions-related resources.",
    "etag": "AA==",
    "name": "roles/cloudfunctions.developer",
    "stage": "GA",
    "title": "Cloud Functions Developer"
   },
   "included_permissions": [
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/containerthreatdetection.serviceAgent",
   "role": {
    "description": "Gives Container Threat Detection service account access to enable/disable Container Threat Detection and manage the Container Threat Detection Agent on Google Kubernetes Engine clusters.",
    "etag": "AA==",
    "name": "roles/containerthreatdetection.serviceAgent",
    "stage": "GA",
    "title": "Container Threat Detection Service Agent"
   },
   "included_permissions": [
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.bindings.get",
    "container.bindings.list",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.get",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.events.get",
    "container.events.list",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.leases.get",
    "container.leases.list",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.petSets.get",
    "container.petSets.list",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.update",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.list",
    "container.secrets.update",
    "container.serviceAccounts.create",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.statefulSets.get",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageStates.get",
    "container.storageStates.list",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.tokenReviews.create",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.admin",
   "role": {
    "description": "Full access to all DataCatalog resources",
    "etag": "AA==",
    "name": "roles/datacatalog.admin",
    "stage": "GA",
    "title": "Data Catalog Admin"
   },
   "included_permissions": [
    "bigquery.datasets.get",
    "bigquery.datasets.updateTag",
    "bigquery.models.getMetadata",
    "bigquery.models.updateTag",
    "bigquery.tables.get",
    "bigquery.tables.updateTag",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.categories.setIamPolicy",
    "datacatalog.entries.create",
    "datacatalog.entries.delete",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.setIamPolicy",
    "datacatalog.entries.update",
    "datacatalog.entries.updateTag",
    "datacatalog.entryGroups.create",
    "datacatalog.entryGroups.delete",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.entryGroups.setIamPolicy",
    "datacatalog.entryGroups.update",
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.delete",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.setIamPolicy",
    "datacatalog.tagTemplates.update",
    "datacatalog.tagTemplates.use",
    "datacatalog.taxonomies.create",
    "datacatalog.taxonomies.delete",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "datacatalog.taxonomies.setIamPolicy",
    "datacatalog.taxonomies.update",
    "pubsub.topics.get",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.categoryAdmin",
   "role": {
    "description": "Manage taxonomies",
    "etag": "AA==",
    "name": "roles/datacatalog.categoryAdmin",
    "stage": "BETA",
    "title": "Policy Tag Admin"
   },
   "included_permissions": [
    "datacatalog.categories.getIamPolicy",
    "datacatalog.categories.setIamPolicy",
    "datacatalog.taxonomies.create",
    "datacatalog.taxonomies.delete",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "datacatalog.taxonomies.setIamPolicy",
    "datacatalog.taxonomies.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudfunctions.invoker",
   "role": {
    "description": "Ability to invoke HTTP functions with restricted access.",
    "etag": "AA==",
    "name": "roles/cloudfunctions.invoker",
    "stage": "GA",
    "title": "Cloud Functions Invoker"
   },
   "included_permissions": [
    "cloudfunctions.functions.invoke"
   ]
  },
  {
   "name": "roles/datacatalog.categoryFineGrainedReader",
   "role": {
    "description": "Read access to sub-resources tagged by a policy tag, for example, BigQuery columns",
    "etag": "AA==",
    "name": "roles/datacatalog.categoryFineGrainedReader",
    "stage": "BETA",
    "title": "Fine-Grained Reader"
   },
   "included_permissions": [
    "datacatalog.categories.fineGrainedGet"
   ]
  },
  {
   "name": "roles/cloudfunctions.serviceAgent",
   "role": {
    "description": "Gives Cloud Functions service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/cloudfunctions.serviceAgent",
    "stage": "GA",
    "title": "Cloud Functions Service Agent"
   },
   "included_permissions": [
    "clientauthconfig.clients.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "cloudfunctions.functions.invoke",
    "compute.globalOperations.get",
    "compute.networks.access",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.update",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.signBlob",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.use",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.use"
   ]
  },
  {
   "name": "roles/datacatalog.entryGroupCreator",
   "role": {
    "description": "Can create new entryGroups",
    "etag": "AA==",
    "name": "roles/datacatalog.entryGroupCreator",
    "stage": "GA",
    "title": "DataCatalog EntryGroup Creator"
   },
   "included_permissions": [
    "datacatalog.entryGroups.create",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudfunctions.viewer",
   "role": {
    "description": "Read-only access to functions and locations.",
    "etag": "AA==",
    "name": "roles/cloudfunctions.viewer",
    "stage": "GA",
    "title": "Cloud Functions Viewer"
   },
   "included_permissions": [
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.list",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/datacatalog.entryGroupOwner",
   "role": {
    "description": "Full access to entryGroups",
    "etag": "AA==",
    "name": "roles/datacatalog.entryGroupOwner",
    "stage": "GA",
    "title": "DataCatalog entryGroup Owner"
   },
   "included_permissions": [
    "datacatalog.entries.create",
    "datacatalog.entries.delete",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.setIamPolicy",
    "datacatalog.entries.update",
    "datacatalog.entries.updateTag",
    "datacatalog.entryGroups.create",
    "datacatalog.entryGroups.delete",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.entryGroups.setIamPolicy",
    "datacatalog.entryGroups.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudbuild.builds.editor",
   "role": {
    "description": "Can create and cancel builds",
    "etag": "AA==",
    "name": "roles/cloudbuild.builds.editor",
    "stage": "GA",
    "title": "Cloud Build Editor"
   },
   "included_permissions": [
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.entryOwner",
   "role": {
    "description": "Full access to entries",
    "etag": "AA==",
    "name": "roles/datacatalog.entryOwner",
    "stage": "GA",
    "title": "DataCatalog entry Owner"
   },
   "included_permissions": [
    "datacatalog.entries.create",
    "datacatalog.entries.delete",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.setIamPolicy",
    "datacatalog.entries.update",
    "datacatalog.entries.updateTag",
    "datacatalog.entryGroups.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudbuild.builds.viewer",
   "role": {
    "description": "Can view builds",
    "etag": "AA==",
    "name": "roles/cloudbuild.builds.viewer",
    "stage": "GA",
    "title": "Cloud Build Viewer"
   },
   "included_permissions": [
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudbuild.serviceAgent",
   "role": {
    "description": "Gives Cloud Build service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/cloudbuild.serviceAgent",
    "stage": "GA",
    "title": "Cloud Build Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.networks.get",
    "compute.subnetworks.get",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "logging.logEntries.create",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.publish",
    "remotebuildexecution.blobs.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use",
    "source.repos.get",
    "source.repos.list",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/datacatalog.entryViewer",
   "role": {
    "description": "Read access to entries",
    "etag": "AA==",
    "name": "roles/datacatalog.entryViewer",
    "stage": "GA",
    "title": "DataCatalog Entry Viewer"
   },
   "included_permissions": [
    "datacatalog.entries.get",
    "datacatalog.entries.list",
    "datacatalog.entryGroups.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudconfig.admin",
   "role": {
    "description": "Full access to Firebase Remote Config resources.",
    "etag": "AA==",
    "name": "roles/cloudconfig.admin",
    "stage": "GA",
    "title": "Firebase Remote Config Admin"
   },
   "included_permissions": [
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.tagEditor",
   "role": {
    "description": "Gives permission to modify tags on a GCP assets (BigQuery, Pub/Sub etc).",
    "etag": "AA==",
    "name": "roles/datacatalog.tagEditor",
    "stage": "GA",
    "title": "Data Catalog Tag Editor"
   },
   "included_permissions": [
    "bigquery.datasets.updateTag",
    "bigquery.models.updateTag",
    "bigquery.tables.updateTag",
    "datacatalog.entries.updateTag",
    "pubsub.topics.updateTag"
   ]
  },
  {
   "name": "roles/cloudiot.deviceController",
   "role": {
    "description": "Access to update the device configuration, but not to create or delete devices.",
    "etag": "AA==",
    "name": "roles/cloudiot.deviceController",
    "stage": "GA",
    "title": "Cloud IoT Device Controller"
   },
   "included_permissions": [
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.get",
    "cloudiot.registries.list",
    "cloudiottoken.tokensettings.get"
   ]
  },
  {
   "name": "roles/datacatalog.tagTemplateCreator",
   "role": {
    "description": "Access to create new tag templates",
    "etag": "AA==",
    "name": "roles/datacatalog.tagTemplateCreator",
    "stage": "GA",
    "title": "Data Catalog TagTemplate Creator"
   },
   "included_permissions": [
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.get"
   ]
  },
  {
   "name": "roles/cloudiot.editor",
   "role": {
    "description": "Read-write access to all Cloud IoT resources.",
    "etag": "AA==",
    "name": "roles/cloudiot.editor",
    "stage": "GA",
    "title": "Cloud IoT Editor"
   },
   "included_permissions": [
    "cloudiot.devices.bindGateway",
    "cloudiot.devices.create",
    "cloudiot.devices.delete",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.unbindGateway",
    "cloudiot.devices.update",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.create",
    "cloudiot.registries.delete",
    "cloudiot.registries.get",
    "cloudiot.registries.list",
    "cloudiot.registries.update",
    "cloudiottoken.tokensettings.get",
    "cloudiottoken.tokensettings.update"
   ]
  },
  {
   "name": "roles/datacatalog.tagTemplateOwner",
   "role": {
    "description": "Full acess to tag templates",
    "etag": "AA==",
    "name": "roles/datacatalog.tagTemplateOwner",
    "stage": "GA",
    "title": "Data Catalog TagTemplate Owner"
   },
   "included_permissions": [
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.delete",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.setIamPolicy",
    "datacatalog.tagTemplates.update",
    "datacatalog.tagTemplates.use",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudjobdiscovery.jobsEditor",
   "role": {
    "description": "Write access to all job data in Cloud Talent Solution.",
    "etag": "AA==",
    "name": "roles/cloudjobdiscovery.jobsEditor",
    "stage": "GA",
    "title": "Job Editor"
   },
   "included_permissions": [
    "cloudjobdiscovery.companies.create",
    "cloudjobdiscovery.companies.delete",
    "cloudjobdiscovery.companies.get",
    "cloudjobdiscovery.companies.list",
    "cloudjobdiscovery.companies.update",
    "cloudjobdiscovery.events.create",
    "cloudjobdiscovery.jobs.create",
    "cloudjobdiscovery.jobs.delete",
    "cloudjobdiscovery.jobs.get",
    "cloudjobdiscovery.jobs.search",
    "cloudjobdiscovery.jobs.update",
    "cloudjobdiscovery.tenants.create",
    "cloudjobdiscovery.tenants.delete",
    "cloudjobdiscovery.tenants.get",
    "cloudjobdiscovery.tenants.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/compute.orgSecurityPolicyUser",
   "role": {
    "description": "View or use Compute Engine Security Policies to associate with the organization or folders.",
    "etag": "AA==",
    "name": "roles/compute.orgSecurityPolicyUser",
    "stage": "GA",
    "title": "Compute Organization Security Policy User"
   },
   "included_permissions": [
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.use",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.projects.get",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.use",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/datacatalog.tagTemplateUser",
   "role": {
    "description": "Access to use templates to tag resources",
    "etag": "AA==",
    "name": "roles/datacatalog.tagTemplateUser",
    "stage": "GA",
    "title": "Data Catalog TagTemplate User"
   },
   "included_permissions": [
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.use",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudjobdiscovery.jobsViewer",
   "role": {
    "description": "Read access to all job data in Cloud Talent Solution.",
    "etag": "AA==",
    "name": "roles/cloudjobdiscovery.jobsViewer",
    "stage": "GA",
    "title": "Job Viewer"
   },
   "included_permissions": [
    "cloudjobdiscovery.companies.get",
    "cloudjobdiscovery.companies.list",
    "cloudjobdiscovery.jobs.get",
    "cloudjobdiscovery.jobs.search",
    "cloudjobdiscovery.tenants.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.tagTemplateViewer",
   "role": {
    "description": "Read access to templates and tags created using the templates",
    "etag": "AA==",
    "name": "roles/datacatalog.tagTemplateViewer",
    "stage": "GA",
    "title": "Data Catalog TagTemplate Viewer"
   },
   "included_permissions": [
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datacatalog.viewer",
   "role": {
    "description": "Grants metadata read permissions to cataloged GCP assets (BigQuery, Pub/Sub etc)",
    "etag": "AA==",
    "name": "roles/datacatalog.viewer",
    "stage": "GA",
    "title": "Data Catalog Viewer"
   },
   "included_permissions": [
    "bigquery.datasets.get",
    "bigquery.models.getMetadata",
    "bigquery.tables.get",
    "datacatalog.entries.get",
    "datacatalog.entries.list",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.list",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.list",
    "pubsub.topics.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudkms.cryptoKeyEncrypter",
   "role": {
    "description": "Enables Encrypt operations",
    "etag": "AA==",
    "name": "roles/cloudkms.cryptoKeyEncrypter",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Encrypter"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.useToEncrypt",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/dataflow.admin",
   "role": {
    "description": "Minimal role for creating and managing dataflow jobs.",
    "etag": "AA==",
    "name": "roles/dataflow.admin",
    "stage": "GA",
    "title": "Dataflow Admin"
   },
   "included_permissions": [
    "compute.machineTypes.get",
    "dataflow.jobs.cancel",
    "dataflow.jobs.create",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.jobs.snapshot",
    "dataflow.jobs.updateContents",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.delete",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/dataflow.developer",
   "role": {
    "description": "Full operational access to Dataflow jobs.",
    "etag": "AA==",
    "name": "roles/dataflow.developer",
    "stage": "GA",
    "title": "Dataflow Developer"
   },
   "included_permissions": [
    "dataflow.jobs.cancel",
    "dataflow.jobs.create",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.jobs.snapshot",
    "dataflow.jobs.updateContents",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.delete",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudkms.importer",
   "role": {
    "description": "Enables ImportCryptoKeyVersion, CreateImportJob, ListImportJobs, and GetImportJob operations",
    "etag": "AA==",
    "name": "roles/cloudkms.importer",
    "stage": "GA",
    "title": "Cloud KMS Importer"
   },
   "included_permissions": [
    "cloudkms.importJobs.create",
    "cloudkms.importJobs.get",
    "cloudkms.importJobs.list",
    "cloudkms.importJobs.useToImport",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/dataflow.serviceAgent",
   "role": {
    "description": "Gives Cloud Dataflow service account access to managed resources. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/dataflow.serviceAgent",
    "stage": "GA",
    "title": "Cloud Dataflow Service Agent"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.bireservations.update",
    "bigquery.capacityCommitments.create",
    "bigquery.capacityCommitments.delete",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.capacityCommitments.update",
    "bigquery.config.get",
    "bigquery.config.update",
    "bigquery.connections.create",
    "bigquery.connections.delete",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.setIamPolicy",
    "bigquery.connections.update",
    "bigquery.connections.use",
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.jobs.update",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.savedqueries.create",
    "bigquery.savedqueries.delete",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.savedqueries.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setCategory",
    "bigquery.tables.setIamPolicy",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "bigquery.transfers.get",
    "bigquery.transfers.update",
    "clouddebugger.breakpoints.list",
    "clouddebugger.breakpoints.listActive",
    "clouddebugger.breakpoints.update",
    "clouddebugger.debuggees.create",
    "cloudnotifications.activities.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.use",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.list",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "firebase.projects.get",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.implicitDelegation",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "logging.buckets.create",
    "logging.buckets.delete",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.buckets.undelete",
    "logging.buckets.update",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.create",
    "logging.exclusions.delete",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.exclusions.update",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.sinks.update",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.update",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicenetworking.operations.get",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "stackdriver.projects.get",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/cloudiot.serviceAgent",
   "role": {
    "description": "Grants the ability to manage Cloud IoT Core resources, including publishing data to Cloud Pub/Sub and writing device activity logs to Stackdriver. Warning: If this role is removed from the Cloud IoT service account, Cloud IoT Core will be unable to publish data or write device activity logs.",
    "etag": "AA==",
    "name": "roles/cloudiot.serviceAgent",
    "stage": "GA",
    "title": "Cloud IoT Core Service Agent"
   },
   "included_permissions": [
    "logging.logEntries.create",
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/dataflow.viewer",
   "role": {
    "description": "Read only access to Dataflow jobs.",
    "etag": "AA==",
    "name": "roles/dataflow.viewer",
    "stage": "GA",
    "title": "Dataflow Viewer"
   },
   "included_permissions": [
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudiot.viewer",
   "role": {
    "description": "Read-only access to all Cloud IoT resources.",
    "etag": "AA==",
    "name": "roles/cloudiot.viewer",
    "stage": "GA",
    "title": "Cloud IoT Viewer"
   },
   "included_permissions": [
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.registries.get",
    "cloudiot.registries.list",
    "cloudiottoken.tokensettings.get"
   ]
  },
  {
   "name": "roles/dataflow.worker",
   "role": {
    "description": "Worker access to Dataflow.  Intended for service accounts.",
    "etag": "AA==",
    "name": "roles/dataflow.worker",
    "stage": "GA",
    "title": "Dataflow Worker"
   },
   "included_permissions": [
    "compute.instanceGroupManagers.update",
    "compute.instances.delete",
    "compute.instances.setDiskAutoDelete",
    "dataflow.jobs.get",
    "logging.logEntries.create",
    "storage.objects.create",
    "storage.objects.get"
   ]
  },
  {
   "name": "roles/datafusion.admin",
   "role": {
    "description": "Full access to Cloud Data Fusion Instances and related resources.",
    "etag": "AA==",
    "name": "roles/datafusion.admin",
    "stage": "BETA",
    "title": "Cloud Data Fusion Admin"
   },
   "included_permissions": [
    "datafusion.instances.create",
    "datafusion.instances.delete",
    "datafusion.instances.get",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.restart",
    "datafusion.instances.runtime",
    "datafusion.instances.setIamPolicy",
    "datafusion.instances.update",
    "datafusion.instances.upgrade",
    "datafusion.locations.get",
    "datafusion.locations.list",
    "datafusion.operations.cancel",
    "datafusion.operations.get",
    "datafusion.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/cloudkms.publicKeyViewer",
   "role": {
    "description": "Enables GetPublicKey operations",
    "etag": "AA==",
    "name": "roles/cloudkms.publicKeyViewer",
    "stage": "GA",
    "title": "Cloud KMS CryptoKey Public Key Viewer"
   },
   "included_permissions": [
    "cloudkms.cryptoKeyVersions.viewPublicKey",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/datafusion.runner",
   "role": {
    "description": "Access to Cloud Data Fusion runtime resources.",
    "etag": "AA==",
    "name": "roles/datafusion.runner",
    "stage": "BETA",
    "title": "Cloud Data Fusion Runner"
   },
   "included_permissions": [
    "datafusion.instances.runtime"
   ]
  },
  {
   "name": "roles/cloudkms.serviceAgent",
   "role": {
    "description": "Gives Cloud KMS service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/cloudkms.serviceAgent",
    "stage": "GA",
    "title": "Cloud KMS Service Agent"
   },
   "included_permissions": null
  },
  {
   "name": "roles/datalabeling.admin",
   "role": {
    "description": "Full access to all DataLabeling resources",
    "etag": "AA==",
    "name": "roles/datalabeling.admin",
    "stage": "BETA",
    "title": "DataLabeling Service Admin"
   },
   "included_permissions": [
    "datalabeling.annotateddatasets.delete",
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.label",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.create",
    "datalabeling.annotationspecsets.delete",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.create",
    "datalabeling.datasets.delete",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.import",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.create",
    "datalabeling.instructions.delete",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.cancel",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datalabeling.viewer",
   "role": {
    "description": "Viewer of all DataLabeling resources",
    "etag": "AA==",
    "name": "roles/datalabeling.viewer",
    "stage": "BETA",
    "title": "DataLabeling Service Viewer"
   },
   "included_permissions": [
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.get",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datastore.importExportAdmin",
   "role": {
    "description": "Full access to manage imports and exports.",
    "etag": "AA==",
    "name": "roles/datastore.importExportAdmin",
    "stage": "GA",
    "title": "Cloud Datastore Import Export Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "datastore.databases.export",
    "datastore.databases.import",
    "datastore.operations.cancel",
    "datastore.operations.get",
    "datastore.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datastore.indexAdmin",
   "role": {
    "description": "Full access to manage index definitions.",
    "etag": "AA==",
    "name": "roles/datastore.indexAdmin",
    "stage": "GA",
    "title": "Cloud Datastore Index Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datalabeling.editor",
   "role": {
    "description": "Editor of all DataLabeling resources",
    "etag": "AA==",
    "name": "roles/datalabeling.editor",
    "stage": "BETA",
    "title": "DataLabeling Service Editor"
   },
   "included_permissions": [
    "datalabeling.annotateddatasets.delete",
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.label",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.create",
    "datalabeling.annotationspecsets.delete",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.create",
    "datalabeling.datasets.delete",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.import",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.create",
    "datalabeling.instructions.delete",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.cancel",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dellemccloudonefs.user",
   "role": {
    "description": "This role is managed by Dell EMC, not Google.",
    "etag": "AA==",
    "name": "roles/dellemccloudonefs.user",
    "stage": "BETA",
    "title": "Dell EMC Cloud OneFS User"
   },
   "included_permissions": [
    "cloudonefs.isiloncloud.com/clusters.create",
    "cloudonefs.isiloncloud.com/clusters.delete",
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/clusters.update",
    "cloudonefs.isiloncloud.com/fileshares.create",
    "cloudonefs.isiloncloud.com/fileshares.delete",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudonefs.isiloncloud.com/fileshares.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dellemccloudonefs.viewer",
   "role": {
    "description": "This role is managed by Dell EMC, not Google.",
    "etag": "AA==",
    "name": "roles/dellemccloudonefs.viewer",
    "stage": "BETA",
    "title": "Dell EMC Cloud OneFS Viewer"
   },
   "included_permissions": [
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/datastore.owner",
   "role": {
    "description": "Full access to Cloud Datastore.",
    "etag": "AA==",
    "name": "roles/datastore.owner",
    "stage": "GA",
    "title": "Cloud Datastore Owner"
   },
   "included_permissions": [
    "appengine.applications.get",
    "datastore.databases.create",
    "datastore.databases.delete",
    "datastore.databases.export",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.import",
    "datastore.databases.list",
    "datastore.databases.setIamPolicy",
    "datastore.databases.update",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "datastore.locations.get",
    "datastore.locations.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.namespaces.setIamPolicy",
    "datastore.operations.cancel",
    "datastore.operations.delete",
    "datastore.operations.get",
    "datastore.operations.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/deploymentmanager.editor",
   "role": {
    "description": "Read and Write access to all Deployment Manager resources.",
    "etag": "AA==",
    "name": "roles/deploymentmanager.editor",
    "stage": "GA",
    "title": "Deployment Manager Editor"
   },
   "included_permissions": [
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.deployments.cancelPreview",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.stop",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/datastore.user",
   "role": {
    "description": "Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.",
    "etag": "AA==",
    "name": "roles/datastore.user",
    "stage": "GA",
    "title": "Cloud Datastore User"
   },
   "included_permissions": [
    "appengine.applications.get",
    "datastore.databases.get",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/deploymentmanager.typeViewer",
   "role": {
    "description": "Read-only access to all Type Registry resources.",
    "etag": "AA==",
    "name": "roles/deploymentmanager.typeViewer",
    "stage": "GA",
    "title": "Deployment Manager Type Viewer"
   },
   "included_permissions": [
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get"
   ]
  },
  {
   "name": "roles/deploymentmanager.typeEditor",
   "role": {
    "description": "Read and Write access to all Type Registry resources.",
    "etag": "AA==",
    "name": "roles/deploymentmanager.typeEditor",
    "stage": "GA",
    "title": "Deployment Manager Type Editor"
   },
   "included_permissions": [
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.operations.get",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get"
   ]
  },
  {
   "name": "roles/datastore.viewer",
   "role": {
    "description": "Read access to all Cloud Datastore resources.",
    "etag": "AA==",
    "name": "roles/datastore.viewer",
    "stage": "GA",
    "title": "Cloud Datastore Viewer"
   },
   "included_permissions": [
    "appengine.applications.get",
    "datastore.databases.get",
    "datastore.databases.list",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataproc.hubAgent",
   "role": {
    "description": "Allows management of Dataproc resources. Intended for service accounts running Dataproc Hub instances.",
    "etag": "AA==",
    "name": "roles/dataproc.hubAgent",
    "stage": "GA",
    "title": "Dataproc Hub Agent"
   },
   "included_permissions": [
    "compute.instances.get",
    "compute.instances.setMetadata",
    "compute.instances.setTags",
    "compute.zoneOperations.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.list",
    "dataproc.clusters.update",
    "dataproc.operations.cancel",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.get",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/deploymentmanager.viewer",
   "role": {
    "description": "Read-only access to all Deployment Manager resources.",
    "etag": "AA==",
    "name": "roles/deploymentmanager.viewer",
    "stage": "GA",
    "title": "Deployment Manager Viewer"
   },
   "included_permissions": [
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/dataproc.worker",
   "role": {
    "description": "Worker access to Dataproc. Intended for service accounts.",
    "etag": "AA==",
    "name": "roles/dataproc.worker",
    "stage": "GA",
    "title": "Dataproc Worker"
   },
   "included_permissions": [
    "dataproc.agents.create",
    "dataproc.agents.delete",
    "dataproc.agents.get",
    "dataproc.agents.list",
    "dataproc.agents.update",
    "dataproc.tasks.lease",
    "dataproc.tasks.listInvalidatedLeases",
    "dataproc.tasks.reportStatus",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/datastudio.serviceAgent",
   "role": {
    "description": "Grants Data Studio Service Account access to manage resources.",
    "etag": "AA==",
    "name": "roles/datastudio.serviceAgent",
    "stage": "GA",
    "title": "Data Studio Service Agent"
   },
   "included_permissions": [
    "bigquery.jobs.create"
   ]
  },
  {
   "name": "roles/datamigration.admin",
   "role": {
    "description": "Full access to all resources of Database Migration.",
    "etag": "AA==",
    "name": "roles/datamigration.admin",
    "stage": "BETA",
    "title": "Database Migration Admin"
   },
   "included_permissions": [
    "datamigration.connectionprofiles.create",
    "datamigration.connectionprofiles.delete",
    "datamigration.connectionprofiles.get",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.connectionprofiles.setIamPolicy",
    "datamigration.connectionprofiles.update",
    "datamigration.locations.get",
    "datamigration.locations.list",
    "datamigration.migrationjobs.create",
    "datamigration.migrationjobs.delete",
    "datamigration.migrationjobs.generateSshScript",
    "datamigration.migrationjobs.get",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.migrationjobs.promote",
    "datamigration.migrationjobs.restart",
    "datamigration.migrationjobs.resume",
    "datamigration.migrationjobs.setIamPolicy",
    "datamigration.migrationjobs.start",
    "datamigration.migrationjobs.stop",
    "datamigration.migrationjobs.update",
    "datamigration.migrationjobs.verify",
    "datamigration.operations.cancel",
    "datamigration.operations.delete",
    "datamigration.operations.get",
    "datamigration.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataprep.serviceAgent",
   "role": {
    "description": "Dataprep service identity. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/dataprep.serviceAgent",
    "stage": "GA",
    "title": "Dataprep Service Agent"
   },
   "included_permissions": [
    "bigquery.bireservations.get",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.config.get",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.list",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "bigquery.transfers.get",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataflow.jobs.cancel",
    "dataflow.jobs.create",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.jobs.snapshot",
    "dataflow.jobs.updateContents",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.delete",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/dellemccloudonefs.admin",
   "role": {
    "description": "This role is managed by Dell EMC, not Google.",
    "etag": "AA==",
    "name": "roles/dellemccloudonefs.admin",
    "stage": "BETA",
    "title": "Dell EMC Cloud OneFS Admin"
   },
   "included_permissions": [
    "cloudonefs.isiloncloud.com/clusters.create",
    "cloudonefs.isiloncloud.com/clusters.delete",
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/clusters.update",
    "cloudonefs.isiloncloud.com/clusters.updateAdvancedSettings",
    "cloudonefs.isiloncloud.com/fileshares.create",
    "cloudonefs.isiloncloud.com/fileshares.delete",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudonefs.isiloncloud.com/fileshares.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataproc.serviceAgent",
   "role": {
    "description": "Gives Cloud Dataproc service account access to Compute, and Storage resources and Service Accounts.",
    "etag": "AA==",
    "name": "roles/dataproc.serviceAgent",
    "stage": "GA",
    "title": "Dataproc Service Agent"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.list",
    "compute.disks.resize",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.list",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.licenses.get",
    "compute.licenses.list",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.get",
    "compute.nodeTypes.get",
    "compute.projects.get",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.clusters.setIamPolicy",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.jobs.setIamPolicy",
    "dataproc.jobs.update",
    "firebase.projects.get",
    "iam.serviceAccounts.actAs",
    "metastore.services.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/dataproc.admin",
   "role": {
    "description": "Full control of Dataproc resources.",
    "etag": "AA==",
    "name": "roles/dataproc.admin",
    "stage": "GA",
    "title": "Dataproc Administrator"
   },
   "included_permissions": [
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networks.get",
    "compute.networks.list",
    "compute.projects.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.create",
    "dataproc.autoscalingPolicies.delete",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.setIamPolicy",
    "dataproc.autoscalingPolicies.update",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.clusters.setIamPolicy",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.jobs.setIamPolicy",
    "dataproc.jobs.update",
    "dataproc.operations.cancel",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.operations.setIamPolicy",
    "dataproc.workflowTemplates.create",
    "dataproc.workflowTemplates.delete",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.instantiate",
    "dataproc.workflowTemplates.instantiateInline",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.setIamPolicy",
    "dataproc.workflowTemplates.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataprocessing.admin",
   "role": {
    "description": "Data processing controls admin who can fully manage data processing controls settings and view all datasource data.",
    "etag": "AA==",
    "name": "roles/dataprocessing.admin",
    "stage": "GA",
    "title": "Data Processing Controls Resource Admin"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.list",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.datasources.update",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.featurecontrols.update",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "dataprocessing.groupcontrols.update"
   ]
  },
  {
   "name": "roles/dataproc.viewer",
   "role": {
    "description": "Read-only access to Dataproc resources.",
    "etag": "AA==",
    "name": "roles/dataproc.viewer",
    "stage": "GA",
    "title": "Dataproc Viewer"
   },
   "included_permissions": [
    "compute.machineTypes.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.list",
    "dataproc.clusters.get",
    "dataproc.clusters.list",
    "dataproc.jobs.get",
    "dataproc.jobs.list",
    "dataproc.operations.get",
    "dataproc.operations.list",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataproc.editor",
   "role": {
    "description": "Full control of Dataproc resources. Allows viewing all networks.",
    "etag": "AA==",
    "name": "roles/dataproc.editor",
    "stage": "GA",
    "title": "Dataproc Editor"
   },
   "included_permissions": [
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networks.get",
    "compute.networks.list",
    "compute.projects.get",
    "compute.regions.get",
    "compute.regions.list",
    "compute.zones.get",
    "compute.zones.list",
    "dataproc.autoscalingPolicies.create",
    "dataproc.autoscalingPolicies.delete",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.update",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.list",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.list",
    "dataproc.jobs.update",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.list",
    "dataproc.workflowTemplates.create",
    "dataproc.workflowTemplates.delete",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.instantiate",
    "dataproc.workflowTemplates.instantiateInline",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dataprep.projects.user",
   "role": {
    "description": "Use of Dataprep.",
    "etag": "AA==",
    "name": "roles/dataprep.projects.user",
    "stage": "BETA",
    "title": "Dataprep User"
   },
   "included_permissions": [
    "dataprep.projects.use",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/dialogflow.consoleSmartMessagingAllowlistEditor",
   "role": {
    "description": "Can edit allowlist for smart messaging associated with conversation model in the agent assist console",
    "etag": "AA==",
    "name": "roles/dialogflow.consoleSmartMessagingAllowlistEditor",
    "title": "Dialogflow Console Smart Messaging Allowlist Editor"
   },
   "included_permissions": [
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.list",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.operations.get",
    "dialogflow.smartMessagingEntries.create",
    "dialogflow.smartMessagingEntries.delete",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dialogflow.client",
   "role": {
    "description": "Can call all methods on sessions and conversations resources as well as their descendants.",
    "etag": "AA==",
    "name": "roles/dialogflow.client",
    "stage": "GA",
    "title": "Dialogflow API Client"
   },
   "included_permissions": [
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.messages.list",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent"
   ]
  },
  {
   "name": "roles/dialogflow.consoleAgentEditor",
   "role": {
    "description": "Can edit agent in Dialogflow Console",
    "etag": "AA==",
    "name": "roles/dialogflow.consoleAgentEditor",
    "stage": "GA",
    "title": "Dialogflow Console Agent Editor"
   },
   "included_permissions": [
    "actions.agentVersions.create",
    "dialogflow.agents.create",
    "dialogflow.agents.delete",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.import",
    "dialogflow.agents.list",
    "dialogflow.agents.restore",
    "dialogflow.agents.search",
    "dialogflow.agents.train",
    "dialogflow.agents.update",
    "dialogflow.agents.validate",
    "dialogflow.answerrecords.delete",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.answerrecords.update",
    "dialogflow.callMatchers.create",
    "dialogflow.callMatchers.delete",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversationDatasets.create",
    "dialogflow.conversationDatasets.delete",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.import",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.create",
    "dialogflow.conversationModels.delete",
    "dialogflow.conversationModels.deploy",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationModels.undeploy",
    "dialogflow.conversationProfiles.create",
    "dialogflow.conversationProfiles.delete",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversationProfiles.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.create",
    "dialogflow.documents.delete",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.create",
    "dialogflow.entityTypes.createEntity",
    "dialogflow.entityTypes.delete",
    "dialogflow.entityTypes.deleteEntity",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.entityTypes.update",
    "dialogflow.entityTypes.updateEntity",
    "dialogflow.environments.create",
    "dialogflow.environments.delete",
    "dialogflow.environments.get",
    "dialogflow.environments.getHistory",
    "dialogflow.environments.list",
    "dialogflow.environments.lookupHistory",
    "dialogflow.environments.update",
    "dialogflow.flows.create",
    "dialogflow.flows.delete",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.flows.train",
    "dialogflow.flows.update",
    "dialogflow.flows.validate",
    "dialogflow.fulfillments.get",
    "dialogflow.fulfillments.update",
    "dialogflow.intents.create",
    "dialogflow.intents.delete",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.intents.update",
    "dialogflow.knowledgeBases.create",
    "dialogflow.knowledgeBases.delete",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.create",
    "dialogflow.pages.delete",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.pages.update",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.phoneNumberOrders.cancel",
    "dialogflow.phoneNumberOrders.create",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumberOrders.update",
    "dialogflow.phoneNumbers.delete",
    "dialogflow.phoneNumbers.list",
    "dialogflow.phoneNumbers.undelete",
    "dialogflow.phoneNumbers.update",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.create",
    "dialogflow.smartMessagingEntries.delete",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.create",
    "dialogflow.transitionRouteGroups.delete",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.transitionRouteGroups.update",
    "dialogflow.versions.create",
    "dialogflow.versions.delete",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.versions.load",
    "dialogflow.versions.update",
    "dialogflow.webhooks.create",
    "dialogflow.webhooks.delete",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dialogflow.webhooks.update",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/endpoints.portalAdmin",
   "role": {
    "description": "Full access to Endpoints Portal resources",
    "etag": "AA==",
    "name": "roles/endpoints.portalAdmin",
    "stage": "BETA",
    "title": "Endpoints Portal Admin"
   },
   "included_permissions": [
    "endpoints.portals.attachCustomDomain",
    "endpoints.portals.detachCustomDomain",
    "endpoints.portals.listCustomDomains",
    "endpoints.portals.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicemanagement.services.get"
   ]
  },
  {
   "name": "roles/dialogflow.consoleSimulatorUser",
   "role": {
    "description": "Can perform query of dialogflow suggestions in the simulator in web console.",
    "etag": "AA==",
    "name": "roles/dialogflow.consoleSimulatorUser",
    "title": "Dialogflow Console Simulator User"
   },
   "included_permissions": [
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.sessions.detectIntent",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dlp.storedInfoTypesEditor",
   "role": {
    "description": "Edit DLP stored info types.",
    "etag": "AA==",
    "name": "roles/dlp.storedInfoTypesEditor",
    "stage": "GA",
    "title": "DLP Stored InfoTypes Editor"
   },
   "included_permissions": [
    "dlp.storedInfoTypes.create",
    "dlp.storedInfoTypes.delete",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list",
    "dlp.storedInfoTypes.update"
   ]
  },
  {
   "name": "roles/dialogflow.conversationManager",
   "role": {
    "description": "Can manage all the resources related to Dialogflow Conversations.",
    "etag": "AA==",
    "name": "roles/dialogflow.conversationManager",
    "stage": "GA",
    "title": "Dialogflow Conversation Manager"
   },
   "included_permissions": [
    "dialogflow.conversationProfiles.create",
    "dialogflow.conversationProfiles.delete",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversationProfiles.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update"
   ]
  },
  {
   "name": "roles/dialogflow.integrationManager",
   "role": {
    "description": "Can add, remove, enable and disable Dialogflow integrations.",
    "etag": "AA==",
    "name": "roles/dialogflow.integrationManager",
    "stage": "GA",
    "title": "Dialogflow Integration Manager"
   },
   "included_permissions": null
  },
  {
   "name": "roles/dialogflow.reader",
   "role": {
    "description": "Can read agent and session properties; cannot query for intent.",
    "etag": "AA==",
    "name": "roles/dialogflow.reader",
    "stage": "GA",
    "title": "Dialogflow API Reader"
   },
   "included_permissions": [
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.list",
    "dialogflow.agents.search",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.environments.get",
    "dialogflow.environments.list",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.fulfillments.get",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumbers.list",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/dialogflow.serviceAgent",
   "role": {
    "description": "Gives Dialogflow Service Account access to resources on behalf of user project for intent detection in integrations (Facebook Messenger, Slack, Telephony, etc.).",
    "etag": "AA==",
    "name": "roles/dialogflow.serviceAgent",
    "stage": "GA",
    "title": "Dialogflow Service Agent"
   },
   "included_permissions": [
    "cloudfunctions.functions.invoke",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.list",
    "dialogflow.agents.search",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.environments.get",
    "dialogflow.environments.list",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.fulfillments.get",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumbers.list",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "logging.logEntries.create",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/dlp.admin",
   "role": {
    "description": "Administer DLP including jobs and templates.",
    "etag": "AA==",
    "name": "roles/dlp.admin",
    "stage": "GA",
    "title": "DLP Administrator"
   },
   "included_permissions": [
    "dlp.analyzeRiskTemplates.create",
    "dlp.analyzeRiskTemplates.delete",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.analyzeRiskTemplates.update",
    "dlp.deidentifyTemplates.create",
    "dlp.deidentifyTemplates.delete",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.deidentifyTemplates.update",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.create",
    "dlp.inspectTemplates.delete",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.inspectTemplates.update",
    "dlp.jobTriggers.create",
    "dlp.jobTriggers.delete",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.hybridInspect",
    "dlp.jobTriggers.list",
    "dlp.jobTriggers.update",
    "dlp.jobs.cancel",
    "dlp.jobs.create",
    "dlp.jobs.delete",
    "dlp.jobs.get",
    "dlp.jobs.hybridInspect",
    "dlp.jobs.list",
    "dlp.kms.encrypt",
    "dlp.storedInfoTypes.create",
    "dlp.storedInfoTypes.delete",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list",
    "dlp.storedInfoTypes.update",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/dlp.analyzeRiskTemplatesEditor",
   "role": {
    "description": "Edit DLP analyze risk templates.",
    "etag": "AA==",
    "name": "roles/dlp.analyzeRiskTemplatesEditor",
    "stage": "GA",
    "title": "DLP Analyze Risk Templates Editor"
   },
   "included_permissions": [
    "dlp.analyzeRiskTemplates.create",
    "dlp.analyzeRiskTemplates.delete",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.analyzeRiskTemplates.update"
   ]
  },
  {
   "name": "roles/dlp.analyzeRiskTemplatesReader",
   "role": {
    "description": "Read DLP analyze risk templates.",
    "etag": "AA==",
    "name": "roles/dlp.analyzeRiskTemplatesReader",
    "stage": "GA",
    "title": "DLP Analyze Risk Templates Reader"
   },
   "included_permissions": [
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list"
   ]
  },
  {
   "name": "roles/dlp.deidentifyTemplatesEditor",
   "role": {
    "description": "Edit DLP de-identify templates.",
    "etag": "AA==",
    "name": "roles/dlp.deidentifyTemplatesEditor",
    "stage": "GA",
    "title": "DLP De-identify Templates Editor"
   },
   "included_permissions": [
    "dlp.deidentifyTemplates.create",
    "dlp.deidentifyTemplates.delete",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.deidentifyTemplates.update"
   ]
  },
  {
   "name": "roles/dlp.storedInfoTypesReader",
   "role": {
    "description": "Read DLP stored info types.",
    "etag": "AA==",
    "name": "roles/dlp.storedInfoTypesReader",
    "stage": "GA",
    "title": "DLP Stored InfoTypes Reader"
   },
   "included_permissions": [
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list"
   ]
  },
  {
   "name": "roles/dlp.deidentifyTemplatesReader",
   "role": {
    "description": "Read DLP de-identify templates.",
    "etag": "AA==",
    "name": "roles/dlp.deidentifyTemplatesReader",
    "stage": "GA",
    "title": "DLP De-identify Templates Reader"
   },
   "included_permissions": [
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list"
   ]
  },
  {
   "name": "roles/dlp.inspectFindingsReader",
   "role": {
    "description": "Read DLP stored findings.",
    "etag": "AA==",
    "name": "roles/dlp.inspectFindingsReader",
    "stage": "GA",
    "title": "DLP Inspect Findings Reader"
   },
   "included_permissions": [
    "dlp.inspectFindings.list"
   ]
  },
  {
   "name": "roles/dlp.inspectTemplatesEditor",
   "role": {
    "description": "Edit DLP inspect templates.",
    "etag": "AA==",
    "name": "roles/dlp.inspectTemplatesEditor",
    "stage": "GA",
    "title": "DLP Inspect Templates Editor"
   },
   "included_permissions": [
    "dlp.inspectTemplates.create",
    "dlp.inspectTemplates.delete",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.inspectTemplates.update"
   ]
  },
  {
   "name": "roles/dlp.inspectTemplatesReader",
   "role": {
    "description": "Read DLP inspect templates.",
    "etag": "AA==",
    "name": "roles/dlp.inspectTemplatesReader",
    "stage": "GA",
    "title": "DLP Inspect Templates Reader"
   },
   "included_permissions": [
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list"
   ]
  },
  {
   "name": "roles/dlp.user",
   "role": {
    "description": "Inspect, Redact, and De-identify Content",
    "etag": "AA==",
    "name": "roles/dlp.user",
    "stage": "GA",
    "title": "DLP User"
   },
   "included_permissions": [
    "dlp.kms.encrypt",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/dlp.jobTriggersEditor",
   "role": {
    "description": "Edit job triggers configurations.",
    "etag": "AA==",
    "name": "roles/dlp.jobTriggersEditor",
    "stage": "GA",
    "title": "DLP Job Triggers Editor"
   },
   "included_permissions": [
    "dlp.jobTriggers.create",
    "dlp.jobTriggers.delete",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.hybridInspect",
    "dlp.jobTriggers.list",
    "dlp.jobTriggers.update"
   ]
  },
  {
   "name": "roles/dns.admin",
   "role": {
    "description": "Full read-write access to DNS resources.",
    "etag": "AA==",
    "name": "roles/dns.admin",
    "stage": "GA",
    "title": "DNS Administrator"
   },
   "included_permissions": [
    "compute.networks.get",
    "compute.networks.list",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.networks.targetWithPeeringZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.list",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dlp.jobTriggersReader",
   "role": {
    "description": "Read job triggers.",
    "etag": "AA==",
    "name": "roles/dlp.jobTriggersReader",
    "stage": "GA",
    "title": "DLP Job Triggers Reader"
   },
   "included_permissions": [
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.list"
   ]
  },
  {
   "name": "roles/dns.peer",
   "role": {
    "description": "Access to target networks with DNS peering zones",
    "etag": "AA==",
    "name": "roles/dns.peer",
    "stage": "GA",
    "title": "DNS Peer"
   },
   "included_permissions": [
    "dns.networks.targetWithPeeringZone"
   ]
  },
  {
   "name": "roles/dlp.jobsEditor",
   "role": {
    "description": "Edit and create jobs",
    "etag": "AA==",
    "name": "roles/dlp.jobsEditor",
    "stage": "GA",
    "title": "DLP Jobs Editor"
   },
   "included_permissions": [
    "dlp.jobs.cancel",
    "dlp.jobs.create",
    "dlp.jobs.delete",
    "dlp.jobs.get",
    "dlp.jobs.hybridInspect",
    "dlp.jobs.list",
    "dlp.kms.encrypt"
   ]
  },
  {
   "name": "roles/dns.reader",
   "role": {
    "description": "Read-only access to DNS resources.",
    "etag": "AA==",
    "name": "roles/dns.reader",
    "stage": "GA",
    "title": "DNS Reader"
   },
   "included_permissions": [
    "compute.networks.get",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.policies.get",
    "dns.policies.list",
    "dns.projects.get",
    "dns.resourceRecordSets.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dlp.jobsReader",
   "role": {
    "description": "Read jobs",
    "etag": "AA==",
    "name": "roles/dlp.jobsReader",
    "stage": "GA",
    "title": "DLP Jobs Reader"
   },
   "included_permissions": [
    "dlp.jobs.get",
    "dlp.jobs.list"
   ]
  },
  {
   "name": "roles/endpoints.serviceAgent",
   "role": {
    "description": "Gives the Cloud Endpoints service account access to Endpoints services and the ability to act as a service controller.",
    "etag": "AA==",
    "name": "roles/endpoints.serviceAgent",
    "stage": "GA",
    "title": "Cloud Endpoints Service Agent"
   },
   "included_permissions": [
    "servicemanagement.services.check",
    "servicemanagement.services.get",
    "servicemanagement.services.quota",
    "servicemanagement.services.report"
   ]
  },
  {
   "name": "roles/dlp.reader",
   "role": {
    "description": "Read DLP entities, such as jobs and templates.",
    "etag": "AA==",
    "name": "roles/dlp.reader",
    "stage": "GA",
    "title": "DLP Reader"
   },
   "included_permissions": [
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.list",
    "dlp.jobs.get",
    "dlp.jobs.list",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list"
   ]
  },
  {
   "name": "roles/documentai.admin",
   "role": {
    "description": "Grants full access to all resources in Cloud DocumentAI",
    "etag": "AA==",
    "name": "roles/documentai.admin",
    "stage": "BETA",
    "title": "Cloud DocumentAI Administrator."
   },
   "included_permissions": [
    "documentai.evaluations.create",
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.humanReviewConfigs.update",
    "documentai.labelerPools.create",
    "documentai.labelerPools.delete",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.labelerPools.update",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.create",
    "documentai.processorVersions.delete",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processorVersions.update",
    "documentai.processors.create",
    "documentai.processors.delete",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "documentai.processors.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/dlp.serviceAgent",
   "role": {
    "description": "Gives DLP API service agent permissions for biquery, storage, datastore, pubsub and KMS.",
    "etag": "AA==",
    "name": "roles/dlp.serviceAgent",
    "stage": "GA",
    "title": "DLP API Service Agent"
   },
   "included_permissions": [
    "appengine.applications.get",
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.update",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.tables.create",
    "bigquery.tables.delete",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setCategory",
    "bigquery.tables.setIamPolicy",
    "bigquery.tables.update",
    "bigquery.tables.updateData",
    "bigquery.tables.updateTag",
    "cloudkms.cryptoKeyVersions.useToDecrypt",
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.delete",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.setIamPolicy",
    "datacatalog.tagTemplates.update",
    "datacatalog.tagTemplates.use",
    "datastore.databases.get",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.jobs.cancel",
    "dlp.jobs.create",
    "dlp.jobs.delete",
    "dlp.jobs.get",
    "dlp.jobs.hybridInspect",
    "dlp.jobs.list",
    "dlp.kms.encrypt",
    "firebase.projects.get",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/documentai.apiUser",
   "role": {
    "description": "Grants access to process documents in Cloud DocumentAI",
    "etag": "AA==",
    "name": "roles/documentai.apiUser",
    "stage": "BETA",
    "title": "Cloud DocumentAI API User"
   },
   "included_permissions": [
    "documentai.humanReviewConfigs.review",
    "documentai.operations.getLegacy",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline"
   ]
  },
  {
   "name": "roles/endpointsportal.serviceAgent",
   "role": {
    "description": "Can access information about Endpoints services for consumer portal management, and can read Source Repositories for consumer portal custom content.",
    "etag": "AA==",
    "name": "roles/endpointsportal.serviceAgent",
    "stage": "GA",
    "title": "Endpoints Portal Service Agent"
   },
   "included_permissions": [
    "servicemanagement.services.get",
    "servicemanagement.services.list",
    "source.repos.get"
   ]
  },
  {
   "name": "roles/documentai.editor",
   "role": {
    "description": "Grants access to use all resources in Cloud DocumentAI",
    "etag": "AA==",
    "name": "roles/documentai.editor",
    "stage": "BETA",
    "title": "Cloud DocumentAI Editor"
   },
   "included_permissions": [
    "documentai.evaluations.create",
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.humanReviewConfigs.update",
    "documentai.labelerPools.create",
    "documentai.labelerPools.delete",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.labelerPools.update",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.create",
    "documentai.processorVersions.delete",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processorVersions.update",
    "documentai.processors.create",
    "documentai.processors.delete",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "documentai.processors.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/documentai.viewer",
   "role": {
    "description": "Grants access to view all resources and process documents in Cloud DocumentAI",
    "etag": "AA==",
    "name": "roles/documentai.viewer",
    "stage": "BETA",
    "title": "Cloud DocumentAI Viewer"
   },
   "included_permissions": [
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/documentaicore.serviceAgent",
   "role": {
    "description": "Gives DocumentAI Core Service Account access to consumer resources.",
    "etag": "AA==",
    "name": "roles/documentaicore.serviceAgent",
    "stage": "GA",
    "title": "DocumentAI Core Service Agent"
   },
   "included_permissions": [
    "automl.models.predict",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/domains.admin",
   "role": {
    "description": "Full access to Cloud Domains Registrations and related resources.",
    "etag": "AA==",
    "name": "roles/domains.admin",
    "stage": "BETA",
    "title": "Cloud Domains Admin"
   },
   "included_permissions": [
    "domains.locations.get",
    "domains.locations.list",
    "domains.operations.cancel",
    "domains.operations.get",
    "domains.operations.list",
    "domains.registrations.configureContact",
    "domains.registrations.configureDns",
    "domains.registrations.configureManagement",
    "domains.registrations.create",
    "domains.registrations.delete",
    "domains.registrations.get",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "domains.registrations.setIamPolicy",
    "domains.registrations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/errorreporting.admin",
   "role": {
    "description": "Administrative access to Error Reporting.",
    "etag": "AA==",
    "name": "roles/errorreporting.admin",
    "stage": "BETA",
    "title": "Error Reporting Admin"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.create",
    "errorreporting.errorEvents.delete",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groupMetadata.update",
    "errorreporting.groups.list",
    "logging.notificationRules.create",
    "logging.notificationRules.delete",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.notificationRules.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/errorreporting.user",
   "role": {
    "description": "User access to Error Reporting. Can list all errors and update their metadata. Can delete error events.",
    "etag": "AA==",
    "name": "roles/errorreporting.user",
    "stage": "BETA",
    "title": "Error Reporting User"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.delete",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groupMetadata.update",
    "errorreporting.groups.list",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.notificationRules.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/errorreporting.viewer",
   "role": {
    "description": "Read-only access to all Error Reporting data.",
    "etag": "AA==",
    "name": "roles/errorreporting.viewer",
    "stage": "BETA",
    "title": "Error Reporting Viewer"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groups.list",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/errorreporting.writer",
   "role": {
    "description": "Can send error events to Error Reporting. Intended for service accounts.",
    "etag": "AA==",
    "name": "roles/errorreporting.writer",
    "stage": "BETA",
    "title": "Error Reporting Writer"
   },
   "included_permissions": [
    "errorreporting.errorEvents.create"
   ]
  },
  {
   "name": "roles/essentialcontacts.admin",
   "role": {
    "description": "Full access to all essential contacts",
    "etag": "AA==",
    "name": "roles/essentialcontacts.admin",
    "stage": "BETA",
    "title": "Essential Contacts Admin"
   },
   "included_permissions": [
    "essentialcontacts.contacts.create",
    "essentialcontacts.contacts.delete",
    "essentialcontacts.contacts.get",
    "essentialcontacts.contacts.list",
    "essentialcontacts.contacts.update"
   ]
  },
  {
   "name": "roles/essentialcontacts.viewer",
   "role": {
    "description": "Viewer for all essential contacts",
    "etag": "AA==",
    "name": "roles/essentialcontacts.viewer",
    "stage": "BETA",
    "title": "Essential Contacts Viewer"
   },
   "included_permissions": [
    "essentialcontacts.contacts.get",
    "essentialcontacts.contacts.list"
   ]
  },
  {
   "name": "roles/domains.viewer",
   "role": {
    "description": "Read-only access to Cloud Domains Registrations and related resources.",
    "etag": "AA==",
    "name": "roles/domains.viewer",
    "stage": "BETA",
    "title": "Cloud Domains Viewer"
   },
   "included_permissions": [
    "domains.locations.get",
    "domains.locations.list",
    "domains.operations.get",
    "domains.operations.list",
    "domains.registrations.get",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/eventarc.admin",
   "role": {
    "description": "Full control over all Eventarc resources.",
    "etag": "AA==",
    "name": "roles/eventarc.admin",
    "stage": "BETA",
    "title": "Eventarc Admin"
   },
   "included_permissions": [
    "eventarc.events.receiveAuditLogWritten",
    "eventarc.locations.get",
    "eventarc.locations.list",
    "eventarc.operations.cancel",
    "eventarc.operations.delete",
    "eventarc.operations.get",
    "eventarc.operations.list",
    "eventarc.triggers.create",
    "eventarc.triggers.delete",
    "eventarc.triggers.get",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "eventarc.triggers.setIamPolicy",
    "eventarc.triggers.undelete",
    "eventarc.triggers.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/earlyaccesscenter.admin",
   "role": {
    "description": "Grants full access to the Early Access Center, including access to all DATA_READ and DATA_WRITE permissions. Including the ability to enroll into Early Access Campaigns.",
    "etag": "AA==",
    "name": "roles/earlyaccesscenter.admin",
    "stage": "BETA",
    "title": "Early Access Center Administrator"
   },
   "included_permissions": [
    "earlyaccesscenter.campaigns.enroll",
    "earlyaccesscenter.campaigns.get",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.get",
    "earlyaccesscenter.customerAllowlists.list"
   ]
  },
  {
   "name": "roles/eventarc.eventReceiver",
   "role": {
    "description": "Can receive events from all event providers.",
    "etag": "AA==",
    "name": "roles/eventarc.eventReceiver",
    "stage": "BETA",
    "title": "Eventarc Event Receiver"
   },
   "included_permissions": [
    "eventarc.events.receiveAuditLogWritten"
   ]
  },
  {
   "name": "roles/earlyaccesscenter.viewer",
   "role": {
    "description": "Grants view access to the Early Access Center, including access to all DATA_READ but no DATA_WRITE permissions.",
    "etag": "AA==",
    "name": "roles/earlyaccesscenter.viewer",
    "stage": "BETA",
    "title": "Early Access Center Viewer"
   },
   "included_permissions": [
    "earlyaccesscenter.campaigns.get",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.get",
    "earlyaccesscenter.customerAllowlists.list"
   ]
  },
  {
   "name": "roles/eventarc.serviceAgent",
   "role": {
    "description": "Gives Eventarc service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/eventarc.serviceAgent",
    "stage": "GA",
    "title": "Eventarc Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.getAccessToken",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.update",
    "run.services.get",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/earthengine.admin",
   "role": {
    "description": "Full access to all Earth Engine resource features",
    "etag": "AA==",
    "name": "roles/earthengine.admin",
    "stage": "BETA",
    "title": "Earth Engine Resource Admin"
   },
   "included_permissions": [
    "earthengine.assets.create",
    "earthengine.assets.delete",
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.assets.setIamPolicy",
    "earthengine.assets.update",
    "earthengine.computations.create",
    "earthengine.exports.create",
    "earthengine.filmstripthumbnails.create",
    "earthengine.filmstripthumbnails.get",
    "earthengine.imports.create",
    "earthengine.maps.create",
    "earthengine.maps.get",
    "earthengine.operations.delete",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.operations.update",
    "earthengine.tables.create",
    "earthengine.tables.get",
    "earthengine.thumbnails.create",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.create",
    "earthengine.videothumbnails.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/eventarc.viewer",
   "role": {
    "description": "Can view the state of all Eventarc resources, including IAM policies.",
    "etag": "AA==",
    "name": "roles/eventarc.viewer",
    "stage": "BETA",
    "title": "Eventarc Viewer"
   },
   "included_permissions": [
    "eventarc.locations.get",
    "eventarc.locations.list",
    "eventarc.operations.get",
    "eventarc.operations.list",
    "eventarc.triggers.get",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/exploreanthos.serviceAgent",
   "role": {
    "description": "Allow Explore Anthos operator to manage resources of sample deployment.",
    "etag": "AA==",
    "name": "roles/exploreanthos.serviceAgent",
    "title": "Explore Anthos Service Agent"
   },
   "included_permissions": [
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.updatePolicy",
    "compute.regions.get",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.zones.get",
    "container.clusters.get",
    "container.pods.list",
    "container.serviceAccounts.get",
    "container.serviceAccounts.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.setIamPolicy",
    "serviceusage.services.enable",
    "serviceusage.services.list",
    "source.repos.create",
    "source.repos.delete",
    "source.repos.get",
    "source.repos.list",
    "source.repos.update"
   ]
  },
  {
   "name": "roles/file.editor",
   "role": {
    "description": "Read-write access to Filestore instances and related resources.",
    "etag": "AA==",
    "name": "roles/file.editor",
    "stage": "BETA",
    "title": "Cloud Filestore Editor"
   },
   "included_permissions": [
    "file.backups.create",
    "file.backups.delete",
    "file.backups.get",
    "file.backups.list",
    "file.backups.update",
    "file.instances.create",
    "file.instances.delete",
    "file.instances.get",
    "file.instances.list",
    "file.instances.restore",
    "file.instances.update",
    "file.locations.get",
    "file.locations.list",
    "file.operations.cancel",
    "file.operations.delete",
    "file.operations.get",
    "file.operations.list",
    "file.snapshots.create",
    "file.snapshots.delete",
    "file.snapshots.get",
    "file.snapshots.list",
    "file.snapshots.update"
   ]
  },
  {
   "name": "roles/file.serviceAgent",
   "role": {
    "description": "Gives Cloud Filestore service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/file.serviceAgent",
    "stage": "GA",
    "title": "Cloud Filestore Service Agent"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.routes.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/file.viewer",
   "role": {
    "description": "Read-only access to Filestore instances and related resources.",
    "etag": "AA==",
    "name": "roles/file.viewer",
    "stage": "BETA",
    "title": "Cloud Filestore Viewer"
   },
   "included_permissions": [
    "file.backups.get",
    "file.backups.list",
    "file.instances.get",
    "file.instances.list",
    "file.locations.get",
    "file.locations.list",
    "file.operations.get",
    "file.operations.list",
    "file.snapshots.get",
    "file.snapshots.list"
   ]
  },
  {
   "name": "roles/firebase.admin",
   "role": {
    "description": "Full access to Firebase products.",
    "etag": "AA==",
    "name": "roles/firebase.admin",
    "stage": "GA",
    "title": "Firebase Admin"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.setIamPolicy",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.locations.setIamPolicy",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.setIamPolicy",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.create",
    "clientauthconfig.clients.delete",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.list",
    "clientauthconfig.clients.update",
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudmessaging.messages.create",
    "cloudnotifications.activities.list",
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.create",
    "cloudtestservice.matrices.get",
    "cloudtestservice.matrices.update",
    "cloudtoolresults.executions.create",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.executions.update",
    "cloudtoolresults.histories.create",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.create",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.settings.update",
    "cloudtoolresults.steps.create",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "cloudtoolresults.steps.update",
    "datastore.databases.create",
    "datastore.databases.delete",
    "datastore.databases.export",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.import",
    "datastore.databases.list",
    "datastore.databases.setIamPolicy",
    "datastore.databases.update",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "datastore.locations.get",
    "datastore.locations.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.namespaces.setIamPolicy",
    "datastore.operations.cancel",
    "datastore.operations.delete",
    "datastore.operations.get",
    "datastore.operations.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "errorreporting.groups.list",
    "firebase.billingPlans.get",
    "firebase.billingPlans.update",
    "firebase.clients.create",
    "firebase.clients.delete",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.clients.update",
    "firebase.links.create",
    "firebase.links.delete",
    "firebase.links.list",
    "firebase.links.update",
    "firebase.projects.delete",
    "firebase.projects.get",
    "firebase.projects.update",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.create",
    "firebaseabt.experiments.delete",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.experiments.update",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "firebasecrash.issues.update",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.config.update",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.issues.update",
    "firebasecrashlytics.sessions.get",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.destinations.update",
    "firebasedynamiclinks.domains.create",
    "firebasedynamiclinks.domains.delete",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.domains.update",
    "firebasedynamiclinks.links.create",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.links.update",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.create",
    "firebaseextensions.configs.delete",
    "firebaseextensions.configs.list",
    "firebaseextensions.configs.update",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "firebaseinappmessaging.campaigns.create",
    "firebaseinappmessaging.campaigns.delete",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseinappmessaging.campaigns.update",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "firebaseperformance.config.create",
    "firebaseperformance.config.delete",
    "firebaseperformance.config.update",
    "firebaseperformance.data.get",
    "firebasepredictions.predictions.create",
    "firebasepredictions.predictions.delete",
    "firebasepredictions.predictions.list",
    "firebasepredictions.predictions.update",
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebaserules.rulesets.test",
    "firebasestorage.buckets.addFirebase",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "firebasestorage.buckets.removeFirebase",
    "logging.logEntries.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "runtimeconfig.configs.create",
    "runtimeconfig.configs.delete",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.update",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.create",
    "runtimeconfig.variables.delete",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.update",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.create",
    "runtimeconfig.waiters.delete",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.update",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/earthengine.viewer",
   "role": {
    "description": "Viewer of all Earth Engine resources",
    "etag": "AA==",
    "name": "roles/earthengine.viewer",
    "stage": "BETA",
    "title": "Earth Engine Resource Viewer"
   },
   "included_permissions": [
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.computations.create",
    "earthengine.filmstripthumbnails.get",
    "earthengine.maps.get",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.tables.get",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebase.analyticsAdmin",
   "role": {
    "description": "Full access to Google Analytics for Firebase.",
    "etag": "AA==",
    "name": "roles/firebase.analyticsAdmin",
    "stage": "GA",
    "title": "Firebase Analytics Admin"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseextensions.configs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/remotebuildexecution.actionCacheWriter",
   "role": {
    "description": "Remote Build Execution Action Cache Writer",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.actionCacheWriter",
    "stage": "BETA",
    "title": "Remote Build Execution Action Cache Writer"
   },
   "included_permissions": [
    "remotebuildexecution.actions.set",
    "remotebuildexecution.blobs.create"
   ]
  },
  {
   "name": "roles/editor",
   "role": {
    "description": "Edit access to all resources.",
    "etag": "AA==",
    "name": "roles/editor",
    "stage": "GA",
    "title": "Editor"
   },
   "included_permissions": [
    "accessapproval.requests.get",
    "accessapproval.requests.list",
    "accessapproval.settings.get",
    "accesscontextmanager.accessLevels.create",
    "accesscontextmanager.accessLevels.delete",
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessLevels.replaceAll",
    "accesscontextmanager.accessLevels.update",
    "accesscontextmanager.accessPolicies.create",
    "accesscontextmanager.accessPolicies.delete",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessPolicies.update",
    "accesscontextmanager.accessZones.create",
    "accesscontextmanager.accessZones.delete",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.accessZones.update",
    "accesscontextmanager.gcpUserAccessBindings.create",
    "accesscontextmanager.gcpUserAccessBindings.delete",
    "accesscontextmanager.gcpUserAccessBindings.get",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.gcpUserAccessBindings.update",
    "accesscontextmanager.policies.create",
    "accesscontextmanager.policies.delete",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.policies.update",
    "accesscontextmanager.servicePerimeters.commit",
    "accesscontextmanager.servicePerimeters.create",
    "accesscontextmanager.servicePerimeters.delete",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "accesscontextmanager.servicePerimeters.replaceAll",
    "accesscontextmanager.servicePerimeters.update",
    "actions.agent.claimContentProvider",
    "actions.agent.get",
    "actions.agent.update",
    "actions.agentVersions.create",
    "actions.agentVersions.delete",
    "actions.agentVersions.deploy",
    "actions.agentVersions.get",
    "actions.agentVersions.list",
    "aiplatform.annotationSpecs.create",
    "aiplatform.annotationSpecs.delete",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotationSpecs.update",
    "aiplatform.annotations.create",
    "aiplatform.annotations.delete",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.annotations.update",
    "aiplatform.batchPredictionJobs.cancel",
    "aiplatform.batchPredictionJobs.create",
    "aiplatform.batchPredictionJobs.delete",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.delete",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.create",
    "aiplatform.dataItems.delete",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataItems.update",
    "aiplatform.dataLabelingJobs.cancel",
    "aiplatform.dataLabelingJobs.create",
    "aiplatform.dataLabelingJobs.delete",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.delete",
    "aiplatform.datasets.export",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.list",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.create",
    "aiplatform.endpoints.delete",
    "aiplatform.endpoints.deploy",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.endpoints.undeploy",
    "aiplatform.endpoints.update",
    "aiplatform.hyperparameterTuningJobs.cancel",
    "aiplatform.hyperparameterTuningJobs.create",
    "aiplatform.hyperparameterTuningJobs.delete",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.migratableResources.migrate",
    "aiplatform.migratableResources.search",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.exportEvaluatedDataItems",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.delete",
    "aiplatform.models.export",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.models.upload",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.create",
    "aiplatform.specialistPools.delete",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.create",
    "aiplatform.studies.delete",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.studies.update",
    "aiplatform.trainingPipelines.cancel",
    "aiplatform.trainingPipelines.create",
    "aiplatform.trainingPipelines.delete",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.create",
    "aiplatform.trials.delete",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "aiplatform.trials.update",
    "androidmanagement.enterprises.manage",
    "apigateway.apiconfigs.create",
    "apigateway.apiconfigs.delete",
    "apigateway.apiconfigs.get",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apiconfigs.update",
    "apigateway.apis.create",
    "apigateway.apis.delete",
    "apigateway.apis.get",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.apis.update",
    "apigateway.gateways.create",
    "apigateway.gateways.delete",
    "apigateway.gateways.get",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.gateways.update",
    "apigateway.locations.get",
    "apigateway.locations.list",
    "apigateway.operations.cancel",
    "apigateway.operations.delete",
    "apigateway.operations.get",
    "apigateway.operations.list",
    "apigee.apiproductattributes.createOrUpdateAll",
    "apigee.apiproductattributes.delete",
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproductattributes.update",
    "apigee.apiproducts.create",
    "apigee.apiproducts.delete",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.apiproducts.update",
    "apigee.appkeys.create",
    "apigee.appkeys.delete",
    "apigee.appkeys.get",
    "apigee.appkeys.manage",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.caches.delete",
    "apigee.caches.list",
    "apigee.canaryevaluations.create",
    "apigee.canaryevaluations.get",
    "apigee.datacollectors.create",
    "apigee.datacollectors.delete",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datacollectors.update",
    "apigee.datastores.create",
    "apigee.datastores.delete",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.datastores.update",
    "apigee.deployments.create",
    "apigee.deployments.delete",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.deployments.update",
    "apigee.developerappattributes.createOrUpdateAll",
    "apigee.developerappattributes.delete",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerappattributes.update",
    "apigee.developerapps.create",
    "apigee.developerapps.delete",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerapps.manage",
    "apigee.developerattributes.createOrUpdateAll",
    "apigee.developerattributes.delete",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developerattributes.update",
    "apigee.developers.create",
    "apigee.developers.delete",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.developers.update",
    "apigee.envgroupattachments.create",
    "apigee.envgroupattachments.delete",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.create",
    "apigee.envgroups.delete",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.envgroups.update",
    "apigee.environments.create",
    "apigee.environments.delete",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.getIamPolicy",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.environments.manageRuntime",
    "apigee.environments.update",
    "apigee.exports.create",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.flowhooks.attachSharedFlow",
    "apigee.flowhooks.detachSharedFlow",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.hostqueries.create",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.ingressconfigs.get",
    "apigee.instanceattachments.create",
    "apigee.instanceattachments.delete",
    "apigee.instanceattachments.get",
    "apigee.instanceattachments.list",
    "apigee.instances.create",
    "apigee.instances.delete",
    "apigee.instances.get",
    "apigee.instances.list",
    "apigee.instances.reportStatus",
    "apigee.keystorealiases.create",
    "apigee.keystorealiases.delete",
    "apigee.keystorealiases.exportCertificate",
    "apigee.keystorealiases.generateCSR",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystorealiases.update",
    "apigee.keystores.create",
    "apigee.keystores.delete",
    "apigee.keystores.export",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.create",
    "apigee.keyvaluemaps.delete",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.maskconfigs.update",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.create",
    "apigee.organizations.delete",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.organizations.update",
    "apigee.portals.create",
    "apigee.portals.delete",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.portals.update",
    "apigee.projects.update",
    "apigee.proxies.create",
    "apigee.proxies.delete",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.delete",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.proxyrevisions.update",
    "apigee.queries.create",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.references.create",
    "apigee.references.delete",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.references.update",
    "apigee.reports.create",
    "apigee.reports.delete",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.reports.update",
    "apigee.resourcefiles.create",
    "apigee.resourcefiles.delete",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.resourcefiles.update",
    "apigee.sharedflowrevisions.delete",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflowrevisions.update",
    "apigee.sharedflows.create",
    "apigee.sharedflows.delete",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.create",
    "apigee.targetservers.delete",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.targetservers.update",
    "apigee.tracesessions.create",
    "apigee.tracesessions.delete",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "apigeeconnect.connections.list",
    "apigeeconnect.endpoints.connect",
    "apikeys.keys.create",
    "apikeys.keys.delete",
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "apikeys.keys.update",
    "appengine.applications.get",
    "appengine.applications.update",
    "appengine.instances.delete",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.memcache.addKey",
    "appengine.memcache.flush",
    "appengine.memcache.get",
    "appengine.memcache.getKey",
    "appengine.memcache.list",
    "appengine.memcache.update",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.runtimes.actAsAdmin",
    "appengine.services.delete",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.services.update",
    "appengine.versions.create",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.list",
    "appengine.versions.update",
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.delete",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.create",
    "artifactregistry.repositories.delete",
    "artifactregistry.repositories.deleteArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.update",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.delete",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.delete",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.delete",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "assuredworkloads.workload.update",
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.delete",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.catalogs.update",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.delete",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "autoscaling.sites.getIamPolicy",
    "autoscaling.sites.readRecommendations",
    "autoscaling.sites.writeMetrics",
    "autoscaling.sites.writeState",
    "bigquery.bireservations.get",
    "bigquery.bireservations.update",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.capacityCommitments.update",
    "bigquery.config.get",
    "bigquery.connections.create",
    "bigquery.connections.delete",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.update",
    "bigquery.connections.use",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.savedqueries.create",
    "bigquery.savedqueries.delete",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.savedqueries.update",
    "bigquery.tables.getIamPolicy",
    "bigquery.transfers.get",
    "bigquery.transfers.update",
    "bigtable.appProfiles.create",
    "bigtable.appProfiles.delete",
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.appProfiles.update",
    "bigtable.backups.create",
    "bigtable.backups.delete",
    "bigtable.backups.get",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.backups.restore",
    "bigtable.backups.update",
    "bigtable.clusters.create",
    "bigtable.clusters.delete",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.clusters.update",
    "bigtable.instances.create",
    "bigtable.instances.delete",
    "bigtable.instances.get",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.instances.update",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.create",
    "bigtable.tables.delete",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.mutateRows",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "bigtable.tables.update",
    "billing.resourceCosts.get",
    "binaryauthorization.attestors.create",
    "binaryauthorization.attestors.delete",
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.update",
    "binaryauthorization.attestors.verifyImageAttested",
    "binaryauthorization.continuousValidationConfig.get",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.continuousValidationConfig.update",
    "binaryauthorization.policy.get",
    "binaryauthorization.policy.getIamPolicy",
    "binaryauthorization.policy.update",
    "chat.bots.get",
    "chat.bots.update",
    "clientauthconfig.brands.create",
    "clientauthconfig.brands.delete",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.create",
    "clientauthconfig.clients.createSecret",
    "clientauthconfig.clients.delete",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.getWithSecret",
    "clientauthconfig.clients.list",
    "clientauthconfig.clients.listWithSecrets",
    "clientauthconfig.clients.undelete",
    "clientauthconfig.clients.update",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "clouddebugger.breakpoints.create",
    "clouddebugger.breakpoints.delete",
    "clouddebugger.breakpoints.get",
    "clouddebugger.breakpoints.list",
    "clouddebugger.breakpoints.listActive",
    "clouddebugger.breakpoints.update",
    "clouddebugger.debuggees.create",
    "clouddebugger.debuggees.list",
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudiot.devices.bindGateway",
    "cloudiot.devices.create",
    "cloudiot.devices.delete",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.unbindGateway",
    "cloudiot.devices.update",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.create",
    "cloudiot.registries.delete",
    "cloudiot.registries.get",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudiot.registries.update",
    "cloudiottoken.tokensettings.get",
    "cloudiottoken.tokensettings.update",
    "cloudjobdiscovery.companies.create",
    "cloudjobdiscovery.companies.delete",
    "cloudjobdiscovery.companies.get",
    "cloudjobdiscovery.companies.list",
    "cloudjobdiscovery.companies.update",
    "cloudjobdiscovery.events.create",
    "cloudjobdiscovery.jobs.create",
    "cloudjobdiscovery.jobs.delete",
    "cloudjobdiscovery.jobs.get",
    "cloudjobdiscovery.jobs.search",
    "cloudjobdiscovery.jobs.update",
    "cloudjobdiscovery.profiles.create",
    "cloudjobdiscovery.profiles.delete",
    "cloudjobdiscovery.profiles.get",
    "cloudjobdiscovery.profiles.search",
    "cloudjobdiscovery.profiles.update",
    "cloudjobdiscovery.tenants.create",
    "cloudjobdiscovery.tenants.delete",
    "cloudjobdiscovery.tenants.get",
    "cloudjobdiscovery.tenants.update",
    "cloudjobdiscovery.tools.access",
    "cloudkms.cryptoKeyVersions.create",
    "cloudkms.cryptoKeyVersions.get",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeyVersions.update",
    "cloudkms.cryptoKeys.create",
    "cloudkms.cryptoKeys.get",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.cryptoKeys.update",
    "cloudkms.importJobs.create",
    "cloudkms.importJobs.get",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.importJobs.useToImport",
    "cloudkms.keyRings.create",
    "cloudkms.keyRings.get",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudmessaging.messages.create",
    "cloudnotifications.activities.list",
    "cloudonefs.isiloncloud.com/clusters.create",
    "cloudonefs.isiloncloud.com/clusters.delete",
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/clusters.update",
    "cloudonefs.isiloncloud.com/clusters.updateAdvancedSettings",
    "cloudonefs.isiloncloud.com/fileshares.create",
    "cloudonefs.isiloncloud.com/fileshares.delete",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudonefs.isiloncloud.com/fileshares.update",
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.create",
    "cloudprivatecatalogproducer.associations.delete",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.create",
    "cloudprivatecatalogproducer.catalogAssociations.delete",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.create",
    "cloudprivatecatalogproducer.catalogs.delete",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.catalogs.undelete",
    "cloudprivatecatalogproducer.catalogs.update",
    "cloudprivatecatalogproducer.producerCatalogs.attachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.create",
    "cloudprivatecatalogproducer.producerCatalogs.delete",
    "cloudprivatecatalogproducer.producerCatalogs.detachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.update",
    "cloudprivatecatalogproducer.products.create",
    "cloudprivatecatalogproducer.products.delete",
    "cloudprivatecatalogproducer.products.get",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.products.update",
    "cloudprivatecatalogproducer.settings.get",
    "cloudprivatecatalogproducer.settings.update",
    "cloudprivatecatalogproducer.targets.associate",
    "cloudprivatecatalogproducer.targets.unassociate",
    "cloudprofiler.profiles.create",
    "cloudprofiler.profiles.list",
    "cloudprofiler.profiles.update",
    "cloudscheduler.jobs.create",
    "cloudscheduler.jobs.delete",
    "cloudscheduler.jobs.enable",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.get",
    "cloudscheduler.jobs.list",
    "cloudscheduler.jobs.pause",
    "cloudscheduler.jobs.run",
    "cloudscheduler.jobs.update",
    "cloudscheduler.locations.get",
    "cloudscheduler.locations.list",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "cloudsql.backupRuns.create",
    "cloudsql.backupRuns.delete",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.create",
    "cloudsql.databases.delete",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.databases.update",
    "cloudsql.instances.addServerCa",
    "cloudsql.instances.clone",
    "cloudsql.instances.connect",
    "cloudsql.instances.create",
    "cloudsql.instances.delete",
    "cloudsql.instances.demoteMaster",
    "cloudsql.instances.export",
    "cloudsql.instances.failover",
    "cloudsql.instances.get",
    "cloudsql.instances.import",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.instances.login",
    "cloudsql.instances.promoteReplica",
    "cloudsql.instances.resetSslConfig",
    "cloudsql.instances.restart",
    "cloudsql.instances.restoreBackup",
    "cloudsql.instances.rotateServerCa",
    "cloudsql.instances.startReplica",
    "cloudsql.instances.stopReplica",
    "cloudsql.instances.truncateLog",
    "cloudsql.instances.update",
    "cloudsql.sslCerts.create",
    "cloudsql.sslCerts.createEphemeral",
    "cloudsql.sslCerts.delete",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.create",
    "cloudsql.users.delete",
    "cloudsql.users.list",
    "cloudsql.users.update",
    "cloudsupport.accounts.get",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.getUserRoles",
    "cloudsupport.accounts.list",
    "cloudsupport.accounts.update",
    "cloudsupport.accounts.updateUserRoles",
    "cloudsupport.operations.get",
    "cloudsupport.properties.get",
    "cloudsupport.techCases.create",
    "cloudsupport.techCases.escalate",
    "cloudsupport.techCases.get",
    "cloudsupport.techCases.list",
    "cloudsupport.techCases.update",
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.create",
    "cloudtasks.queues.delete",
    "cloudtasks.queues.get",
    "cloudtasks.queues.list",
    "cloudtasks.queues.pause",
    "cloudtasks.queues.purge",
    "cloudtasks.queues.resume",
    "cloudtasks.queues.update",
    "cloudtasks.tasks.create",
    "cloudtasks.tasks.delete",
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.get",
    "cloudtasks.tasks.list",
    "cloudtasks.tasks.run",
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.create",
    "cloudtestservice.matrices.get",
    "cloudtestservice.matrices.update",
    "cloudtoolresults.executions.create",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.executions.update",
    "cloudtoolresults.histories.create",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.create",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.settings.update",
    "cloudtoolresults.steps.create",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "cloudtoolresults.steps.update",
    "cloudtrace.insights.get",
    "cloudtrace.insights.list",
    "cloudtrace.stats.get",
    "cloudtrace.tasks.create",
    "cloudtrace.tasks.delete",
    "cloudtrace.tasks.get",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.get",
    "cloudtrace.traces.list",
    "cloudtrace.traces.patch",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.create",
    "cloudtranslate.glossaries.delete",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.cancel",
    "cloudtranslate.operations.delete",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.create",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.delete",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.get",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.update",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.get",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.create",
    "cloudvolumesgcp-api.netapp.com/snapshots.delete",
    "cloudvolumesgcp-api.netapp.com/snapshots.get",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.update",
    "cloudvolumesgcp-api.netapp.com/volumes.create",
    "cloudvolumesgcp-api.netapp.com/volumes.delete",
    "cloudvolumesgcp-api.netapp.com/volumes.get",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "cloudvolumesgcp-api.netapp.com/volumes.update",
    "composer.environments.create",
    "composer.environments.delete",
    "composer.environments.get",
    "composer.environments.list",
    "composer.environments.update",
    "composer.imageversions.list",
    "composer.operations.delete",
    "composer.operations.get",
    "composer.operations.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.commitments.create",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.commitments.updateReservations",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.delete",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.create",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.globalPublicDelegatedPrefixes.use",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.create",
    "compute.maintenancePolicies.delete",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.maintenancePolicies.use",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.addNodes",
    "compute.nodeGroups.create",
    "compute.nodeGroups.delete",
    "compute.nodeGroups.deleteNodes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeGroups.setNodeTemplate",
    "compute.nodeGroups.update",
    "compute.nodeTemplates.create",
    "compute.nodeTemplates.delete",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.organizations.setSecurityPolicy",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.projects.setDefaultNetworkTier",
    "compute.projects.setDefaultServiceAccount",
    "compute.projects.setUsageExportBucket",
    "compute.publicAdvertisedPrefixes.create",
    "compute.publicAdvertisedPrefixes.delete",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicAdvertisedPrefixes.update",
    "compute.publicAdvertisedPrefixes.updatePolicy",
    "compute.publicAdvertisedPrefixes.use",
    "compute.publicDelegatedPrefixes.create",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.publicDelegatedPrefixes.use",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.delete",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.create",
    "compute.reservations.delete",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.reservations.resize",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.delete",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "consumerprocurement.accounts.create",
    "consumerprocurement.accounts.delete",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.entitlements.get",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.create",
    "consumerprocurement.freeTrials.get",
    "consumerprocurement.freeTrials.list",
    "consumerprocurement.orders.cancel",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "consumerprocurement.orders.modify",
    "consumerprocurement.orders.place",
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.notes.listOccurrences",
    "containeranalysis.notes.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.entries.create",
    "datacatalog.entries.delete",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.update",
    "datacatalog.entries.updateTag",
    "datacatalog.entryGroups.create",
    "datacatalog.entryGroups.delete",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.entryGroups.update",
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.delete",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.update",
    "datacatalog.tagTemplates.use",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "dataflow.jobs.cancel",
    "dataflow.jobs.create",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.jobs.snapshot",
    "dataflow.jobs.updateContents",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.delete",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "datafusion.instances.create",
    "datafusion.instances.delete",
    "datafusion.instances.get",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.restart",
    "datafusion.instances.runtime",
    "datafusion.instances.update",
    "datafusion.instances.upgrade",
    "datafusion.locations.get",
    "datafusion.locations.list",
    "datafusion.operations.cancel",
    "datafusion.operations.get",
    "datafusion.operations.list",
    "datalabeling.annotateddatasets.delete",
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.label",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.create",
    "datalabeling.annotationspecsets.delete",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.create",
    "datalabeling.datasets.delete",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.import",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.create",
    "datalabeling.instructions.delete",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.cancel",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "datamigration.connectionprofiles.create",
    "datamigration.connectionprofiles.delete",
    "datamigration.connectionprofiles.get",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.connectionprofiles.update",
    "datamigration.locations.get",
    "datamigration.locations.list",
    "datamigration.migrationjobs.create",
    "datamigration.migrationjobs.delete",
    "datamigration.migrationjobs.generateSshScript",
    "datamigration.migrationjobs.get",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.migrationjobs.promote",
    "datamigration.migrationjobs.restart",
    "datamigration.migrationjobs.resume",
    "datamigration.migrationjobs.start",
    "datamigration.migrationjobs.stop",
    "datamigration.migrationjobs.update",
    "datamigration.migrationjobs.verify",
    "datamigration.operations.cancel",
    "datamigration.operations.delete",
    "datamigration.operations.get",
    "datamigration.operations.list",
    "dataprep.projects.use",
    "dataproc.agents.create",
    "dataproc.agents.delete",
    "dataproc.agents.get",
    "dataproc.agents.list",
    "dataproc.agents.update",
    "dataproc.autoscalingPolicies.create",
    "dataproc.autoscalingPolicies.delete",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.update",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.jobs.update",
    "dataproc.operations.cancel",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.tasks.lease",
    "dataproc.tasks.listInvalidatedLeases",
    "dataproc.tasks.reportStatus",
    "dataproc.workflowTemplates.create",
    "dataproc.workflowTemplates.delete",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.instantiate",
    "dataproc.workflowTemplates.instantiateInline",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.update",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.datasources.update",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.databases.update",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.deployments.cancelPreview",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.stop",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "dialogflow.agents.create",
    "dialogflow.agents.delete",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.import",
    "dialogflow.agents.list",
    "dialogflow.agents.restore",
    "dialogflow.agents.search",
    "dialogflow.agents.train",
    "dialogflow.agents.update",
    "dialogflow.agents.validate",
    "dialogflow.answerrecords.delete",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.answerrecords.update",
    "dialogflow.callMatchers.create",
    "dialogflow.callMatchers.delete",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversationDatasets.create",
    "dialogflow.conversationDatasets.delete",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.import",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.create",
    "dialogflow.conversationModels.delete",
    "dialogflow.conversationModels.deploy",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationModels.undeploy",
    "dialogflow.conversationProfiles.create",
    "dialogflow.conversationProfiles.delete",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversationProfiles.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.create",
    "dialogflow.documents.delete",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.create",
    "dialogflow.entityTypes.createEntity",
    "dialogflow.entityTypes.delete",
    "dialogflow.entityTypes.deleteEntity",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.entityTypes.update",
    "dialogflow.entityTypes.updateEntity",
    "dialogflow.environments.create",
    "dialogflow.environments.delete",
    "dialogflow.environments.get",
    "dialogflow.environments.getHistory",
    "dialogflow.environments.list",
    "dialogflow.environments.lookupHistory",
    "dialogflow.environments.update",
    "dialogflow.flows.create",
    "dialogflow.flows.delete",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.flows.train",
    "dialogflow.flows.update",
    "dialogflow.flows.validate",
    "dialogflow.fulfillments.get",
    "dialogflow.fulfillments.update",
    "dialogflow.intents.create",
    "dialogflow.intents.delete",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.intents.update",
    "dialogflow.knowledgeBases.create",
    "dialogflow.knowledgeBases.delete",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.create",
    "dialogflow.pages.delete",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.pages.update",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.phoneNumberOrders.cancel",
    "dialogflow.phoneNumberOrders.create",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumberOrders.update",
    "dialogflow.phoneNumbers.delete",
    "dialogflow.phoneNumbers.list",
    "dialogflow.phoneNumbers.undelete",
    "dialogflow.phoneNumbers.update",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.create",
    "dialogflow.smartMessagingEntries.delete",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.create",
    "dialogflow.transitionRouteGroups.delete",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.transitionRouteGroups.update",
    "dialogflow.versions.create",
    "dialogflow.versions.delete",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.versions.load",
    "dialogflow.versions.update",
    "dialogflow.webhooks.create",
    "dialogflow.webhooks.delete",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dialogflow.webhooks.update",
    "dlp.analyzeRiskTemplates.create",
    "dlp.analyzeRiskTemplates.delete",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.analyzeRiskTemplates.update",
    "dlp.deidentifyTemplates.create",
    "dlp.deidentifyTemplates.delete",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.deidentifyTemplates.update",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.create",
    "dlp.inspectTemplates.delete",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.inspectTemplates.update",
    "dlp.jobTriggers.create",
    "dlp.jobTriggers.delete",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.hybridInspect",
    "dlp.jobTriggers.list",
    "dlp.jobTriggers.update",
    "dlp.jobs.cancel",
    "dlp.jobs.create",
    "dlp.jobs.delete",
    "dlp.jobs.get",
    "dlp.jobs.hybridInspect",
    "dlp.jobs.list",
    "dlp.storedInfoTypes.create",
    "dlp.storedInfoTypes.delete",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list",
    "dlp.storedInfoTypes.update",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.networks.targetWithPeeringZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.list",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "documentai.evaluations.create",
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.humanReviewConfigs.update",
    "documentai.labelerPools.create",
    "documentai.labelerPools.delete",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.labelerPools.update",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.create",
    "documentai.processorVersions.delete",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processorVersions.update",
    "documentai.processors.create",
    "documentai.processors.delete",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "documentai.processors.update",
    "domains.locations.get",
    "domains.locations.list",
    "domains.operations.cancel",
    "domains.operations.get",
    "domains.operations.list",
    "domains.registrations.configureContact",
    "domains.registrations.configureDns",
    "domains.registrations.configureManagement",
    "domains.registrations.create",
    "domains.registrations.delete",
    "domains.registrations.get",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "domains.registrations.update",
    "earlyaccesscenter.campaigns.get",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.get",
    "earlyaccesscenter.customerAllowlists.list",
    "earthengine.assets.create",
    "earthengine.assets.delete",
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.assets.update",
    "earthengine.computations.create",
    "earthengine.exports.create",
    "earthengine.filmstripthumbnails.create",
    "earthengine.filmstripthumbnails.get",
    "earthengine.imports.create",
    "earthengine.maps.create",
    "earthengine.maps.get",
    "earthengine.operations.delete",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.operations.update",
    "earthengine.tables.create",
    "earthengine.tables.get",
    "earthengine.thumbnails.create",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.create",
    "earthengine.videothumbnails.get",
    "endpoints.portals.attachCustomDomain",
    "endpoints.portals.detachCustomDomain",
    "endpoints.portals.listCustomDomains",
    "endpoints.portals.update",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.create",
    "errorreporting.errorEvents.delete",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groupMetadata.update",
    "errorreporting.groups.list",
    "essentialcontacts.contacts.create",
    "essentialcontacts.contacts.delete",
    "essentialcontacts.contacts.get",
    "essentialcontacts.contacts.list",
    "essentialcontacts.contacts.update",
    "eventarc.locations.get",
    "eventarc.locations.list",
    "eventarc.operations.cancel",
    "eventarc.operations.delete",
    "eventarc.operations.get",
    "eventarc.operations.list",
    "eventarc.triggers.create",
    "eventarc.triggers.delete",
    "eventarc.triggers.get",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "eventarc.triggers.undelete",
    "eventarc.triggers.update",
    "file.backups.create",
    "file.backups.delete",
    "file.backups.get",
    "file.backups.list",
    "file.backups.update",
    "file.instances.create",
    "file.instances.delete",
    "file.instances.get",
    "file.instances.list",
    "file.instances.restore",
    "file.instances.update",
    "file.locations.get",
    "file.locations.list",
    "file.operations.cancel",
    "file.operations.delete",
    "file.operations.get",
    "file.operations.list",
    "file.snapshots.create",
    "file.snapshots.delete",
    "file.snapshots.get",
    "file.snapshots.list",
    "file.snapshots.update",
    "firebase.billingPlans.get",
    "firebase.clients.create",
    "firebase.clients.delete",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.clients.update",
    "firebase.links.list",
    "firebase.projects.get",
    "firebase.projects.update",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.create",
    "firebaseabt.experiments.delete",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.experiments.update",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "firebasecrash.issues.update",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.config.update",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.issues.update",
    "firebasecrashlytics.sessions.get",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.create",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.domains.update",
    "firebasedynamiclinks.links.create",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.links.update",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "firebaseinappmessaging.campaigns.create",
    "firebaseinappmessaging.campaigns.delete",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseinappmessaging.campaigns.update",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "firebaseperformance.config.create",
    "firebaseperformance.config.delete",
    "firebaseperformance.config.update",
    "firebaseperformance.data.get",
    "firebasepredictions.predictions.create",
    "firebasepredictions.predictions.delete",
    "firebasepredictions.predictions.list",
    "firebasepredictions.predictions.update",
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebaserules.rulesets.test",
    "firebasestorage.buckets.addFirebase",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "firebasestorage.buckets.removeFirebase",
    "gameservices.gameServerClusters.create",
    "gameservices.gameServerClusters.delete",
    "gameservices.gameServerClusters.get",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerClusters.update",
    "gameservices.gameServerConfigs.create",
    "gameservices.gameServerConfigs.delete",
    "gameservices.gameServerConfigs.get",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.create",
    "gameservices.gameServerDeployments.delete",
    "gameservices.gameServerDeployments.get",
    "gameservices.gameServerDeployments.list",
    "gameservices.gameServerDeployments.rollout",
    "gameservices.gameServerDeployments.update",
    "gameservices.locations.get",
    "gameservices.locations.list",
    "gameservices.operations.cancel",
    "gameservices.operations.delete",
    "gameservices.operations.get",
    "gameservices.operations.list",
    "gameservices.realms.create",
    "gameservices.realms.delete",
    "gameservices.realms.get",
    "gameservices.realms.list",
    "gameservices.realms.update",
    "gcp.redisenterprise.com/databases.create",
    "gcp.redisenterprise.com/databases.delete",
    "gcp.redisenterprise.com/databases.get",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/databases.update",
    "gcp.redisenterprise.com/subscriptions.create",
    "gcp.redisenterprise.com/subscriptions.delete",
    "gcp.redisenterprise.com/subscriptions.get",
    "gcp.redisenterprise.com/subscriptions.list",
    "gcp.redisenterprise.com/subscriptions.update",
    "genomics.datasets.create",
    "genomics.datasets.delete",
    "genomics.datasets.get",
    "genomics.datasets.list",
    "genomics.datasets.update",
    "genomics.operations.cancel",
    "genomics.operations.create",
    "genomics.operations.get",
    "genomics.operations.list",
    "gkehub.features.create",
    "gkehub.features.delete",
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.features.update",
    "gkehub.gateway.delete",
    "gkehub.gateway.get",
    "gkehub.gateway.getIamPolicy",
    "gkehub.gateway.patch",
    "gkehub.gateway.post",
    "gkehub.gateway.put",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.create",
    "gkehub.memberships.delete",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.memberships.update",
    "gkehub.operations.cancel",
    "gkehub.operations.delete",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "gsuiteaddons.authorizations.get",
    "gsuiteaddons.deployments.create",
    "gsuiteaddons.deployments.delete",
    "gsuiteaddons.deployments.execute",
    "gsuiteaddons.deployments.get",
    "gsuiteaddons.deployments.install",
    "gsuiteaddons.deployments.installStatus",
    "gsuiteaddons.deployments.list",
    "gsuiteaddons.deployments.uninstall",
    "gsuiteaddons.deployments.update",
    "healthcare.annotationStores.create",
    "healthcare.annotationStores.delete",
    "healthcare.annotationStores.evaluate",
    "healthcare.annotationStores.export",
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.import",
    "healthcare.annotationStores.list",
    "healthcare.annotationStores.update",
    "healthcare.annotations.create",
    "healthcare.annotations.delete",
    "healthcare.annotations.get",
    "healthcare.annotations.list",
    "healthcare.annotations.update",
    "healthcare.attributeDefinitions.create",
    "healthcare.attributeDefinitions.delete",
    "healthcare.attributeDefinitions.get",
    "healthcare.attributeDefinitions.list",
    "healthcare.attributeDefinitions.update",
    "healthcare.consentArtifacts.create",
    "healthcare.consentArtifacts.delete",
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.create",
    "healthcare.consentStores.delete",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consentStores.update",
    "healthcare.consents.activate",
    "healthcare.consents.create",
    "healthcare.consents.delete",
    "healthcare.consents.get",
    "healthcare.consents.list",
    "healthcare.consents.reject",
    "healthcare.consents.revoke",
    "healthcare.consents.update",
    "healthcare.datasets.create",
    "healthcare.datasets.deidentify",
    "healthcare.datasets.delete",
    "healthcare.datasets.get",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.datasets.update",
    "healthcare.dicomStores.create",
    "healthcare.dicomStores.deidentify",
    "healthcare.dicomStores.delete",
    "healthcare.dicomStores.dicomWebDelete",
    "healthcare.dicomStores.dicomWebRead",
    "healthcare.dicomStores.dicomWebWrite",
    "healthcare.dicomStores.export",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.import",
    "healthcare.dicomStores.list",
    "healthcare.dicomStores.update",
    "healthcare.fhirResources.create",
    "healthcare.fhirResources.delete",
    "healthcare.fhirResources.get",
    "healthcare.fhirResources.patch",
    "healthcare.fhirResources.purge",
    "healthcare.fhirResources.translateConceptMap",
    "healthcare.fhirResources.update",
    "healthcare.fhirStores.create",
    "healthcare.fhirStores.deidentify",
    "healthcare.fhirStores.delete",
    "healthcare.fhirStores.executeBundle",
    "healthcare.fhirStores.export",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.import",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.searchResources",
    "healthcare.fhirStores.update",
    "healthcare.hl7V2Messages.create",
    "healthcare.hl7V2Messages.delete",
    "healthcare.hl7V2Messages.get",
    "healthcare.hl7V2Messages.ingest",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Messages.update",
    "healthcare.hl7V2Stores.create",
    "healthcare.hl7V2Stores.delete",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.import",
    "healthcare.hl7V2Stores.list",
    "healthcare.hl7V2Stores.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.nlpservice.analyzeEntities",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "healthcare.operations.list",
    "healthcare.userDataMappings.archive",
    "healthcare.userDataMappings.create",
    "healthcare.userDataMappings.delete",
    "healthcare.userDataMappings.get",
    "healthcare.userDataMappings.list",
    "healthcare.userDataMappings.update",
    "iam.googleapis.com/workloadIdentityPoolProviders.create",
    "iam.googleapis.com/workloadIdentityPoolProviders.delete",
    "iam.googleapis.com/workloadIdentityPoolProviders.get",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.undelete",
    "iam.googleapis.com/workloadIdentityPoolProviders.update",
    "iam.googleapis.com/workloadIdentityPools.create",
    "iam.googleapis.com/workloadIdentityPools.delete",
    "iam.googleapis.com/workloadIdentityPools.get",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.googleapis.com/workloadIdentityPools.undelete",
    "iam.googleapis.com/workloadIdentityPools.update",
    "iam.roles.get",
    "iam.roles.list",
    "iam.serviceAccountKeys.create",
    "iam.serviceAccountKeys.delete",
    "iam.serviceAccountKeys.get",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.create",
    "iam.serviceAccounts.delete",
    "iam.serviceAccounts.disable",
    "iam.serviceAccounts.enable",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.update",
    "iap.projects.getSettings",
    "iap.projects.updateSettings",
    "iap.web.getSettings",
    "iap.web.updateSettings",
    "iap.webServiceVersions.getSettings",
    "iap.webServiceVersions.updateSettings",
    "iap.webServices.getSettings",
    "iap.webServices.updateSettings",
    "iap.webTypes.getSettings",
    "iap.webTypes.updateSettings",
    "identityplatform.workloadPoolProviders.create",
    "identityplatform.workloadPoolProviders.delete",
    "identityplatform.workloadPoolProviders.get",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPoolProviders.undelete",
    "identityplatform.workloadPoolProviders.update",
    "identityplatform.workloadPools.create",
    "identityplatform.workloadPools.delete",
    "identityplatform.workloadPools.get",
    "identityplatform.workloadPools.list",
    "identityplatform.workloadPools.undelete",
    "identityplatform.workloadPools.update",
    "lifesciences.operations.cancel",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "lifesciences.workflows.run",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logEntries.download",
    "logging.logEntries.list",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.delete",
    "logging.logs.list",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.listLogs",
    "logging.views.listResourceKeys",
    "logging.views.listResourceValues",
    "logging.views.update",
    "managedidentities.domains.attachTrust",
    "managedidentities.domains.create",
    "managedidentities.domains.delete",
    "managedidentities.domains.detachTrust",
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.domains.reconfigureTrust",
    "managedidentities.domains.resetpassword",
    "managedidentities.domains.update",
    "managedidentities.domains.updateLDAPSSettings",
    "managedidentities.domains.validateTrust",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.cancel",
    "managedidentities.operations.delete",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "memcache.instances.applyParameters",
    "memcache.instances.applySoftwareUpdate",
    "memcache.instances.create",
    "memcache.instances.delete",
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.instances.update",
    "memcache.instances.updateParameters",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.cancel",
    "memcache.operations.delete",
    "memcache.operations.get",
    "memcache.operations.list",
    "metastore.imports.create",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.imports.update",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.cancel",
    "metastore.operations.delete",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.create",
    "metastore.services.delete",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.restore",
    "metastore.services.update",
    "ml.jobs.cancel",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.jobs.update",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.create",
    "ml.models.delete",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.models.update",
    "ml.operations.cancel",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.create",
    "ml.studies.delete",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.trials.create",
    "ml.trials.delete",
    "ml.trials.get",
    "ml.trials.list",
    "ml.trials.update",
    "ml.versions.create",
    "ml.versions.delete",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "ml.versions.update",
    "monitoring.alertPolicies.create",
    "monitoring.alertPolicies.delete",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.alertPolicies.update",
    "monitoring.dashboards.create",
    "monitoring.dashboards.delete",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.dashboards.update",
    "monitoring.groups.create",
    "monitoring.groups.delete",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.groups.update",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.delete",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.create",
    "monitoring.notificationChannels.delete",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.notificationChannels.sendVerificationCode",
    "monitoring.notificationChannels.update",
    "monitoring.notificationChannels.verify",
    "monitoring.publicWidgets.create",
    "monitoring.publicWidgets.delete",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.publicWidgets.update",
    "monitoring.services.create",
    "monitoring.services.delete",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.services.update",
    "monitoring.slos.create",
    "monitoring.slos.delete",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.slos.update",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.create",
    "monitoring.uptimeCheckConfigs.delete",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "monitoring.uptimeCheckConfigs.update",
    "networkmanagement.connectivitytests.create",
    "networkmanagement.connectivitytests.delete",
    "networkmanagement.connectivitytests.get",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.connectivitytests.rerun",
    "networkmanagement.connectivitytests.update",
    "networkmanagement.locations.get",
    "networkmanagement.locations.list",
    "networkmanagement.operations.get",
    "networkmanagement.operations.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "notebooks.environments.create",
    "notebooks.environments.delete",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.create",
    "notebooks.executions.delete",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.delete",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.reset",
    "notebooks.instances.setAccelerator",
    "notebooks.instances.setLabels",
    "notebooks.instances.setMachineType",
    "notebooks.instances.start",
    "notebooks.instances.stop",
    "notebooks.instances.update",
    "notebooks.instances.updateConfig",
    "notebooks.instances.updateShieldInstanceConfig",
    "notebooks.instances.upgrade",
    "notebooks.instances.use",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.cancel",
    "notebooks.operations.delete",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.delete",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "oauthconfig.clientpolicy.get",
    "oauthconfig.testusers.get",
    "oauthconfig.testusers.update",
    "oauthconfig.verification.get",
    "oauthconfig.verification.submit",
    "oauthconfig.verification.update",
    "ondemandscanning.operations.cancel",
    "ondemandscanning.operations.delete",
    "ondemandscanning.operations.get",
    "ondemandscanning.operations.list",
    "ondemandscanning.operations.wait",
    "ondemandscanning.scans.analyzePackages",
    "ondemandscanning.scans.listVulnerabilities",
    "ondemandscanning.scans.scan",
    "opsconfigmonitoring.resourceMetadata.write",
    "orgpolicy.policy.get",
    "osconfig.guestPolicies.create",
    "osconfig.guestPolicies.delete",
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "osconfig.guestPolicies.update",
    "osconfig.patchDeployments.create",
    "osconfig.patchDeployments.delete",
    "osconfig.patchDeployments.execute",
    "osconfig.patchDeployments.get",
    "osconfig.patchDeployments.list",
    "osconfig.patchDeployments.update",
    "osconfig.patchJobs.exec",
    "osconfig.patchJobs.get",
    "osconfig.patchJobs.list",
    "policysimulator.replayResults.list",
    "policysimulator.replays.get",
    "policysimulator.replays.list",
    "privateca.certificateAuthorities.create",
    "privateca.certificateAuthorities.delete",
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateAuthorities.update",
    "privateca.certificateRevocationLists.create",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificateRevocationLists.update",
    "privateca.certificates.create",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.certificates.update",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.cancel",
    "privateca.operations.delete",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.create",
    "privateca.reusableConfigs.delete",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "privateca.reusableConfigs.update",
    "proximitybeacon.attachments.create",
    "proximitybeacon.attachments.delete",
    "proximitybeacon.attachments.get",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.attach",
    "proximitybeacon.beacons.create",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.list",
    "proximitybeacon.beacons.update",
    "proximitybeacon.namespaces.create",
    "proximitybeacon.namespaces.delete",
    "proximitybeacon.namespaces.get",
    "proximitybeacon.namespaces.list",
    "proximitybeacon.namespaces.update",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "pubsublite.subscriptions.create",
    "pubsublite.subscriptions.delete",
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.subscriptions.setCursor",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.subscriptions.update",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.create",
    "pubsublite.topics.delete",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions",
    "pubsublite.topics.publish",
    "pubsublite.topics.subscribe",
    "pubsublite.topics.update",
    "recaptchaenterprise.assessments.annotate",
    "recaptchaenterprise.assessments.create",
    "recaptchaenterprise.keys.create",
    "recaptchaenterprise.keys.delete",
    "recaptchaenterprise.keys.get",
    "recaptchaenterprise.keys.list",
    "recaptchaenterprise.keys.update",
    "recaptchaenterprise.metrics.get",
    "recaptchaenterprise.projectmetadata.get",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.commitmentUtilizationInsights.update",
    "recommender.computeAddressIdleResourceInsights.get",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceInsights.update",
    "recommender.computeAddressIdleResourceRecommendations.get",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeAddressIdleResourceRecommendations.update",
    "recommender.computeDiskIdleResourceInsights.get",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceInsights.update",
    "recommender.computeDiskIdleResourceRecommendations.get",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceRecommendations.update",
    "recommender.computeFirewallInsights.get",
    "recommender.computeFirewallInsights.list",
    "recommender.computeFirewallInsights.update",
    "recommender.computeImageIdleResourceInsights.get",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceInsights.update",
    "recommender.computeImageIdleResourceRecommendations.get",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeImageIdleResourceRecommendations.update",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
    "recommender.computeInstanceIdleResourceRecommendations.get",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.update",
    "recommender.computeInstanceMachineTypeRecommendations.get",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.update",
    "recommender.iamPolicyInsights.get",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyInsights.update",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamPolicyRecommendations.update",
    "recommender.iamServiceAccountInsights.get",
    "recommender.iamServiceAccountInsights.list",
    "recommender.iamServiceAccountInsights.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.get",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerInsights.update",
    "recommender.loggingProductSuggestionContainerRecommendations.get",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.loggingProductSuggestionContainerRecommendations.update",
    "recommender.monitoringProductSuggestionComputeInsights.get",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeInsights.update",
    "recommender.monitoringProductSuggestionComputeRecommendations.get",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.update",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "recommender.usageCommitmentRecommendations.update",
    "redis.instances.create",
    "redis.instances.delete",
    "redis.instances.export",
    "redis.instances.failover",
    "redis.instances.get",
    "redis.instances.getAuthString",
    "redis.instances.import",
    "redis.instances.list",
    "redis.instances.update",
    "redis.instances.updateAuth",
    "redis.instances.upgrade",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.cancel",
    "redis.operations.delete",
    "redis.operations.get",
    "redis.operations.list",
    "remotebuildexecution.actions.create",
    "remotebuildexecution.actions.delete",
    "remotebuildexecution.actions.get",
    "remotebuildexecution.actions.update",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.botsessions.create",
    "remotebuildexecution.botsessions.update",
    "remotebuildexecution.instances.create",
    "remotebuildexecution.instances.get",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.get",
    "remotebuildexecution.logstreams.update",
    "remotebuildexecution.workerpools.create",
    "remotebuildexecution.workerpools.get",
    "remotebuildexecution.workerpools.list",
    "remotebuildexecution.workerpools.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.projects.move",
    "resourcemanager.projects.update",
    "resourcemanager.resourceTagBindings.create",
    "resourcemanager.resourceTagBindings.delete",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.create",
    "resourcemanager.tagKeys.delete",
    "resourcemanager.tagKeys.get",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagKeys.update",
    "resourcemanager.tagValueBindings.create",
    "resourcemanager.tagValueBindings.delete",
    "resourcemanager.tagValues.create",
    "resourcemanager.tagValues.delete",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "resourcemanager.tagValues.update",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import",
    "retail.userEvents.purge",
    "retail.userEvents.rejoin",
    "run.configurations.get",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.delete",
    "run.revisions.get",
    "run.revisions.list",
    "run.routes.get",
    "run.routes.invoke",
    "run.routes.list",
    "run.services.create",
    "run.services.delete",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list",
    "run.services.update",
    "runtimeconfig.configs.create",
    "runtimeconfig.configs.delete",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.update",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.create",
    "runtimeconfig.variables.delete",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.update",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.create",
    "runtimeconfig.waiters.delete",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.update",
    "secretmanager.locations.get",
    "secretmanager.locations.list",
    "secretmanager.secrets.create",
    "secretmanager.secrets.delete",
    "secretmanager.secrets.get",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.secrets.update",
    "secretmanager.versions.add",
    "secretmanager.versions.destroy",
    "secretmanager.versions.disable",
    "secretmanager.versions.enable",
    "secretmanager.versions.get",
    "secretmanager.versions.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.containerthreatdetectionsettings.update",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.update",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.organizationsettings.update",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securitycentersettings.update",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.securityhealthanalyticssettings.update",
    "securitycenter.sources.get",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "securitycenter.websecurityscannersettings.update",
    "servicebroker.bindingoperations.get",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.create",
    "servicebroker.bindings.delete",
    "servicebroker.bindings.get",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.catalogs.create",
    "servicebroker.catalogs.delete",
    "servicebroker.catalogs.get",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.instanceoperations.get",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.create",
    "servicebroker.instances.delete",
    "servicebroker.instances.get",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "servicebroker.instances.update",
    "serviceconsumermanagement.consumers.get",
    "serviceconsumermanagement.quota.get",
    "serviceconsumermanagement.quota.update",
    "serviceconsumermanagement.tenancyu.addResource",
    "serviceconsumermanagement.tenancyu.create",
    "serviceconsumermanagement.tenancyu.delete",
    "serviceconsumermanagement.tenancyu.list",
    "serviceconsumermanagement.tenancyu.removeResource",
    "servicedirectory.endpoints.create",
    "servicedirectory.endpoints.delete",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.endpoints.update",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.associatePrivateZone",
    "servicedirectory.namespaces.create",
    "servicedirectory.namespaces.delete",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.namespaces.update",
    "servicedirectory.services.create",
    "servicedirectory.services.delete",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve",
    "servicedirectory.services.update",
    "servicemanagement.consumerSettings.get",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.consumerSettings.update",
    "servicemanagement.services.bind",
    "servicemanagement.services.check",
    "servicemanagement.services.create",
    "servicemanagement.services.delete",
    "servicemanagement.services.get",
    "servicemanagement.services.list",
    "servicemanagement.services.quota",
    "servicemanagement.services.report",
    "servicemanagement.services.update",
    "servicenetworking.operations.cancel",
    "servicenetworking.operations.delete",
    "servicenetworking.operations.get",
    "servicenetworking.operations.list",
    "servicenetworking.services.addSubnetwork",
    "servicenetworking.services.get",
    "serviceusage.apiKeys.regenerate",
    "serviceusage.apiKeys.revert",
    "serviceusage.operations.cancel",
    "serviceusage.operations.delete",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.quotas.update",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use",
    "source.repos.get",
    "source.repos.getIamPolicy",
    "source.repos.list",
    "source.repos.update",
    "spanner.backupOperations.cancel",
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.create",
    "spanner.backups.delete",
    "spanner.backups.get",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.backups.restoreDatabase",
    "spanner.backups.update",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.create",
    "spanner.databases.createBackup",
    "spanner.databases.drop",
    "spanner.databases.get",
    "spanner.databases.getDdl",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.update",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.cancel",
    "spanner.instanceOperations.delete",
    "spanner.instanceOperations.get",
    "spanner.instanceOperations.list",
    "spanner.instances.create",
    "spanner.instances.delete",
    "spanner.instances.get",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.instances.update",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list",
    "stackdriver.projects.get",
    "stackdriver.resourceMetadata.write",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.list",
    "storage.hmacKeys.create",
    "storage.hmacKeys.delete",
    "storage.hmacKeys.get",
    "storage.hmacKeys.list",
    "storage.hmacKeys.update",
    "storagetransfer.jobs.create",
    "storagetransfer.jobs.delete",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.jobs.run",
    "storagetransfer.jobs.update",
    "storagetransfer.operations.cancel",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.operations.pause",
    "storagetransfer.operations.resume",
    "storagetransfer.projects.getServiceAccount",
    "subscribewithgoogledeveloper.tools.get",
    "tpu.acceleratortypes.get",
    "tpu.acceleratortypes.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.create",
    "tpu.nodes.delete",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.nodes.reimage",
    "tpu.nodes.reset",
    "tpu.nodes.start",
    "tpu.nodes.stop",
    "tpu.operations.get",
    "tpu.operations.list",
    "tpu.tensorflowversions.get",
    "tpu.tensorflowversions.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics",
    "transcoder.jobTemplates.create",
    "transcoder.jobTemplates.delete",
    "transcoder.jobTemplates.get",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.create",
    "transcoder.jobs.delete",
    "transcoder.jobs.get",
    "transcoder.jobs.list",
    "vmmigration.deployments.create",
    "vmmigration.deployments.get",
    "vmmigration.deployments.list",
    "vmwareengine.services.use",
    "vmwareengine.services.view",
    "vpcaccess.connectors.create",
    "vpcaccess.connectors.delete",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.connectors.use",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list",
    "workflows.executions.cancel",
    "workflows.executions.create",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.cancel",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.create",
    "workflows.workflows.delete",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list",
    "workflows.workflows.update"
   ]
  },
  {
   "name": "roles/earthengine.writer",
   "role": {
    "description": "Writer of all Earth Engine resources",
    "etag": "AA==",
    "name": "roles/earthengine.writer",
    "stage": "BETA",
    "title": "Earth Engine Resource Writer"
   },
   "included_permissions": [
    "earthengine.assets.create",
    "earthengine.assets.delete",
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.assets.update",
    "earthengine.computations.create",
    "earthengine.exports.create",
    "earthengine.filmstripthumbnails.create",
    "earthengine.filmstripthumbnails.get",
    "earthengine.imports.create",
    "earthengine.maps.create",
    "earthengine.maps.get",
    "earthengine.operations.delete",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.operations.update",
    "earthengine.tables.create",
    "earthengine.tables.get",
    "earthengine.thumbnails.create",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.create",
    "earthengine.videothumbnails.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iap.tunnelResourceAccessor",
   "role": {
    "description": "Access Tunnel resources which use Identity-Aware Proxy",
    "etag": "AA==",
    "name": "roles/iap.tunnelResourceAccessor",
    "stage": "GA",
    "title": "IAP-secured Tunnel User"
   },
   "included_permissions": [
    "iap.tunnelInstances.accessViaIAP"
   ]
  },
  {
   "name": "roles/firebase.analyticsViewer",
   "role": {
    "description": "Read access to Google Analytics for Firebase.",
    "etag": "AA==",
    "name": "roles/firebase.analyticsViewer",
    "stage": "GA",
    "title": "Firebase Analytics Viewer"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseextensions.configs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebase.appDistributionSdkServiceAgent",
   "role": {
    "description": "Read and write access to Firebase App Distribution with the Admin SDK",
    "etag": "AA==",
    "name": "roles/firebase.appDistributionSdkServiceAgent",
    "stage": "GA",
    "title": "Firebase App Distribution Admin SDK Service Agent"
   },
   "included_permissions": [
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update"
   ]
  },
  {
   "name": "roles/firebase.developAdmin",
   "role": {
    "description": "Full access to Firebase Develop products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.developAdmin",
    "stage": "GA",
    "title": "Firebase Develop Admin"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.setIamPolicy",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.locations.setIamPolicy",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.setIamPolicy",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.list",
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudnotifications.activities.list",
    "datastore.databases.create",
    "datastore.databases.delete",
    "datastore.databases.export",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.import",
    "datastore.databases.list",
    "datastore.databases.setIamPolicy",
    "datastore.databases.update",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "datastore.locations.get",
    "datastore.locations.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.namespaces.setIamPolicy",
    "datastore.operations.cancel",
    "datastore.operations.delete",
    "datastore.operations.get",
    "datastore.operations.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "errorreporting.groups.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebaserules.rulesets.test",
    "firebasestorage.buckets.addFirebase",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "firebasestorage.buckets.removeFirebase",
    "logging.logEntries.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "runtimeconfig.configs.create",
    "runtimeconfig.configs.delete",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.update",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.create",
    "runtimeconfig.variables.delete",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.update",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.create",
    "runtimeconfig.waiters.delete",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.update",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/firebase.developViewer",
   "role": {
    "description": "Read access to Firebase Develop products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.developViewer",
    "stage": "GA",
    "title": "Firebase Develop Viewer"
   },
   "included_permissions": [
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.datasets.get",
    "automl.datasets.list",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.list",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.get",
    "automl.models.list",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.list",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudnotifications.activities.list",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "errorreporting.groups.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseauth.configs.get",
    "firebaseauth.users.get",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaserules.releases.get",
    "firebaserules.releases.list",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "logging.logEntries.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/firebase.qualityAdmin",
   "role": {
    "description": "Full access to Firebase Quality products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.qualityAdmin",
    "stage": "GA",
    "title": "Firebase Quality Admin"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update",
    "firebasecrash.issues.update",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.config.update",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.issues.update",
    "firebasecrashlytics.sessions.get",
    "firebaseextensions.configs.list",
    "firebaseperformance.config.create",
    "firebaseperformance.config.delete",
    "firebaseperformance.config.update",
    "firebaseperformance.data.get",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/firebase.growthAdmin",
   "role": {
    "description": "Full access to Firebase Grow products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.growthAdmin",
    "stage": "GA",
    "title": "Firebase Grow Admin"
   },
   "included_permissions": [
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.list",
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "cloudmessaging.messages.create",
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.create",
    "firebaseabt.experiments.delete",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.experiments.update",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.destinations.update",
    "firebasedynamiclinks.domains.create",
    "firebasedynamiclinks.domains.delete",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.domains.update",
    "firebasedynamiclinks.links.create",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.links.update",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.list",
    "firebaseinappmessaging.campaigns.create",
    "firebaseinappmessaging.campaigns.delete",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseinappmessaging.campaigns.update",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "firebasepredictions.predictions.create",
    "firebasepredictions.predictions.delete",
    "firebasepredictions.predictions.list",
    "firebasepredictions.predictions.update",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/identityplatform.admin",
   "role": {
    "description": "Full access to Identity Platform resources.",
    "etag": "AA==",
    "name": "roles/identityplatform.admin",
    "stage": "BETA",
    "title": "Identity Platform Admin"
   },
   "included_permissions": [
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "identityplatform.workloadPoolProviders.create",
    "identityplatform.workloadPoolProviders.delete",
    "identityplatform.workloadPoolProviders.get",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPoolProviders.undelete",
    "identityplatform.workloadPoolProviders.update",
    "identityplatform.workloadPools.create",
    "identityplatform.workloadPools.delete",
    "identityplatform.workloadPools.get",
    "identityplatform.workloadPools.list",
    "identityplatform.workloadPools.undelete",
    "identityplatform.workloadPools.update"
   ]
  },
  {
   "name": "roles/firebase.growthViewer",
   "role": {
    "description": "Read access to Firebase Grow products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.growthViewer",
    "stage": "GA",
    "title": "Firebase Grow Viewer"
   },
   "included_permissions": [
    "cloudconfig.configs.get",
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.list",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasepredictions.predictions.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/identityplatform.viewer",
   "role": {
    "description": "Read access to Identity Platform resources.",
    "etag": "AA==",
    "name": "roles/identityplatform.viewer",
    "stage": "BETA",
    "title": "Identity Platform Viewer"
   },
   "included_permissions": [
    "firebaseauth.configs.get",
    "firebaseauth.users.get",
    "identityplatform.workloadPoolProviders.get",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPools.get",
    "identityplatform.workloadPools.list"
   ]
  },
  {
   "name": "roles/firebase.managementServiceAgent",
   "role": {
    "description": "Access to create new service agents for Firebase projects; assign roles to service agents; provision GCP resources as required by Firebase services.",
    "etag": "AA==",
    "name": "roles/firebase.managementServiceAgent",
    "stage": "GA",
    "title": "Firebase Service Management Service Agent"
   },
   "included_permissions": [
    "apikeys.keys.create",
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.update",
    "appengine.applications.create",
    "appengine.applications.get",
    "appengine.applications.update",
    "appengine.operations.get",
    "appengine.services.list",
    "clientauthconfig.brands.create",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.create",
    "clientauthconfig.clients.getWithSecret",
    "clientauthconfig.clients.list",
    "clientauthconfig.clients.update",
    "firebase.clients.create",
    "firebase.clients.delete",
    "firebase.clients.get",
    "firebase.projects.delete",
    "firebase.projects.get",
    "firebase.projects.update",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.update",
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.rulesets.create",
    "iam.roles.get",
    "iam.serviceAccounts.create",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.setIamPolicy",
    "resourcemanager.projects.update",
    "servicemanagement.services.bind",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.setIamPolicy"
   ]
  },
  {
   "name": "roles/identitytoolkit.admin",
   "role": {
    "description": "Full access to Identity Toolkit resources.",
    "etag": "AA==",
    "name": "roles/identitytoolkit.admin",
    "stage": "GA",
    "title": "Identity Toolkit Admin"
   },
   "included_permissions": [
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update"
   ]
  },
  {
   "name": "roles/lifesciences.serviceAgent",
   "role": {
    "description": "Gives Cloud Life Sciences Service Account access to compute resources. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/lifesciences.serviceAgent",
    "stage": "GA",
    "title": "Cloud Life Sciences Service Agent"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "iam.serviceAccounts.actAs",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/firebaseabt.viewer",
   "role": {
    "description": "Read-only access to Firebase A/B Testing resources.",
    "etag": "AA==",
    "name": "roles/firebaseabt.viewer",
    "stage": "BETA",
    "title": "Firebase A/B Testing Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.projectmetadata.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseauth.admin",
   "role": {
    "description": "Full read/write access to Firebase Authentication resources.",
    "etag": "AA==",
    "name": "roles/firebaseauth.admin",
    "stage": "GA",
    "title": "Firebase Authentication Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/lifesciences.viewer",
   "role": {
    "description": "Access to read Cloud Life Sciences resources.",
    "etag": "AA==",
    "name": "roles/lifesciences.viewer",
    "stage": "BETA",
    "title": "Cloud Life Sciences Viewer"
   },
   "included_permissions": [
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/integrations.apigeeIntegrationAdmin",
   "role": {
    "description": "A user that has full access (CRUD) to all Apigee integrations.",
    "etag": "AA==",
    "name": "roles/integrations.apigeeIntegrationAdmin",
    "title": "Apigee Integration Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseappdistro.viewer",
   "role": {
    "description": "Read-only access to Firebase App Distribution resources.",
    "etag": "AA==",
    "name": "roles/firebaseappdistro.viewer",
    "stage": "BETA",
    "title": "Firebase App Distribution Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebase.qualityViewer",
   "role": {
    "description": "Read access to Firebase Quality products and Analytics.",
    "etag": "AA==",
    "name": "roles/firebase.qualityViewer",
    "stage": "GA",
    "title": "Firebase Quality Viewer"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.sessions.get",
    "firebaseextensions.configs.list",
    "firebaseperformance.data.get",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/kuberun.eventsControlPlaneServiceAgent",
   "role": {
    "description": "Service account role used to setup authentication for the control plane used by KubeRun Events.",
    "etag": "AA==",
    "name": "roles/kuberun.eventsControlPlaneServiceAgent",
    "stage": "GA",
    "title": "KubeRun Events Control Plane Service Agent"
   },
   "included_permissions": [
    "cloudscheduler.jobs.create",
    "cloudscheduler.jobs.delete",
    "cloudscheduler.jobs.get",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.setIamPolicy",
    "resourcemanager.projects.get",
    "storage.buckets.get",
    "storage.buckets.update"
   ]
  },
  {
   "name": "roles/firebase.sdkAdminServiceAgent",
   "role": {
    "description": "Read and write access to Firebase products available in the Admin SDK",
    "etag": "AA==",
    "name": "roles/firebase.sdkAdminServiceAgent",
    "stage": "GA",
    "title": "Firebase Admin SDK Administrator Service Agent"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "cloudmessaging.messages.create",
    "datastore.databases.get",
    "datastore.databases.list",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "firebase.clients.create",
    "firebase.clients.delete",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.clients.update",
    "firebase.projects.get",
    "firebase.projects.update",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "firebaserules.releases.get",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "resourcemanager.projects.update",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.list",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/firebasedatabase.admin",
   "role": {
    "description": "Full read/write access to Firebase Realtime Database resources.",
    "etag": "AA==",
    "name": "roles/firebasedatabase.admin",
    "stage": "GA",
    "title": "Firebase Realtime Database Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/kuberun.eventsDataPlaneServiceAgent",
   "role": {
    "description": "Service account role used to setup authentication for the data plane used by KubeRun Events.",
    "etag": "AA==",
    "name": "roles/kuberun.eventsDataPlaneServiceAgent",
    "stage": "GA",
    "title": "KubeRun Events Data Plane Service Agent"
   },
   "included_permissions": [
    "cloudtrace.traces.patch",
    "monitoring.timeSeries.create",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.get",
    "pubsub.topics.get",
    "pubsub.topics.publish",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/logging.logWriter",
   "role": {
    "description": "Access to write logs.",
    "etag": "AA==",
    "name": "roles/logging.logWriter",
    "stage": "GA",
    "title": "Logs Writer"
   },
   "included_permissions": [
    "logging.logEntries.create"
   ]
  },
  {
   "name": "roles/firebase.sdkProvisioningServiceAgent",
   "role": {
    "description": "Access to provision apps with the Admin SDK.",
    "etag": "AA==",
    "name": "roles/firebase.sdkProvisioningServiceAgent",
    "stage": "GA",
    "title": "Firebase SDK Provisioning Service Agent"
   },
   "included_permissions": [
    "apikeys.keys.list",
    "clientauthconfig.clients.list",
    "cloudmessaging.messages.create",
    "firebase.clients.create",
    "servicemanagement.services.bind",
    "serviceusage.services.enable"
   ]
  },
  {
   "name": "roles/lifesciences.admin",
   "role": {
    "description": "Full control of Cloud Life Sciences resources.",
    "etag": "AA==",
    "name": "roles/lifesciences.admin",
    "stage": "BETA",
    "title": "Cloud Life Sciences Admin"
   },
   "included_permissions": [
    "lifesciences.operations.cancel",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "lifesciences.workflows.run"
   ]
  },
  {
   "name": "roles/firebase.viewer",
   "role": {
    "description": "Read-only access to Firebase products.",
    "etag": "AA==",
    "name": "roles/firebase.viewer",
    "stage": "GA",
    "title": "Firebase Viewer"
   },
   "included_permissions": [
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.datasets.get",
    "automl.datasets.list",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.list",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.get",
    "automl.models.list",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "cloudconfig.configs.get",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.list",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudnotifications.activities.list",
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.get",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "errorreporting.groups.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "firebaseauth.configs.get",
    "firebaseauth.users.get",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.sessions.get",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebaseperformance.data.get",
    "firebasepredictions.predictions.list",
    "firebaserules.releases.get",
    "firebaserules.releases.list",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "logging.logEntries.list",
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/firebasehosting.admin",
   "role": {
    "description": "Full read/write access to Firebase Hosting resources.",
    "etag": "AA==",
    "name": "roles/firebasehosting.admin",
    "stage": "GA",
    "title": "Firebase Hosting Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/logging.serviceAgent",
   "role": {
    "description": "Grants a Cloud Logging Service Account the ability to create Datasets and manage BigQuery Authorized Views inside those Datasets.",
    "etag": "AA==",
    "name": "roles/logging.serviceAgent",
    "stage": "GA",
    "title": "Cloud Logging Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create"
   ]
  },
  {
   "name": "roles/logging.viewAccessor",
   "role": {
    "description": "Ability to read logs in a view.",
    "etag": "AA==",
    "name": "roles/logging.viewAccessor",
    "stage": "GA",
    "title": "Logs View Accessor"
   },
   "included_permissions": [
    "logging.logEntries.download",
    "logging.views.access",
    "logging.views.listLogs",
    "logging.views.listResourceKeys",
    "logging.views.listResourceValues"
   ]
  },
  {
   "name": "roles/firebasehosting.viewer",
   "role": {
    "description": "Read-only access to Firebase Hosting resources.",
    "etag": "AA==",
    "name": "roles/firebasehosting.viewer",
    "stage": "GA",
    "title": "Firebase Hosting Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseabt.admin",
   "role": {
    "description": "Full read/write access to Firebase A/B Testing resources.",
    "etag": "AA==",
    "name": "roles/firebaseabt.admin",
    "stage": "BETA",
    "title": "Firebase A/B Testing Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.create",
    "firebaseabt.experiments.delete",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.experiments.update",
    "firebaseabt.projectmetadata.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/identitytoolkit.viewer",
   "role": {
    "description": "Read access to Identity Toolkit resources.",
    "etag": "AA==",
    "name": "roles/identitytoolkit.viewer",
    "stage": "GA",
    "title": "Identity Toolkit Viewer"
   },
   "included_permissions": [
    "firebaseauth.configs.get",
    "firebaseauth.users.get"
   ]
  },
  {
   "name": "roles/firebaseappdistro.admin",
   "role": {
    "description": "Full read/write access to Firebase App Distribution resources.",
    "etag": "AA==",
    "name": "roles/firebaseappdistro.admin",
    "stage": "BETA",
    "title": "Firebase App Distribution Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseauth.viewer",
   "role": {
    "description": "Read-only access to Firebase Authentication resources.",
    "etag": "AA==",
    "name": "roles/firebaseauth.viewer",
    "stage": "GA",
    "title": "Firebase Authentication Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseauth.configs.get",
    "firebaseauth.users.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasecrash.symbolMappingsAdmin",
   "role": {
    "description": "Full read/write access to symbol mapping file resources for Firebase Crash Reporting.",
    "etag": "AA==",
    "name": "roles/firebasecrash.symbolMappingsAdmin",
    "stage": "GA",
    "title": "Firebase Crash Symbol Uploader"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/gameservices.serviceAgent",
   "role": {
    "description": "Gives Game Services Service Account access to GCP resources.",
    "etag": "AA==",
    "name": "roles/gameservices.serviceAgent",
    "stage": "GA",
    "title": "Game Services Service Agent"
   },
   "included_permissions": [
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/lifesciences.workflowsRunner",
   "role": {
    "description": "Full access to operate on Cloud Life Sciences workflows.",
    "etag": "AA==",
    "name": "roles/lifesciences.workflowsRunner",
    "stage": "BETA",
    "title": "Cloud Life Sciences Workflows Runner"
   },
   "included_permissions": [
    "lifesciences.operations.cancel",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "lifesciences.workflows.run"
   ]
  },
  {
   "name": "roles/firebasecrashlytics.admin",
   "role": {
    "description": "Full read/write access to Firebase Crashlytics resources.",
    "etag": "AA==",
    "name": "roles/firebasecrashlytics.admin",
    "stage": "GA",
    "title": "Firebase Crashlytics Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.config.update",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.issues.update",
    "firebasecrashlytics.sessions.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/logging.admin",
   "role": {
    "description": "Access to all logging permissions, and dependent permissions.",
    "etag": "AA==",
    "name": "roles/logging.admin",
    "stage": "GA",
    "title": "Logging Admin"
   },
   "included_permissions": [
    "logging.buckets.create",
    "logging.buckets.delete",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.buckets.undelete",
    "logging.buckets.update",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.create",
    "logging.exclusions.delete",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.exclusions.update",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logEntries.download",
    "logging.logEntries.list",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.delete",
    "logging.logs.list",
    "logging.notificationRules.create",
    "logging.notificationRules.delete",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.notificationRules.update",
    "logging.privateLogEntries.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.share",
    "logging.queries.update",
    "logging.queries.updateShared",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.sinks.update",
    "logging.usage.get",
    "logging.views.access",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.listLogs",
    "logging.views.listResourceKeys",
    "logging.views.listResourceValues",
    "logging.views.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasecrashlytics.viewer",
   "role": {
    "description": "Read-only access to Firebase Crashlytics resources.",
    "etag": "AA==",
    "name": "roles/firebasecrashlytics.viewer",
    "stage": "GA",
    "title": "Firebase Crashlytics Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.sessions.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/logging.bucketWriter",
   "role": {
    "description": "Ability to write logs to a log bucket.",
    "etag": "AA==",
    "name": "roles/logging.bucketWriter",
    "stage": "GA",
    "title": "Logs Bucket Writer"
   },
   "included_permissions": [
    "logging.buckets.write"
   ]
  },
  {
   "name": "roles/logging.configWriter",
   "role": {
    "description": "Access to configure log exporting and metrics.",
    "etag": "AA==",
    "name": "roles/logging.configWriter",
    "stage": "GA",
    "title": "Logs Configuration Writer"
   },
   "included_permissions": [
    "logging.buckets.create",
    "logging.buckets.delete",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.buckets.undelete",
    "logging.buckets.update",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.create",
    "logging.exclusions.delete",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.exclusions.update",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.sinks.update",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasenotifications.admin",
   "role": {
    "description": "Full read/write access to Firebase Cloud Messaging resources.",
    "etag": "AA==",
    "name": "roles/firebasenotifications.admin",
    "stage": "GA",
    "title": "Firebase Cloud Messaging Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasedatabase.viewer",
   "role": {
    "description": "Read-only access to Firebase Realtime Database resources.",
    "etag": "AA==",
    "name": "roles/firebasedatabase.viewer",
    "stage": "GA",
    "title": "Firebase Realtime Database Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasedynamiclinks.admin",
   "role": {
    "description": "Full read/write access to Firebase Dynamic Links resources.",
    "etag": "AA==",
    "name": "roles/firebasedynamiclinks.admin",
    "stage": "GA",
    "title": "Firebase Dynamic Links Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.destinations.update",
    "firebasedynamiclinks.domains.create",
    "firebasedynamiclinks.domains.delete",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.domains.update",
    "firebasedynamiclinks.links.create",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.links.update",
    "firebasedynamiclinks.stats.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/logging.privateLogViewer",
   "role": {
    "description": "Access to view all logs, including logs with private contents. This role applies only to the _Required and _Default buckets.",
    "etag": "AA==",
    "name": "roles/logging.privateLogViewer",
    "stage": "GA",
    "title": "Private Logs Viewer"
   },
   "included_permissions": [
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.privateLogEntries.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/firebasedynamiclinks.viewer",
   "role": {
    "description": "Read-only access to Firebase Dynamic Links resources.",
    "etag": "AA==",
    "name": "roles/firebasedynamiclinks.viewer",
    "stage": "GA",
    "title": "Firebase Dynamic Links Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.stats.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/lifesciences.editor",
   "role": {
    "description": "Access to read and edit Cloud Life Sciences resources.",
    "etag": "AA==",
    "name": "roles/lifesciences.editor",
    "stage": "BETA",
    "title": "Cloud Life Sciences Editor"
   },
   "included_permissions": [
    "lifesciences.operations.cancel",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "lifesciences.workflows.run"
   ]
  },
  {
   "name": "roles/genomics.serviceAgent",
   "role": {
    "description": "Gives Genomics Service Account access to compute resources. Includes access to service accounts.",
    "etag": "AA==",
    "name": "roles/genomics.serviceAgent",
    "stage": "GA",
    "title": "Genomics Service Agent"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "iam.serviceAccounts.actAs",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/firebasestorage.admin",
   "role": {
    "description": "Full management of Cloud Storage for Firebase.",
    "etag": "AA==",
    "name": "roles/firebasestorage.admin",
    "stage": "BETA",
    "title": "Cloud Storage for Firebase Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasestorage.buckets.addFirebase",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "firebasestorage.buckets.removeFirebase",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasestorage.serviceAgent",
   "role": {
    "description": "Access to Cloud Storage for Firebase through API and SDK.",
    "etag": "AA==",
    "name": "roles/firebasestorage.serviceAgent",
    "stage": "GA",
    "title": "Cloud Storage for Firebase Service Agent"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/firebasestorage.viewer",
   "role": {
    "description": "Read-only access for Cloud Storage for Firebase.",
    "etag": "AA==",
    "name": "roles/firebasestorage.viewer",
    "stage": "BETA",
    "title": "Cloud Storage for Firebase Viewer"
   },
   "included_permissions": [
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/logging.viewer",
   "role": {
    "description": "Access to view logs, except for logs with private contents.",
    "etag": "AA==",
    "name": "roles/logging.viewer",
    "stage": "GA",
    "title": "Logs Viewer"
   },
   "included_permissions": [
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/managedidentities.admin",
   "role": {
    "description": "Full access to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a project-level.",
    "etag": "AA==",
    "name": "roles/managedidentities.admin",
    "stage": "GA",
    "title": "Google Cloud Managed Identities Admin"
   },
   "included_permissions": [
    "managedidentities.domains.attachTrust",
    "managedidentities.domains.create",
    "managedidentities.domains.delete",
    "managedidentities.domains.detachTrust",
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.domains.reconfigureTrust",
    "managedidentities.domains.resetpassword",
    "managedidentities.domains.setIamPolicy",
    "managedidentities.domains.update",
    "managedidentities.domains.updateLDAPSSettings",
    "managedidentities.domains.validateTrust",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.cancel",
    "managedidentities.operations.delete",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gsuiteaddons.reader",
   "role": {
    "description": "Read-only access to Google Workspace Add-ons resources",
    "etag": "AA==",
    "name": "roles/gsuiteaddons.reader",
    "stage": "GA",
    "title": "Google Workspace Add-ons Reader"
   },
   "included_permissions": [
    "gsuiteaddons.authorizations.get",
    "gsuiteaddons.deployments.get",
    "gsuiteaddons.deployments.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/managedidentities.domainAdmin",
   "role": {
    "description": "Read-Update-Delete to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a resource (domain) level.",
    "etag": "AA==",
    "name": "roles/managedidentities.domainAdmin",
    "stage": "GA",
    "title": "Google Cloud Managed Identities Domain Admin"
   },
   "included_permissions": [
    "managedidentities.domains.attachTrust",
    "managedidentities.domains.delete",
    "managedidentities.domains.detachTrust",
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.reconfigureTrust",
    "managedidentities.domains.resetpassword",
    "managedidentities.domains.update",
    "managedidentities.domains.updateLDAPSSettings",
    "managedidentities.domains.validateTrust",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firewallinsights.serviceAgent",
   "role": {
    "description": "Gives Cloud Firewall Insights service agent permissions to retrieve Firewall, VM and route resources on user behalf.",
    "etag": "AA==",
    "name": "roles/firewallinsights.serviceAgent",
    "stage": "GA",
    "title": "Cloud Firewall Insights Service Agent"
   },
   "included_permissions": [
    "compute.backendServices.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.list",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.list",
    "compute.instanceGroups.list",
    "compute.instances.get",
    "compute.instances.list",
    "compute.networks.list",
    "compute.projects.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.subnetworks.list",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.list",
    "compute.targetPools.list",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.list",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.list"
   ]
  },
  {
   "name": "roles/ml.viewer",
   "role": {
    "description": "Read-only access to Cloud ML Engine resources.",
    "etag": "AA==",
    "name": "roles/ml.viewer",
    "stage": "GA",
    "title": "ML Engine Viewer"
   },
   "included_permissions": [
    "ml.jobs.get",
    "ml.jobs.list",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.get",
    "ml.models.list",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.trials.get",
    "ml.trials.list",
    "ml.versions.get",
    "ml.versions.list",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/genomics.viewer",
   "role": {
    "description": "Access to view genomics datasets and operations.",
    "etag": "AA==",
    "name": "roles/genomics.viewer",
    "stage": "GA",
    "title": "Genomics Viewer"
   },
   "included_permissions": [
    "genomics.datasets.get",
    "genomics.datasets.list",
    "genomics.operations.get",
    "genomics.operations.list"
   ]
  },
  {
   "name": "roles/managedidentities.serviceAgent",
   "role": {
    "description": "Gives Managed Identities service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/managedidentities.serviceAgent",
    "stage": "GA",
    "title": "Cloud Managed Identities Service Agent"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.routes.list",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.list",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.annotationEditor",
   "role": {
    "description": "Create, delete, update, read and list annotations.",
    "etag": "AA==",
    "name": "roles/healthcare.annotationEditor",
    "stage": "GA",
    "title": "Healthcare Annotation Editor"
   },
   "included_permissions": [
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.list",
    "healthcare.annotations.create",
    "healthcare.annotations.delete",
    "healthcare.annotations.get",
    "healthcare.annotations.list",
    "healthcare.annotations.update",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gkehub.admin",
   "role": {
    "description": "Full access to GKE Hub resources.",
    "etag": "AA==",
    "name": "roles/gkehub.admin",
    "stage": "GA",
    "title": "GKE Hub Admin"
   },
   "included_permissions": [
    "gkehub.features.create",
    "gkehub.features.delete",
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.features.setIamPolicy",
    "gkehub.features.update",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.create",
    "gkehub.memberships.delete",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.memberships.setIamPolicy",
    "gkehub.memberships.update",
    "gkehub.operations.cancel",
    "gkehub.operations.delete",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/managedidentities.viewer",
   "role": {
    "description": "Read-only access to Google Cloud Managed Identities Domains and related resources.",
    "etag": "AA==",
    "name": "roles/managedidentities.viewer",
    "stage": "GA",
    "title": "Google Cloud Managed Identities Viewer"
   },
   "included_permissions": [
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseinappmessaging.admin",
   "role": {
    "description": "Full read/write access to Firebase In-App Messaging resources.",
    "etag": "AA==",
    "name": "roles/firebaseinappmessaging.admin",
    "stage": "BETA",
    "title": "Firebase In-App Messaging Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseinappmessaging.campaigns.create",
    "firebaseinappmessaging.campaigns.delete",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseinappmessaging.campaigns.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/mediaasset.serviceAgent",
   "role": {
    "description": "Downloads and uploads media files from and to customer GCS buckets.",
    "etag": "AA==",
    "name": "roles/mediaasset.serviceAgent",
    "stage": "GA",
    "title": "Media Asset Service Agent"
   },
   "included_permissions": [
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get"
   ]
  },
  {
   "name": "roles/monitoring.editor",
   "role": {
    "description": "Read/write access to all monitoring data and configuration.",
    "etag": "AA==",
    "name": "roles/monitoring.editor",
    "stage": "GA",
    "title": "Monitoring Editor"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "monitoring.alertPolicies.create",
    "monitoring.alertPolicies.delete",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.alertPolicies.update",
    "monitoring.dashboards.create",
    "monitoring.dashboards.delete",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.dashboards.update",
    "monitoring.groups.create",
    "monitoring.groups.delete",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.groups.update",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.delete",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.create",
    "monitoring.notificationChannels.delete",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.notificationChannels.sendVerificationCode",
    "monitoring.notificationChannels.update",
    "monitoring.notificationChannels.verify",
    "monitoring.publicWidgets.create",
    "monitoring.publicWidgets.delete",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.publicWidgets.update",
    "monitoring.services.create",
    "monitoring.services.delete",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.services.update",
    "monitoring.slos.create",
    "monitoring.slos.delete",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.slos.update",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.create",
    "monitoring.uptimeCheckConfigs.delete",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "monitoring.uptimeCheckConfigs.update",
    "opsconfigmonitoring.resourceMetadata.write",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.enable",
    "stackdriver.projects.edit",
    "stackdriver.projects.get",
    "stackdriver.resourceMetadata.write"
   ]
  },
  {
   "name": "roles/healthcare.attributeDefinitionReader",
   "role": {
    "description": "Read AttributeDefinition objects in a consent store.",
    "etag": "AA==",
    "name": "roles/healthcare.attributeDefinitionReader",
    "stage": "GA",
    "title": "Healthcare Attribute Definition Reader"
   },
   "included_permissions": [
    "healthcare.attributeDefinitions.get",
    "healthcare.attributeDefinitions.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.attributeDefinitionEditor",
   "role": {
    "description": "Edit AttributeDefinition objects.",
    "etag": "AA==",
    "name": "roles/healthcare.attributeDefinitionEditor",
    "stage": "GA",
    "title": "Healthcare Attribute Definition Editor"
   },
   "included_permissions": [
    "healthcare.attributeDefinitions.create",
    "healthcare.attributeDefinitions.delete",
    "healthcare.attributeDefinitions.get",
    "healthcare.attributeDefinitions.list",
    "healthcare.attributeDefinitions.update",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseinappmessaging.viewer",
   "role": {
    "description": "Read-only access to Firebase In-App Messaging resources.",
    "etag": "AA==",
    "name": "roles/firebaseinappmessaging.viewer",
    "stage": "BETA",
    "title": "Firebase In-App Messaging Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/memcache.editor",
   "role": {
    "description": "Read-Write access to Memcached instances and related resources.",
    "etag": "AA==",
    "name": "roles/memcache.editor",
    "stage": "GA",
    "title": "Cloud Memorystore Memcached Editor"
   },
   "included_permissions": [
    "memcache.instances.applyParameters",
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.instances.update",
    "memcache.instances.updateParameters",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.cancel",
    "memcache.operations.delete",
    "memcache.operations.get",
    "memcache.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseml.admin",
   "role": {
    "description": "Full read/write access to Firebase ML Kit resources.",
    "etag": "AA==",
    "name": "roles/firebaseml.admin",
    "stage": "BETA",
    "title": "Firebase ML Kit Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gsuiteaddons.developer",
   "role": {
    "description": "Full access to Google Workspace Add-ons resources",
    "etag": "AA==",
    "name": "roles/gsuiteaddons.developer",
    "stage": "GA",
    "title": "Google Workspace Add-ons Developer"
   },
   "included_permissions": [
    "gsuiteaddons.authorizations.get",
    "gsuiteaddons.deployments.create",
    "gsuiteaddons.deployments.delete",
    "gsuiteaddons.deployments.execute",
    "gsuiteaddons.deployments.get",
    "gsuiteaddons.deployments.install",
    "gsuiteaddons.deployments.installStatus",
    "gsuiteaddons.deployments.list",
    "gsuiteaddons.deployments.uninstall",
    "gsuiteaddons.deployments.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/memcache.serviceAgent",
   "role": {
    "description": "Gives Cloud Memorystore Memcached service account access to managed resource",
    "etag": "AA==",
    "name": "roles/memcache.serviceAgent",
    "stage": "GA",
    "title": "Cloud Memorystore Memcached Service Agent"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.routes.get",
    "compute.routes.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseml.viewer",
   "role": {
    "description": "Read-only access to Firebase ML Kit resources.",
    "etag": "AA==",
    "name": "roles/firebaseml.viewer",
    "stage": "BETA",
    "title": "Firebase ML Kit Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.uptimeCheckConfigEditor",
   "role": {
    "description": "Read/write access to uptime check configurations.",
    "etag": "AA==",
    "name": "roles/monitoring.uptimeCheckConfigEditor",
    "stage": "BETA",
    "title": "Monitoring Uptime Check Configuration Editor"
   },
   "included_permissions": [
    "monitoring.uptimeCheckConfigs.create",
    "monitoring.uptimeCheckConfigs.delete",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "monitoring.uptimeCheckConfigs.update"
   ]
  },
  {
   "name": "roles/memcache.viewer",
   "role": {
    "description": "Read-only access to Memcached instances and related resources.",
    "etag": "AA==",
    "name": "roles/memcache.viewer",
    "stage": "GA",
    "title": "Cloud Memorystore Memcached Viewer"
   },
   "included_permissions": [
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.get",
    "memcache.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.uptimeCheckConfigViewer",
   "role": {
    "description": "Read-only access to uptime check configurations.",
    "etag": "AA==",
    "name": "roles/monitoring.uptimeCheckConfigViewer",
    "stage": "BETA",
    "title": "Monitoring Uptime Check Configuration Viewer"
   },
   "included_permissions": [
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list"
   ]
  },
  {
   "name": "roles/firebasemods.serviceAgent",
   "role": {
    "description": "Grants Firebase Extensions API Service Account access to manage resources.",
    "etag": "AA==",
    "name": "roles/firebasemods.serviceAgent",
    "stage": "GA",
    "title": "Firebase Extensions API Service Agent"
   },
   "included_permissions": [
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.setIamPolicy",
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.deployments.cancelPreview",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.stop",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "run.services.getIamPolicy",
    "run.services.setIamPolicy",
    "serviceusage.quotas.get",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/meshconfig.serviceAgent",
   "role": {
    "description": "Apply mesh configuration",
    "etag": "AA==",
    "name": "roles/meshconfig.serviceAgent",
    "stage": "GA",
    "title": "Mesh Config Service Agent"
   },
   "included_permissions": [
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalOperations.get",
    "compute.globalOperations.list",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.subnetworks.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.update",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.update",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.update"
   ]
  },
  {
   "name": "roles/healthcare.consentStoreViewer",
   "role": {
    "description": "List Consent Stores in a dataset.",
    "etag": "AA==",
    "name": "roles/healthcare.consentStoreViewer",
    "stage": "GA",
    "title": "Healthcare Consent Store Viewer"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.datasetAdmin",
   "role": {
    "description": "Administer Healthcare Datasets.",
    "etag": "AA==",
    "name": "roles/healthcare.datasetAdmin",
    "stage": "GA",
    "title": "Healthcare Dataset Administrator"
   },
   "included_permissions": [
    "healthcare.datasets.create",
    "healthcare.datasets.deidentify",
    "healthcare.datasets.delete",
    "healthcare.datasets.get",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.datasets.setIamPolicy",
    "healthcare.datasets.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "healthcare.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/meshdataplane.serviceAgent",
   "role": {
    "description": "Run user-space Istio components",
    "etag": "AA==",
    "name": "roles/meshdataplane.serviceAgent",
    "stage": "GA",
    "title": "Mesh Data Plane Service Agent"
   },
   "included_permissions": [
    "cloudtrace.traces.patch",
    "compute.forwardingRules.get",
    "compute.globalForwardingRules.get",
    "logging.logEntries.create",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/gameservices.viewer",
   "role": {
    "description": "Read-only access to Game Services API and related resources.",
    "etag": "AA==",
    "name": "roles/gameservices.viewer",
    "stage": "GA",
    "title": "Game Services API Viewer"
   },
   "included_permissions": [
    "gameservices.gameServerClusters.get",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerConfigs.get",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.get",
    "gameservices.gameServerDeployments.list",
    "gameservices.locations.get",
    "gameservices.locations.list",
    "gameservices.operations.get",
    "gameservices.operations.list",
    "gameservices.realms.get",
    "gameservices.realms.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/netappcloudvolumes.viewer",
   "role": {
    "description": "This role is managed by NetApp, not Google.",
    "etag": "AA==",
    "name": "roles/netappcloudvolumes.viewer",
    "stage": "BETA",
    "title": "NetApp Cloud Volumes Viewer"
   },
   "included_permissions": [
    "cloudvolumesgcp-api.netapp.com/activeDirectories.get",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.get",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.get",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/volumes.get",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/metastore.admin",
   "role": {
    "description": "Full access to all Dataproc Metastore resources.",
    "etag": "AA==",
    "name": "roles/metastore.admin",
    "stage": "BETA",
    "title": "Dataproc Metastore Admin"
   },
   "included_permissions": [
    "metastore.imports.create",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.imports.update",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.cancel",
    "metastore.operations.delete",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.create",
    "metastore.services.delete",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.restore",
    "metastore.services.setIamPolicy",
    "metastore.services.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/genomics.admin",
   "role": {
    "description": "Full access to genomics datasets and operations.",
    "etag": "AA==",
    "name": "roles/genomics.admin",
    "stage": "GA",
    "title": "Genomics Admin"
   },
   "included_permissions": [
    "genomics.datasets.create",
    "genomics.datasets.delete",
    "genomics.datasets.get",
    "genomics.datasets.getIamPolicy",
    "genomics.datasets.list",
    "genomics.datasets.setIamPolicy",
    "genomics.datasets.update",
    "genomics.operations.cancel",
    "genomics.operations.create",
    "genomics.operations.get",
    "genomics.operations.list"
   ]
  },
  {
   "name": "roles/metastore.editor",
   "role": {
    "description": "Read and write access to all Dataproc Metastore resources.",
    "etag": "AA==",
    "name": "roles/metastore.editor",
    "stage": "BETA",
    "title": "Dataproc Metastore Editor"
   },
   "included_permissions": [
    "metastore.imports.create",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.imports.update",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.cancel",
    "metastore.operations.delete",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.create",
    "metastore.services.delete",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.restore",
    "metastore.services.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.dicomViewer",
   "role": {
    "description": "Retrieve DICOM images from a DICOM store.",
    "etag": "AA==",
    "name": "roles/healthcare.dicomViewer",
    "stage": "GA",
    "title": "Healthcare DICOM Viewer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.dicomStores.dicomWebRead",
    "healthcare.dicomStores.export",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/genomics.editor",
   "role": {
    "description": "Access to read and edit genomics datasets and operations.",
    "etag": "AA==",
    "name": "roles/genomics.editor",
    "stage": "GA",
    "title": "Genomics Editor"
   },
   "included_permissions": [
    "genomics.datasets.create",
    "genomics.datasets.delete",
    "genomics.datasets.get",
    "genomics.datasets.list",
    "genomics.datasets.update",
    "genomics.operations.cancel",
    "genomics.operations.create",
    "genomics.operations.get",
    "genomics.operations.list"
   ]
  },
  {
   "name": "roles/notebooks.admin",
   "role": {
    "description": "Full access to Notebooks all resources.",
    "etag": "AA==",
    "name": "roles/notebooks.admin",
    "stage": "GA",
    "title": "Notebooks Admin"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "notebooks.environments.create",
    "notebooks.environments.delete",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.environments.setIamPolicy",
    "notebooks.executions.create",
    "notebooks.executions.delete",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.executions.setIamPolicy",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.delete",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.reset",
    "notebooks.instances.setAccelerator",
    "notebooks.instances.setIamPolicy",
    "notebooks.instances.setLabels",
    "notebooks.instances.setMachineType",
    "notebooks.instances.start",
    "notebooks.instances.stop",
    "notebooks.instances.update",
    "notebooks.instances.updateConfig",
    "notebooks.instances.updateShieldInstanceConfig",
    "notebooks.instances.upgrade",
    "notebooks.instances.use",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.cancel",
    "notebooks.operations.delete",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.delete",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "notebooks.schedules.setIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/metastore.metadataOperator",
   "role": {
    "description": "Read-only access to Dataproc Metastore resources with additional metadata operations permission.",
    "etag": "AA==",
    "name": "roles/metastore.metadataOperator",
    "stage": "BETA",
    "title": "Dataproc Metastore Metadata Operator"
   },
   "included_permissions": [
    "metastore.imports.create",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.imports.update",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.restore",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/genomics.pipelinesRunner",
   "role": {
    "description": "Full access to operate on genomics pipelines.",
    "etag": "AA==",
    "name": "roles/genomics.pipelinesRunner",
    "stage": "GA",
    "title": "Genomics Pipelines Runner"
   },
   "included_permissions": [
    "genomics.operations.cancel",
    "genomics.operations.create",
    "genomics.operations.get",
    "genomics.operations.list"
   ]
  },
  {
   "name": "roles/metastore.user",
   "role": {
    "description": "Read-only access to all Dataproc Metastore resources.",
    "etag": "AA==",
    "name": "roles/metastore.user",
    "stage": "BETA",
    "title": "Dataproc Metastore Viewer"
   },
   "included_permissions": [
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.fhirStoreViewer",
   "role": {
    "description": "List FHIR Stores in a dataset.",
    "etag": "AA==",
    "name": "roles/healthcare.fhirStoreViewer",
    "stage": "GA",
    "title": "Healthcare FHIR Store Viewer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.admin",
   "role": {
    "description": "Full access to Cloud ML Engine.",
    "etag": "AA==",
    "name": "roles/ml.admin",
    "stage": "GA",
    "title": "ML Engine Admin"
   },
   "included_permissions": [
    "ml.jobs.cancel",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.jobs.setIamPolicy",
    "ml.jobs.update",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.create",
    "ml.models.delete",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.models.setIamPolicy",
    "ml.models.update",
    "ml.operations.cancel",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.create",
    "ml.studies.delete",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.studies.setIamPolicy",
    "ml.trials.create",
    "ml.trials.delete",
    "ml.trials.get",
    "ml.trials.list",
    "ml.trials.update",
    "ml.versions.create",
    "ml.versions.delete",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "ml.versions.update",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/firebasenotifications.viewer",
   "role": {
    "description": "Read-only access to Firebase Cloud Messaging resources.",
    "etag": "AA==",
    "name": "roles/firebasenotifications.viewer",
    "stage": "GA",
    "title": "Firebase Cloud Messaging Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.developer",
   "role": {
    "description": "Access to create training and prediction jobs, models and versions, send online prediction requests.",
    "etag": "AA==",
    "name": "roles/ml.developer",
    "stage": "GA",
    "title": "ML Engine Developer"
   },
   "included_permissions": [
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.create",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.create",
    "ml.studies.delete",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.studies.setIamPolicy",
    "ml.trials.create",
    "ml.trials.delete",
    "ml.trials.get",
    "ml.trials.list",
    "ml.trials.update",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/oauthconfig.editor",
   "role": {
    "description": "Read/write access to OAuth config resources",
    "etag": "AA==",
    "name": "roles/oauthconfig.editor",
    "stage": "BETA",
    "title": "OAuth Config Editor"
   },
   "included_permissions": [
    "clientauthconfig.brands.create",
    "clientauthconfig.brands.delete",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.create",
    "clientauthconfig.clients.createSecret",
    "clientauthconfig.clients.delete",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.getWithSecret",
    "clientauthconfig.clients.list",
    "clientauthconfig.clients.listWithSecrets",
    "clientauthconfig.clients.undelete",
    "clientauthconfig.clients.update",
    "oauthconfig.clientpolicy.get",
    "oauthconfig.testusers.get",
    "oauthconfig.testusers.update",
    "oauthconfig.verification.get",
    "oauthconfig.verification.submit",
    "oauthconfig.verification.update"
   ]
  },
  {
   "name": "roles/firebaseperformance.admin",
   "role": {
    "description": "Full access to firebaseperformance resources.",
    "etag": "AA==",
    "name": "roles/firebaseperformance.admin",
    "stage": "GA",
    "title": "Firebase Performance Reporting Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseperformance.config.create",
    "firebaseperformance.config.delete",
    "firebaseperformance.config.update",
    "firebaseperformance.data.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.jobOwner",
   "role": {
    "description": "Full access to the job.",
    "etag": "AA==",
    "name": "roles/ml.jobOwner",
    "stage": "GA",
    "title": "ML Engine Job Owner"
   },
   "included_permissions": [
    "ml.jobs.cancel",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.jobs.setIamPolicy",
    "ml.jobs.update"
   ]
  },
  {
   "name": "roles/healthcare.nlpServiceViewer",
   "role": {
    "description": "Extract and analyze medical entities from a given text.",
    "etag": "AA==",
    "name": "roles/healthcare.nlpServiceViewer",
    "stage": "BETA",
    "title": "Healthcare NLP Service Viewer"
   },
   "included_permissions": [
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.nlpservice.analyzeEntities",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaseperformance.viewer",
   "role": {
    "description": "Read-only access to firebaseperformance resources.",
    "etag": "AA==",
    "name": "roles/firebaseperformance.viewer",
    "stage": "GA",
    "title": "Firebase Performance Reporting Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebaseperformance.data.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.serviceAgent",
   "role": {
    "description": "Gives the Healthcare Service Account access to networks,Kubernetes engine, and pubsub resources.",
    "etag": "AA==",
    "name": "roles/healthcare.serviceAgent",
    "stage": "GA",
    "title": "Healthcare Service Agent"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "pubsub.snapshots.seek",
    "pubsub.subscriptions.consume",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/ml.modelOwner",
   "role": {
    "description": "Full access to the model and its versions.",
    "etag": "AA==",
    "name": "roles/ml.modelOwner",
    "stage": "GA",
    "title": "ML Engine Model Owner"
   },
   "included_permissions": [
    "ml.models.create",
    "ml.models.delete",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.models.setIamPolicy",
    "ml.models.update",
    "ml.versions.create",
    "ml.versions.delete",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "ml.versions.update"
   ]
  },
  {
   "name": "roles/firebasepredictions.admin",
   "role": {
    "description": "Full read/write access to Firebase Predictions resources.",
    "etag": "AA==",
    "name": "roles/firebasepredictions.admin",
    "stage": "GA",
    "title": "Firebase Predictions Admin"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasepredictions.predictions.create",
    "firebasepredictions.predictions.delete",
    "firebasepredictions.predictions.list",
    "firebasepredictions.predictions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/osconfig.guestPolicyAdmin",
   "role": {
    "description": "Full admin access to GuestPolicies",
    "etag": "AA==",
    "name": "roles/osconfig.guestPolicyAdmin",
    "stage": "BETA",
    "title": "GuestPolicy Admin"
   },
   "included_permissions": [
    "osconfig.guestPolicies.create",
    "osconfig.guestPolicies.delete",
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "osconfig.guestPolicies.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.organizationRoleAdmin",
   "role": {
    "description": "Access to administer all custom roles in the organization and the projects below it.",
    "etag": "AA==",
    "name": "roles/iam.organizationRoleAdmin",
    "stage": "GA",
    "title": "Organization Role Administrator"
   },
   "included_permissions": [
    "iam.roles.create",
    "iam.roles.delete",
    "iam.roles.get",
    "iam.roles.list",
    "iam.roles.undelete",
    "iam.roles.update",
    "resourcemanager.organizations.get",
    "resourcemanager.organizations.getIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.serviceAccountCreator",
   "role": {
    "description": "Access to create service accounts.",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountCreator",
    "stage": "GA",
    "title": "Create Service Accounts"
   },
   "included_permissions": [
    "iam.serviceAccounts.create",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.serviceAccountKeyAdmin",
   "role": {
    "description": "Create and manage (and rotate) service account keys.",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountKeyAdmin",
    "stage": "GA",
    "title": "Service Account Key Admin"
   },
   "included_permissions": [
    "iam.serviceAccountKeys.create",
    "iam.serviceAccountKeys.delete",
    "iam.serviceAccountKeys.get",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.modelUser",
   "role": {
    "description": "Permissions to read the model and its versions, and use them for prediction.",
    "etag": "AA==",
    "name": "roles/ml.modelUser",
    "stage": "GA",
    "title": "ML Engine Model User"
   },
   "included_permissions": [
    "ml.models.get",
    "ml.models.predict",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict"
   ]
  },
  {
   "name": "roles/iam.serviceAccountDeleter",
   "role": {
    "description": "Access to delete service accounts.",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountDeleter",
    "stage": "GA",
    "title": "Delete Service Accounts"
   },
   "included_permissions": [
    "iam.serviceAccounts.delete",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/osconfig.guestPolicyEditor",
   "role": {
    "description": "Editor of GuestPolicy resources",
    "etag": "AA==",
    "name": "roles/osconfig.guestPolicyEditor",
    "stage": "BETA",
    "title": "GuestPolicy Editor"
   },
   "included_permissions": [
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "osconfig.guestPolicies.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebasepredictions.viewer",
   "role": {
    "description": "Read-only access to Firebase Predictions resources.",
    "etag": "AA==",
    "name": "roles/firebasepredictions.viewer",
    "stage": "GA",
    "title": "Firebase Predictions Viewer"
   },
   "included_permissions": [
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.projects.get",
    "firebasepredictions.predictions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.serviceAccountUser",
   "role": {
    "description": "Run operations as the service account.",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountUser",
    "stage": "GA",
    "title": "Service Account User"
   },
   "included_permissions": [
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.securityAdmin",
   "role": {
    "description": "Security admin role, with permissions to get and set any IAM policy.",
    "etag": "AA==",
    "name": "roles/iam.securityAdmin",
    "stage": "GA",
    "title": "Security Admin"
   },
   "included_permissions": [
    "accessapproval.requests.list",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessPolicies.setIamPolicy",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.policies.setIamPolicy",
    "accesscontextmanager.servicePerimeters.list",
    "actions.agentVersions.list",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotations.list",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.list",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.list",
    "aiplatform.endpoints.list",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.list",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.list",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.list",
    "aiplatform.studies.list",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.list",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apiconfigs.setIamPolicy",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.apis.setIamPolicy",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.gateways.setIamPolicy",
    "apigateway.locations.list",
    "apigateway.operations.list",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.list",
    "apigee.apps.list",
    "apigee.caches.list",
    "apigee.datacollectors.list",
    "apigee.datastores.list",
    "apigee.deployments.list",
    "apigee.developerappattributes.list",
    "apigee.developerapps.list",
    "apigee.developerattributes.list",
    "apigee.developers.list",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.list",
    "apigee.environments.getIamPolicy",
    "apigee.environments.list",
    "apigee.environments.setIamPolicy",
    "apigee.exports.list",
    "apigee.flowhooks.list",
    "apigee.hostqueries.list",
    "apigee.instanceattachments.list",
    "apigee.instances.list",
    "apigee.keystorealiases.list",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.list",
    "apigee.operations.list",
    "apigee.organizations.list",
    "apigee.portals.list",
    "apigee.proxies.list",
    "apigee.proxyrevisions.list",
    "apigee.queries.list",
    "apigee.references.list",
    "apigee.reports.list",
    "apigee.resourcefiles.list",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflows.list",
    "apigee.targetservers.list",
    "apigee.tracesessions.list",
    "apigeeconnect.connections.list",
    "apikeys.keys.list",
    "appengine.instances.list",
    "appengine.memcache.list",
    "appengine.operations.list",
    "appengine.services.list",
    "appengine.versions.list",
    "artifactregistry.files.list",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.setIamPolicy",
    "artifactregistry.tags.list",
    "artifactregistry.versions.list",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.list",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.list",
    "automl.datasets.getIamPolicy",
    "automl.datasets.list",
    "automl.datasets.setIamPolicy",
    "automl.examples.list",
    "automl.humanAnnotationTasks.list",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.locations.setIamPolicy",
    "automl.modelEvaluations.list",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.setIamPolicy",
    "automl.operations.list",
    "automl.tableSpecs.list",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "autoscaling.sites.getIamPolicy",
    "autoscaling.sites.setIamPolicy",
    "bigquery.capacityCommitments.list",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.setIamPolicy",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.jobs.list",
    "bigquery.models.list",
    "bigquery.reservationAssignments.list",
    "bigquery.reservations.list",
    "bigquery.routines.list",
    "bigquery.savedqueries.list",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigquery.tables.setIamPolicy",
    "bigtable.appProfiles.list",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.backups.setIamPolicy",
    "bigtable.clusters.list",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.instances.setIamPolicy",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.setIamPolicy",
    "billing.accounts.getIamPolicy",
    "billing.accounts.list",
    "billing.accounts.setIamPolicy",
    "billing.budgets.list",
    "billing.credits.list",
    "billing.resourceAssociations.list",
    "billing.subscriptions.list",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.setIamPolicy",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.continuousValidationConfig.setIamPolicy",
    "binaryauthorization.policy.getIamPolicy",
    "binaryauthorization.policy.setIamPolicy",
    "clientauthconfig.brands.list",
    "clientauthconfig.clients.list",
    "cloudasset.feeds.list",
    "cloudbuild.builds.list",
    "clouddebugger.breakpoints.list",
    "clouddebugger.debuggees.list",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.list",
    "cloudiot.devices.list",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudiot.registries.setIamPolicy",
    "cloudjobdiscovery.companies.list",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.cryptoKeys.setIamPolicy",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.importJobs.setIamPolicy",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudkms.keyRings.setIamPolicy",
    "cloudnotifications.activities.list",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.catalogs.setIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.setIamPolicy",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.products.setIamPolicy",
    "cloudprofiler.profiles.list",
    "cloudscheduler.jobs.list",
    "cloudscheduler.locations.list",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scans.list",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.list",
    "cloudsql.instances.list",
    "cloudsql.sslCerts.list",
    "cloudsql.users.list",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.list",
    "cloudsupport.accounts.setIamPolicy",
    "cloudsupport.techCases.list",
    "cloudtasks.locations.list",
    "cloudtasks.queues.getIamPolicy",
    "cloudtasks.queues.list",
    "cloudtasks.queues.setIamPolicy",
    "cloudtasks.tasks.list",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.steps.list",
    "cloudtrace.insights.list",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.list",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.list",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "composer.environments.list",
    "composer.imageversions.list",
    "composer.operations.list",
    "compute.acceleratorTypes.list",
    "compute.addresses.list",
    "compute.autoscalers.list",
    "compute.backendBuckets.list",
    "compute.backendServices.list",
    "compute.commitments.list",
    "compute.diskTypes.list",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.setIamPolicy",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewalls.list",
    "compute.forwardingRules.list",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.list",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.list",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instances.getIamPolicy",
    "compute.instances.list",
    "compute.instances.setIamPolicy",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.list",
    "compute.interconnects.list",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.maintenancePolicies.setIamPolicy",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networks.list",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeGroups.setIamPolicy",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTemplates.setIamPolicy",
    "compute.nodeTypes.list",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionOperations.setIamPolicy",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.list",
    "compute.regions.list",
    "compute.reservations.list",
    "compute.resourcePolicies.list",
    "compute.routers.list",
    "compute.routes.list",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.setIamPolicy",
    "compute.serviceAttachments.list",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.sslCertificates.list",
    "compute.sslPolicies.list",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.setIamPolicy",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.list",
    "compute.targetPools.list",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.list",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zoneOperations.setIamPolicy",
    "compute.zones.list",
    "consumerprocurement.accounts.list",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.list",
    "consumerprocurement.orders.list",
    "container.apiServices.list",
    "container.auditSinks.list",
    "container.backendConfigs.list",
    "container.bindings.list",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.list",
    "container.clusters.list",
    "container.componentStatuses.list",
    "container.configMaps.list",
    "container.controllerRevisions.list",
    "container.cronJobs.list",
    "container.csiDrivers.list",
    "container.csiNodeInfos.list",
    "container.csiNodes.list",
    "container.customResourceDefinitions.list",
    "container.daemonSets.list",
    "container.deployments.list",
    "container.endpointSlices.list",
    "container.endpoints.list",
    "container.events.list",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.list",
    "container.initializerConfigurations.list",
    "container.jobs.list",
    "container.leases.list",
    "container.limitRanges.list",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.list",
    "container.networkPolicies.list",
    "container.nodes.list",
    "container.operations.list",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.list",
    "container.petSets.list",
    "container.podDisruptionBudgets.list",
    "container.podPresets.list",
    "container.podSecurityPolicies.list",
    "container.podTemplates.list",
    "container.pods.list",
    "container.priorityClasses.list",
    "container.replicaSets.list",
    "container.replicationControllers.list",
    "container.resourceQuotas.list",
    "container.roleBindings.list",
    "container.roles.list",
    "container.runtimeClasses.list",
    "container.scheduledJobs.list",
    "container.selfSubjectAccessReviews.list",
    "container.serviceAccounts.list",
    "container.services.list",
    "container.statefulSets.list",
    "container.storageClasses.list",
    "container.storageStates.list",
    "container.storageVersionMigrations.list",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.list",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.list",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.notes.setIamPolicy",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.setIamPolicy",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.categories.setIamPolicy",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.setIamPolicy",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.entryGroups.setIamPolicy",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.setIamPolicy",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "datacatalog.taxonomies.setIamPolicy",
    "dataflow.jobs.list",
    "dataflow.messages.list",
    "dataflow.snapshots.list",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.setIamPolicy",
    "datafusion.locations.list",
    "datafusion.operations.list",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.list",
    "datalabeling.examples.list",
    "datalabeling.instructions.list",
    "datalabeling.operations.list",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.connectionprofiles.setIamPolicy",
    "datamigration.locations.list",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.migrationjobs.setIamPolicy",
    "datamigration.operations.list",
    "dataproc.agents.list",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.setIamPolicy",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.clusters.setIamPolicy",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.jobs.setIamPolicy",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.operations.setIamPolicy",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.setIamPolicy",
    "dataprocessing.datasources.list",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.groupcontrols.list",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.databases.setIamPolicy",
    "datastore.entities.list",
    "datastore.indexes.list",
    "datastore.locations.list",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.namespaces.setIamPolicy",
    "datastore.operations.list",
    "datastore.statistics.list",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.deployments.getIamPolicy",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.setIamPolicy",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.types.list",
    "dialogflow.agents.list",
    "dialogflow.answerrecords.list",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.list",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.list",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.list",
    "dialogflow.environments.list",
    "dialogflow.flows.list",
    "dialogflow.intents.list",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.list",
    "dialogflow.pages.list",
    "dialogflow.participants.list",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumbers.list",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.versions.list",
    "dialogflow.webhooks.list",
    "dlp.analyzeRiskTemplates.list",
    "dlp.deidentifyTemplates.list",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.list",
    "dlp.jobTriggers.list",
    "dlp.jobs.list",
    "dlp.storedInfoTypes.list",
    "dns.changes.list",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.list",
    "dns.managedZones.list",
    "dns.policies.getIamPolicy",
    "dns.policies.list",
    "dns.policies.setIamPolicy",
    "dns.resourceRecordSets.list",
    "documentai.evaluations.list",
    "documentai.labelerPools.list",
    "documentai.locations.list",
    "documentai.processorTypes.list",
    "documentai.processorVersions.list",
    "documentai.processors.list",
    "domains.locations.list",
    "domains.operations.list",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "domains.registrations.setIamPolicy",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.list",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.assets.setIamPolicy",
    "earthengine.operations.list",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.list",
    "errorreporting.groups.list",
    "essentialcontacts.contacts.list",
    "eventarc.locations.list",
    "eventarc.operations.list",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "eventarc.triggers.setIamPolicy",
    "file.backups.list",
    "file.instances.list",
    "file.locations.list",
    "file.operations.list",
    "file.snapshots.list",
    "firebase.clients.list",
    "firebase.links.list",
    "firebaseabt.experiments.list",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "firebasecrashlytics.issues.list",
    "firebasedatabase.instances.list",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.list",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.list",
    "firebaseinappmessaging.campaigns.list",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.list",
    "firebaseml.modelversions.list",
    "firebasenotifications.messages.list",
    "firebasepredictions.predictions.list",
    "firebaserules.releases.list",
    "firebaserules.rulesets.list",
    "firebasestorage.buckets.list",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.list",
    "gameservices.locations.list",
    "gameservices.operations.list",
    "gameservices.realms.list",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/subscriptions.list",
    "genomics.datasets.getIamPolicy",
    "genomics.datasets.list",
    "genomics.datasets.setIamPolicy",
    "genomics.operations.list",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.features.setIamPolicy",
    "gkehub.gateway.getIamPolicy",
    "gkehub.gateway.setIamPolicy",
    "gkehub.locations.list",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.memberships.setIamPolicy",
    "gkehub.operations.list",
    "gsuiteaddons.deployments.list",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.list",
    "healthcare.annotationStores.setIamPolicy",
    "healthcare.annotations.list",
    "healthcare.attributeDefinitions.list",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consentStores.setIamPolicy",
    "healthcare.consents.list",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.datasets.setIamPolicy",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.list",
    "healthcare.dicomStores.setIamPolicy",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.setIamPolicy",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.list",
    "healthcare.hl7V2Stores.setIamPolicy",
    "healthcare.locations.list",
    "healthcare.operations.list",
    "healthcare.userDataMappings.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.roles.get",
    "iam.roles.list",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.setIamPolicy",
    "iap.tunnel.getIamPolicy",
    "iap.tunnel.setIamPolicy",
    "iap.tunnelInstances.getIamPolicy",
    "iap.tunnelInstances.setIamPolicy",
    "iap.tunnelZones.getIamPolicy",
    "iap.tunnelZones.setIamPolicy",
    "iap.web.getIamPolicy",
    "iap.web.setIamPolicy",
    "iap.webServiceVersions.getIamPolicy",
    "iap.webServiceVersions.setIamPolicy",
    "iap.webServices.getIamPolicy",
    "iap.webServices.setIamPolicy",
    "iap.webTypes.getIamPolicy",
    "iap.webTypes.setIamPolicy",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPools.list",
    "lifesciences.operations.list",
    "logging.buckets.list",
    "logging.exclusions.list",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.notificationRules.list",
    "logging.privateLogEntries.list",
    "logging.queries.list",
    "logging.sinks.list",
    "logging.views.list",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.domains.setIamPolicy",
    "managedidentities.locations.list",
    "managedidentities.operations.list",
    "memcache.instances.list",
    "memcache.locations.list",
    "memcache.operations.list",
    "metastore.imports.list",
    "metastore.locations.list",
    "metastore.operations.list",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.setIamPolicy",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.jobs.setIamPolicy",
    "ml.locations.list",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.setIamPolicy",
    "ml.operations.list",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.studies.setIamPolicy",
    "ml.trials.list",
    "ml.versions.list",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.list",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.list",
    "monitoring.services.list",
    "monitoring.slos.list",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.list",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.connectivitytests.setIamPolicy",
    "networkmanagement.locations.list",
    "networkmanagement.operations.list",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.locations.list",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.locations.list",
    "networkservices.operations.list",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.environments.setIamPolicy",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.executions.setIamPolicy",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.setIamPolicy",
    "notebooks.locations.list",
    "notebooks.operations.list",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "notebooks.schedules.setIamPolicy",
    "ondemandscanning.operations.list",
    "osconfig.guestPolicies.list",
    "osconfig.patchDeployments.list",
    "osconfig.patchJobs.list",
    "policysimulator.replayResults.list",
    "policysimulator.replays.list",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateAuthorities.setIamPolicy",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificateRevocationLists.setIamPolicy",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.certificates.setIamPolicy",
    "privateca.locations.list",
    "privateca.operations.list",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "privateca.reusableConfigs.setIamPolicy",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.getIamPolicy",
    "proximitybeacon.beacons.list",
    "proximitybeacon.beacons.setIamPolicy",
    "proximitybeacon.namespaces.getIamPolicy",
    "proximitybeacon.namespaces.list",
    "proximitybeacon.namespaces.setIamPolicy",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.setIamPolicy",
    "pubsublite.subscriptions.list",
    "pubsublite.topics.list",
    "recaptchaenterprise.keys.list",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeFirewallInsights.list",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamServiceAccountInsights.list",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.usageCommitmentRecommendations.list",
    "redis.instances.list",
    "redis.locations.list",
    "redis.operations.list",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.workerpools.list",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list",
    "resourcemanager.folders.setIamPolicy",
    "resourcemanager.organizations.getIamPolicy",
    "resourcemanager.organizations.setIamPolicy",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.projects.setIamPolicy",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagKeys.setIamPolicy",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "resourcemanager.tagValues.setIamPolicy",
    "retail.catalogs.list",
    "retail.operations.list",
    "retail.products.list",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.list",
    "run.routes.list",
    "run.services.getIamPolicy",
    "run.services.list",
    "run.services.setIamPolicy",
    "runtimeconfig.configs.getIamPolicy",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.setIamPolicy",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.getIamPolicy",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.setIamPolicy",
    "runtimeconfig.waiters.getIamPolicy",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.setIamPolicy",
    "secretmanager.locations.list",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.secrets.setIamPolicy",
    "secretmanager.versions.list",
    "securitycenter.assets.list",
    "securitycenter.findings.list",
    "securitycenter.notificationconfig.list",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.sources.setIamPolicy",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.bindings.setIamPolicy",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.catalogs.setIamPolicy",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "servicebroker.instances.setIamPolicy",
    "serviceconsumermanagement.tenancyu.list",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.endpoints.setIamPolicy",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.namespaces.setIamPolicy",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.setIamPolicy",
    "servicemanagement.consumerSettings.getIamPolicy",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.consumerSettings.setIamPolicy",
    "servicemanagement.services.getIamPolicy",
    "servicemanagement.services.list",
    "servicemanagement.services.setIamPolicy",
    "servicenetworking.operations.list",
    "serviceusage.operations.list",
    "serviceusage.services.list",
    "source.repos.getIamPolicy",
    "source.repos.list",
    "source.repos.setIamPolicy",
    "spanner.backupOperations.list",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.backups.setIamPolicy",
    "spanner.databaseOperations.list",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.setIamPolicy",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.list",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.instances.setIamPolicy",
    "spanner.sessions.list",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.hmacKeys.list",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storagetransfer.jobs.list",
    "storagetransfer.operations.list",
    "tpu.acceleratortypes.list",
    "tpu.locations.list",
    "tpu.nodes.list",
    "tpu.operations.list",
    "tpu.tensorflowversions.list",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.list",
    "vmmigration.deployments.list",
    "vpcaccess.connectors.list",
    "vpcaccess.locations.list",
    "vpcaccess.operations.list",
    "workflows.executions.list",
    "workflows.locations.list",
    "workflows.operations.list",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list",
    "workflows.workflows.setIamPolicy"
   ]
  },
  {
   "name": "roles/iam.workloadIdentityPoolAdmin",
   "role": {
    "description": "Full rights to create and manage workload identity pools.",
    "etag": "AA==",
    "name": "roles/iam.workloadIdentityPoolAdmin",
    "stage": "BETA",
    "title": "IAM Workload Identity Pool Admin"
   },
   "included_permissions": [
    "iam.googleapis.com/workloadIdentityPoolProviders.create",
    "iam.googleapis.com/workloadIdentityPoolProviders.delete",
    "iam.googleapis.com/workloadIdentityPoolProviders.get",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.undelete",
    "iam.googleapis.com/workloadIdentityPoolProviders.update",
    "iam.googleapis.com/workloadIdentityPools.create",
    "iam.googleapis.com/workloadIdentityPools.delete",
    "iam.googleapis.com/workloadIdentityPools.get",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.googleapis.com/workloadIdentityPools.undelete",
    "iam.googleapis.com/workloadIdentityPools.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.workloadIdentityPoolViewer",
   "role": {
    "description": "Read access to workload identity pools.",
    "etag": "AA==",
    "name": "roles/iam.workloadIdentityPoolViewer",
    "stage": "BETA",
    "title": "IAM Workload Identity Pool Viewer"
   },
   "included_permissions": [
    "iam.googleapis.com/workloadIdentityPoolProviders.get",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPools.get",
    "iam.googleapis.com/workloadIdentityPools.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.operationOwner",
   "role": {
    "description": "Full access to the operation.",
    "etag": "AA==",
    "name": "roles/ml.operationOwner",
    "stage": "GA",
    "title": "ML Engine Operation Owner"
   },
   "included_permissions": [
    "ml.operations.cancel",
    "ml.operations.get",
    "ml.operations.list"
   ]
  },
  {
   "name": "roles/osconfig.patchDeploymentAdmin",
   "role": {
    "description": "Full admin access to PatchDeployments",
    "etag": "AA==",
    "name": "roles/osconfig.patchDeploymentAdmin",
    "stage": "GA",
    "title": "PatchDeployment Admin"
   },
   "included_permissions": [
    "osconfig.patchDeployments.create",
    "osconfig.patchDeployments.delete",
    "osconfig.patchDeployments.execute",
    "osconfig.patchDeployments.get",
    "osconfig.patchDeployments.list",
    "osconfig.patchDeployments.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/firebaserules.admin",
   "role": {
    "description": "Full management of Firebase Rules.",
    "etag": "AA==",
    "name": "roles/firebaserules.admin",
    "stage": "GA",
    "title": "Firebase Rules Admin"
   },
   "included_permissions": [
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebaserules.rulesets.test",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iap.settingsAdmin",
   "role": {
    "description": "Administrator of IAP Settings.",
    "etag": "AA==",
    "name": "roles/iap.settingsAdmin",
    "stage": "GA",
    "title": "IAP Settings Admin"
   },
   "included_permissions": [
    "iap.projects.getSettings",
    "iap.projects.updateSettings",
    "iap.web.getSettings",
    "iap.web.updateSettings",
    "iap.webServiceVersions.getSettings",
    "iap.webServiceVersions.updateSettings",
    "iap.webServices.getSettings",
    "iap.webServices.updateSettings",
    "iap.webTypes.getSettings",
    "iap.webTypes.updateSettings"
   ]
  },
  {
   "name": "roles/iap.httpsResourceAccessor",
   "role": {
    "description": "Access HTTPS resources which use Identity-Aware Proxy",
    "etag": "AA==",
    "name": "roles/iap.httpsResourceAccessor",
    "stage": "GA",
    "title": "IAP-secured Web App User"
   },
   "included_permissions": [
    "iap.webServiceVersions.accessViaIAP"
   ]
  },
  {
   "name": "roles/redisenterprisecloud.viewer",
   "role": {
    "description": "This role is managed by Redis Labs, not Google.",
    "etag": "AA==",
    "name": "roles/redisenterprisecloud.viewer",
    "stage": "BETA",
    "title": "Redis Enterprise Cloud Viewer"
   },
   "included_permissions": [
    "gcp.redisenterprise.com/databases.get",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/subscriptions.get",
    "gcp.redisenterprise.com/subscriptions.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/ml.serviceAgent",
   "role": {
    "description": "Cloud ML service agent can act as log writer, Cloud Storage admin, Artifact Registry Reader, BigQuery writer, and service account access token creator.",
    "etag": "AA==",
    "name": "roles/ml.serviceAgent",
    "stage": "GA",
    "title": "Cloud ML Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.update",
    "bigquery.tables.create",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.list",
    "bigquery.tables.updateData",
    "firebase.projects.get",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.implicitDelegation",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "logging.logEntries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/firebaserules.viewer",
   "role": {
    "description": "Read-only access on all resources with the ability to test Rulesets.",
    "etag": "AA==",
    "name": "roles/firebaserules.viewer",
    "stage": "GA",
    "title": "Firebase Rules Viewer"
   },
   "included_permissions": [
    "firebaserules.releases.get",
    "firebaserules.releases.list",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gsuiteaddons.tester",
   "role": {
    "description": "Testing execution access to Google Workspace Add-ons resources",
    "etag": "AA==",
    "name": "roles/gsuiteaddons.tester",
    "stage": "GA",
    "title": "Google Workspace Add-ons Tester"
   },
   "included_permissions": [
    "gsuiteaddons.deployments.execute",
    "gsuiteaddons.deployments.install",
    "gsuiteaddons.deployments.installStatus",
    "gsuiteaddons.deployments.uninstall",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gameservices.admin",
   "role": {
    "description": "Full access to Game Services API and related resources.",
    "etag": "AA==",
    "name": "roles/gameservices.admin",
    "stage": "GA",
    "title": "Game Services API Admin"
   },
   "included_permissions": [
    "gameservices.gameServerClusters.create",
    "gameservices.gameServerClusters.delete",
    "gameservices.gameServerClusters.get",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerClusters.update",
    "gameservices.gameServerConfigs.create",
    "gameservices.gameServerConfigs.delete",
    "gameservices.gameServerConfigs.get",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.create",
    "gameservices.gameServerDeployments.delete",
    "gameservices.gameServerDeployments.get",
    "gameservices.gameServerDeployments.list",
    "gameservices.gameServerDeployments.rollout",
    "gameservices.gameServerDeployments.update",
    "gameservices.locations.get",
    "gameservices.locations.list",
    "gameservices.operations.cancel",
    "gameservices.operations.delete",
    "gameservices.operations.get",
    "gameservices.operations.list",
    "gameservices.realms.create",
    "gameservices.realms.delete",
    "gameservices.realms.get",
    "gameservices.realms.list",
    "gameservices.realms.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.admin",
   "role": {
    "description": "All current and future monitoring permissions.",
    "etag": "AA==",
    "name": "roles/monitoring.admin",
    "stage": "GA",
    "title": "Monitoring Admin"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "monitoring.alertPolicies.create",
    "monitoring.alertPolicies.delete",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.alertPolicies.update",
    "monitoring.dashboards.create",
    "monitoring.dashboards.delete",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.dashboards.update",
    "monitoring.groups.create",
    "monitoring.groups.delete",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.groups.update",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.delete",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.create",
    "monitoring.notificationChannels.delete",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.getVerificationCode",
    "monitoring.notificationChannels.list",
    "monitoring.notificationChannels.sendVerificationCode",
    "monitoring.notificationChannels.update",
    "monitoring.notificationChannels.verify",
    "monitoring.publicWidgets.create",
    "monitoring.publicWidgets.delete",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.publicWidgets.update",
    "monitoring.services.create",
    "monitoring.services.delete",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.services.update",
    "monitoring.slos.create",
    "monitoring.slos.delete",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.slos.update",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.create",
    "monitoring.uptimeCheckConfigs.delete",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "monitoring.uptimeCheckConfigs.update",
    "opsconfigmonitoring.resourceMetadata.write",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.enable",
    "stackdriver.projects.edit",
    "stackdriver.projects.get",
    "stackdriver.resourceMetadata.write"
   ]
  },
  {
   "name": "roles/osconfig.serviceAgent",
   "role": {
    "description": "Grants OS Config Service Account access to Google Compute Engine instances.",
    "etag": "AA==",
    "name": "roles/osconfig.serviceAgent",
    "stage": "GA",
    "title": "Cloud OS Config Service Agent"
   },
   "included_permissions": [
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.list",
    "compute.instances.setMetadata",
    "compute.zones.get",
    "compute.zones.list",
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.list",
    "containeranalysis.notes.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.update",
    "iam.serviceAccounts.actAs",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.alertPolicyEditor",
   "role": {
    "description": "Read/write access to alerting policies.",
    "etag": "AA==",
    "name": "roles/monitoring.alertPolicyEditor",
    "stage": "BETA",
    "title": "Monitoring AlertPolicy Editor"
   },
   "included_permissions": [
    "monitoring.alertPolicies.create",
    "monitoring.alertPolicies.delete",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.alertPolicies.update"
   ]
  },
  {
   "name": "roles/healthcare.annotationReader",
   "role": {
    "description": "Read and list annotations in an Annotation store.",
    "etag": "AA==",
    "name": "roles/healthcare.annotationReader",
    "stage": "GA",
    "title": "Healthcare Annotation Reader"
   },
   "included_permissions": [
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.list",
    "healthcare.annotations.get",
    "healthcare.annotations.list",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.alertPolicyViewer",
   "role": {
    "description": "Read-only access to alerting policies.",
    "etag": "AA==",
    "name": "roles/monitoring.alertPolicyViewer",
    "stage": "BETA",
    "title": "Monitoring AlertPolicy Viewer"
   },
   "included_permissions": [
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list"
   ]
  },
  {
   "name": "roles/healthcare.annotationStoreAdmin",
   "role": {
    "description": "Administer Annotation stores.",
    "etag": "AA==",
    "name": "roles/healthcare.annotationStoreAdmin",
    "stage": "GA",
    "title": "Healthcare Annotation Administrator"
   },
   "included_permissions": [
    "healthcare.annotationStores.create",
    "healthcare.annotationStores.delete",
    "healthcare.annotationStores.evaluate",
    "healthcare.annotationStores.export",
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.import",
    "healthcare.annotationStores.list",
    "healthcare.annotationStores.setIamPolicy",
    "healthcare.annotationStores.update",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.dashboardEditor",
   "role": {
    "description": "Read/write access to dashboard configurations.",
    "etag": "AA==",
    "name": "roles/monitoring.dashboardEditor",
    "stage": "GA",
    "title": "Monitoring Dashboard Configuration Editor"
   },
   "included_permissions": [
    "monitoring.dashboards.create",
    "monitoring.dashboards.delete",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.dashboards.update"
   ]
  },
  {
   "name": "roles/healthcare.annotationStoreViewer",
   "role": {
    "description": "List Annotation Stores in a dataset.",
    "etag": "AA==",
    "name": "roles/healthcare.annotationStoreViewer",
    "stage": "GA",
    "title": "Healthcare Annotation Store Viewer"
   },
   "included_permissions": [
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.list",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.dashboardViewer",
   "role": {
    "description": "Read-only access to dashboard configurations.",
    "etag": "AA==",
    "name": "roles/monitoring.dashboardViewer",
    "stage": "GA",
    "title": "Monitoring Dashboard Configuration Viewer"
   },
   "included_permissions": [
    "monitoring.dashboards.get",
    "monitoring.dashboards.list"
   ]
  },
  {
   "name": "roles/memcache.admin",
   "role": {
    "description": "Full access to Memcached instances and related resources.",
    "etag": "AA==",
    "name": "roles/memcache.admin",
    "stage": "GA",
    "title": "Cloud Memorystore Memcached Admin"
   },
   "included_permissions": [
    "compute.networks.list",
    "memcache.instances.applyParameters",
    "memcache.instances.applySoftwareUpdate",
    "memcache.instances.create",
    "memcache.instances.delete",
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.instances.update",
    "memcache.instances.updateParameters",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.cancel",
    "memcache.operations.delete",
    "memcache.operations.get",
    "memcache.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gkehub.connect",
   "role": {
    "description": "Ability to set up GKE Connect between external clusters and Google.",
    "etag": "AA==",
    "name": "roles/gkehub.connect",
    "stage": "GA",
    "title": "GKE Connect Agent"
   },
   "included_permissions": [
    "gkehub.endpoints.connect"
   ]
  },
  {
   "name": "roles/monitoring.metricWriter",
   "role": {
    "description": "Write-only access to metrics.  This provides exactly the permissions needed by the Stackdriver agent and other systems that send metrics.",
    "etag": "AA==",
    "name": "roles/monitoring.metricWriter",
    "stage": "GA",
    "title": "Monitoring Metric Writer"
   },
   "included_permissions": [
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create"
   ]
  },
  {
   "name": "roles/proximitybeacon.attachmentPublisher",
   "role": {
    "description": "Grants necessary permissions to use beacons to create attachments in namespaces not owned by this project.",
    "etag": "AA==",
    "name": "roles/proximitybeacon.attachmentPublisher",
    "stage": "GA",
    "title": "Beacon Attachment Publisher"
   },
   "included_permissions": [
    "proximitybeacon.beacons.attach",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/gkehub.gatewayAdmin",
   "role": {
    "description": "Full access to Connect Gateway.",
    "etag": "AA==",
    "name": "roles/gkehub.gatewayAdmin",
    "stage": "GA",
    "title": "Connect Gateway Admin"
   },
   "included_permissions": [
    "gkehub.gateway.delete",
    "gkehub.gateway.get",
    "gkehub.gateway.getIamPolicy",
    "gkehub.gateway.patch",
    "gkehub.gateway.post",
    "gkehub.gateway.put",
    "gkehub.gateway.setIamPolicy"
   ]
  },
  {
   "name": "roles/proximitybeacon.attachmentViewer",
   "role": {
    "description": "Can view all attachments under a namespace; no beacon or namespace permissions.",
    "etag": "AA==",
    "name": "roles/proximitybeacon.attachmentViewer",
    "stage": "GA",
    "title": "Beacon Attachment Viewer"
   },
   "included_permissions": [
    "proximitybeacon.attachments.get",
    "proximitybeacon.attachments.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.notificationChannelEditor",
   "role": {
    "description": "Read/write access to notification channels.",
    "etag": "AA==",
    "name": "roles/monitoring.notificationChannelEditor",
    "stage": "BETA",
    "title": "Monitoring NotificationChannel Editor"
   },
   "included_permissions": [
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.create",
    "monitoring.notificationChannels.delete",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.notificationChannels.sendVerificationCode",
    "monitoring.notificationChannels.update",
    "monitoring.notificationChannels.verify"
   ]
  },
  {
   "name": "roles/gkehub.serviceAgent",
   "role": {
    "description": "Gives the GKE Hub service agent access to Cloud Platform resources.",
    "etag": "AA==",
    "name": "roles/gkehub.serviceAgent",
    "stage": "GA",
    "title": "GKE Hub Service Agent"
   },
   "included_permissions": [
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.update",
    "container.clusters.get",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.namespaces.get",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "gkehub.features.create",
    "gkehub.features.get",
    "gkehub.features.list",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.list",
    "gkehub.operations.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/monitoring.notificationChannelViewer",
   "role": {
    "description": "Read-only access to notification channels.",
    "etag": "AA==",
    "name": "roles/monitoring.notificationChannelViewer",
    "stage": "BETA",
    "title": "Monitoring NotificationChannel Viewer"
   },
   "included_permissions": [
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list"
   ]
  },
  {
   "name": "roles/gkehub.viewer",
   "role": {
    "description": "Read-only access to GKE Hubs and related resources.",
    "etag": "AA==",
    "name": "roles/gkehub.viewer",
    "stage": "GA",
    "title": "GKE Hub Viewer"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.notificationServiceAgent",
   "role": {
    "description": "Grants permissions to deliver notifications directly to resources within the target project, such as delivering to Cloud PubSub topics within the project.",
    "etag": "AA==",
    "name": "roles/monitoring.notificationServiceAgent",
    "stage": "GA",
    "title": "Monitoring Notification Service Agent"
   },
   "included_permissions": [
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/monitoring.servicesEditor",
   "role": {
    "description": "Read/write access to services.",
    "etag": "AA==",
    "name": "roles/monitoring.servicesEditor",
    "stage": "GA",
    "title": "Monitoring Services Editor"
   },
   "included_permissions": [
    "monitoring.services.create",
    "monitoring.services.delete",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.services.update",
    "monitoring.slos.create",
    "monitoring.slos.delete",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.slos.update"
   ]
  },
  {
   "name": "roles/recaptchaenterprise.viewer",
   "role": {
    "description": "Access to view reCAPTCHA Enterprise keys and metrics",
    "etag": "AA==",
    "name": "roles/recaptchaenterprise.viewer",
    "stage": "BETA",
    "title": "reCAPTCHA Enterprise Viewer"
   },
   "included_permissions": [
    "recaptchaenterprise.keys.get",
    "recaptchaenterprise.keys.list",
    "recaptchaenterprise.metrics.get",
    "recaptchaenterprise.projectmetadata.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/pubsublite.admin",
   "role": {
    "description": "Full access to topics and subscriptions.",
    "etag": "AA==",
    "name": "roles/pubsublite.admin",
    "stage": "GA",
    "title": "Pub/Sub Lite Admin"
   },
   "included_permissions": [
    "pubsublite.subscriptions.create",
    "pubsublite.subscriptions.delete",
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.subscriptions.setCursor",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.subscriptions.update",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.create",
    "pubsublite.topics.delete",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions",
    "pubsublite.topics.publish",
    "pubsublite.topics.subscribe",
    "pubsublite.topics.update"
   ]
  },
  {
   "name": "roles/pubsublite.editor",
   "role": {
    "description": "Modify topics and subscriptions, publish and consume messages.",
    "etag": "AA==",
    "name": "roles/pubsublite.editor",
    "stage": "GA",
    "title": "Pub/Sub Lite Editor"
   },
   "included_permissions": [
    "pubsublite.subscriptions.create",
    "pubsublite.subscriptions.delete",
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.subscriptions.setCursor",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.subscriptions.update",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.create",
    "pubsublite.topics.delete",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions",
    "pubsublite.topics.publish",
    "pubsublite.topics.subscribe",
    "pubsublite.topics.update"
   ]
  },
  {
   "name": "roles/healthcare.consentArtifactAdmin",
   "role": {
    "description": "Administer ConsentArtifact objects.",
    "etag": "AA==",
    "name": "roles/healthcare.consentArtifactAdmin",
    "stage": "GA",
    "title": "Healthcare Consent Artifact Administrator"
   },
   "included_permissions": [
    "healthcare.consentArtifacts.create",
    "healthcare.consentArtifacts.delete",
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.servicesViewer",
   "role": {
    "description": "Read-only access to services.",
    "etag": "AA==",
    "name": "roles/monitoring.servicesViewer",
    "stage": "GA",
    "title": "Monitoring Services Viewer"
   },
   "included_permissions": [
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list"
   ]
  },
  {
   "name": "roles/healthcare.consentArtifactEditor",
   "role": {
    "description": "Edit ConsentArtifact objects.",
    "etag": "AA==",
    "name": "roles/healthcare.consentArtifactEditor",
    "stage": "GA",
    "title": "Healthcare Consent Artifact Editor"
   },
   "included_permissions": [
    "healthcare.consentArtifacts.create",
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.consentArtifactReader",
   "role": {
    "description": "Read ConsentArtifact objects in a consent store.",
    "etag": "AA==",
    "name": "roles/healthcare.consentArtifactReader",
    "stage": "GA",
    "title": "Healthcare Consent Artifact Reader"
   },
   "included_permissions": [
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.consentEditor",
   "role": {
    "description": "Edit Consent objects.",
    "etag": "AA==",
    "name": "roles/healthcare.consentEditor",
    "stage": "GA",
    "title": "Healthcare Consent Editor"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consents.activate",
    "healthcare.consents.create",
    "healthcare.consents.delete",
    "healthcare.consents.get",
    "healthcare.consents.list",
    "healthcare.consents.reject",
    "healthcare.consents.revoke",
    "healthcare.consents.update",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.consentReader",
   "role": {
    "description": "Read Consent objects in a consent store.",
    "etag": "AA==",
    "name": "roles/healthcare.consentReader",
    "stage": "GA",
    "title": "Healthcare Consent Reader"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consents.get",
    "healthcare.consents.list",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.consentStoreAdmin",
   "role": {
    "description": "Administer Consent stores.",
    "etag": "AA==",
    "name": "roles/healthcare.consentStoreAdmin",
    "stage": "GA",
    "title": "Healthcare Consent Store Administrator"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.create",
    "healthcare.consentStores.delete",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consentStores.setIamPolicy",
    "healthcare.consentStores.update",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/monitoring.viewer",
   "role": {
    "description": "Read-only access to get and list information about all monitoring data and configuration.",
    "etag": "AA==",
    "name": "roles/monitoring.viewer",
    "stage": "GA",
    "title": "Monitoring Viewer"
   },
   "included_permissions": [
    "cloudnotifications.activities.list",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/multiclusteringress.serviceAgent",
   "role": {
    "description": "Gives the Multi Cluster Ingress service agent access to CloudPlatform resources.",
    "etag": "AA==",
    "name": "roles/multiclusteringress.serviceAgent",
    "stage": "GA",
    "title": "Multi Cluster Ingress Service Agent"
   },
   "included_permissions": [
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.networkEndpointGroups.use",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.securityPolicies.use",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.clusters.get",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.update",
    "container.events.create",
    "container.events.update",
    "container.namespaces.list",
    "container.secrets.get",
    "container.secrets.list",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/recommender.iamViewer",
   "role": {
    "description": "Viewer of IAM recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.iamViewer",
    "stage": "GA",
    "title": "IAM Recommender Viewer"
   },
   "included_permissions": [
    "recommender.iamPolicyInsights.get",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamServiceAccountInsights.get",
    "recommender.iamServiceAccountInsights.list",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/multiclustermetering.serviceAgent",
   "role": {
    "description": "Gives the Multi-cluster metering service agent access to CloudPlatform resources.",
    "etag": "AA==",
    "name": "roles/multiclustermetering.serviceAgent",
    "stage": "GA",
    "title": "Multi-cluster metering Service Agent"
   },
   "included_permissions": [
    "gkehub.features.get",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.get",
    "gkehub.memberships.list"
   ]
  },
  {
   "name": "roles/netappcloudvolumes.admin",
   "role": {
    "description": "This role is managed by NetApp, not Google.",
    "etag": "AA==",
    "name": "roles/netappcloudvolumes.admin",
    "stage": "BETA",
    "title": "NetApp Cloud Volumes Admin"
   },
   "included_permissions": [
    "cloudvolumesgcp-api.netapp.com/activeDirectories.create",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.delete",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.get",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.update",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.get",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.create",
    "cloudvolumesgcp-api.netapp.com/snapshots.delete",
    "cloudvolumesgcp-api.netapp.com/snapshots.get",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.update",
    "cloudvolumesgcp-api.netapp.com/volumes.create",
    "cloudvolumesgcp-api.netapp.com/volumes.delete",
    "cloudvolumesgcp-api.netapp.com/volumes.get",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "cloudvolumesgcp-api.netapp.com/volumes.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.projectCudViewer",
   "role": {
    "description": "Viewer of Project Usage Commitment Recommender.",
    "etag": "AA==",
    "name": "roles/recommender.projectCudViewer",
    "stage": "BETA",
    "title": "Project Usage Commitment Recommender Viewer"
   },
   "included_permissions": [
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.datasetViewer",
   "role": {
    "description": "List the Healthcare Datasets in a project.",
    "etag": "AA==",
    "name": "roles/healthcare.datasetViewer",
    "stage": "GA",
    "title": "Healthcare Dataset Viewer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/redis.admin",
   "role": {
    "description": "Full access to Redis instances and related resources.",
    "etag": "AA==",
    "name": "roles/redis.admin",
    "stage": "BETA",
    "title": "Cloud Memorystore Redis Admin"
   },
   "included_permissions": [
    "compute.networks.list",
    "redis.instances.create",
    "redis.instances.delete",
    "redis.instances.export",
    "redis.instances.failover",
    "redis.instances.get",
    "redis.instances.getAuthString",
    "redis.instances.import",
    "redis.instances.list",
    "redis.instances.update",
    "redis.instances.updateAuth",
    "redis.instances.upgrade",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.cancel",
    "redis.operations.delete",
    "redis.operations.get",
    "redis.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/healthcare.dicomEditor",
   "role": {
    "description": "Edit DICOM images individually and in bulk.",
    "etag": "AA==",
    "name": "roles/healthcare.dicomEditor",
    "stage": "GA",
    "title": "Healthcare DICOM Editor"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.dicomStores.dicomWebDelete",
    "healthcare.dicomStores.dicomWebRead",
    "healthcare.dicomStores.dicomWebWrite",
    "healthcare.dicomStores.export",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.import",
    "healthcare.dicomStores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.dicomStoreAdmin",
   "role": {
    "description": "Administer DICOM stores.",
    "etag": "AA==",
    "name": "roles/healthcare.dicomStoreAdmin",
    "stage": "GA",
    "title": "Healthcare DICOM Store Administrator"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.dicomStores.create",
    "healthcare.dicomStores.deidentify",
    "healthcare.dicomStores.delete",
    "healthcare.dicomStores.dicomWebDelete",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.list",
    "healthcare.dicomStores.setIamPolicy",
    "healthcare.dicomStores.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/redis.viewer",
   "role": {
    "description": "Read-only access to Redis instances and related resources.",
    "etag": "AA==",
    "name": "roles/redis.viewer",
    "stage": "BETA",
    "title": "Cloud Memorystore Redis Viewer"
   },
   "included_permissions": [
    "redis.instances.get",
    "redis.instances.list",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.get",
    "redis.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/redisenterprisecloud.admin",
   "role": {
    "description": "This role is managed by Redis Labs, not Google.",
    "etag": "AA==",
    "name": "roles/redisenterprisecloud.admin",
    "stage": "BETA",
    "title": "Redis Enterprise Cloud Admin"
   },
   "included_permissions": [
    "gcp.redisenterprise.com/databases.create",
    "gcp.redisenterprise.com/databases.delete",
    "gcp.redisenterprise.com/databases.get",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/databases.update",
    "gcp.redisenterprise.com/subscriptions.create",
    "gcp.redisenterprise.com/subscriptions.delete",
    "gcp.redisenterprise.com/subscriptions.get",
    "gcp.redisenterprise.com/subscriptions.list",
    "gcp.redisenterprise.com/subscriptions.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/networkmanagement.admin",
   "role": {
    "description": "Full access to Network Management resources.",
    "etag": "AA==",
    "name": "roles/networkmanagement.admin",
    "stage": "GA",
    "title": "Network Management Admin"
   },
   "included_permissions": [
    "networkmanagement.connectivitytests.create",
    "networkmanagement.connectivitytests.delete",
    "networkmanagement.connectivitytests.get",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.connectivitytests.rerun",
    "networkmanagement.connectivitytests.setIamPolicy",
    "networkmanagement.connectivitytests.update",
    "networkmanagement.locations.get",
    "networkmanagement.locations.list",
    "networkmanagement.operations.get",
    "networkmanagement.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/redis.serviceAgent",
   "role": {
    "description": "Gives Cloud Memorystore Redis service account access to managed resource",
    "etag": "AA==",
    "name": "roles/redis.serviceAgent",
    "stage": "GA",
    "title": "Cloud Memorystore Redis Service Agent"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.projects.get",
    "compute.routes.get",
    "compute.routes.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.dicomStoreViewer",
   "role": {
    "description": "List DICOM Stores in a dataset.",
    "etag": "AA==",
    "name": "roles/healthcare.dicomStoreViewer",
    "stage": "GA",
    "title": "Healthcare DICOM Store Viewer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/networkmanagement.serviceAgent",
   "role": {
    "description": "Grants the GCP Network Management API the authority to complete analysis based on network configurations from Compute Engine and Container Engine.",
    "etag": "AA==",
    "name": "roles/networkmanagement.serviceAgent",
    "stage": "GA",
    "title": "GCP Network Management Service Agent"
   },
   "included_permissions": [
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instances.get",
    "compute.instances.list",
    "compute.networks.get",
    "compute.networks.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.nodes.get",
    "container.nodes.list"
   ]
  },
  {
   "name": "roles/networkmanagement.viewer",
   "role": {
    "description": "Read-only access to Network Management resources.",
    "etag": "AA==",
    "name": "roles/networkmanagement.viewer",
    "stage": "GA",
    "title": "Network Management Viewer"
   },
   "included_permissions": [
    "networkmanagement.connectivitytests.get",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.locations.get",
    "networkmanagement.locations.list",
    "networkmanagement.operations.get",
    "networkmanagement.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.fhirResourceEditor",
   "role": {
    "description": "Create, delete, update, read and search FHIR resources.",
    "etag": "AA==",
    "name": "roles/healthcare.fhirResourceEditor",
    "stage": "GA",
    "title": "Healthcare FHIR Resource Editor"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.fhirResources.create",
    "healthcare.fhirResources.delete",
    "healthcare.fhirResources.get",
    "healthcare.fhirResources.patch",
    "healthcare.fhirResources.translateConceptMap",
    "healthcare.fhirResources.update",
    "healthcare.fhirStores.executeBundle",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.searchResources",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.fhirResourceReader",
   "role": {
    "description": "Read and search FHIR resources.",
    "etag": "AA==",
    "name": "roles/healthcare.fhirResourceReader",
    "stage": "GA",
    "title": "Healthcare FHIR Resource Reader"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.fhirResources.get",
    "healthcare.fhirResources.translateConceptMap",
    "healthcare.fhirStores.executeBundle",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.searchResources",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/notebooks.legacyAdmin",
   "role": {
    "description": "Full access to Notebooks all resources through compute API.",
    "etag": "AA==",
    "name": "roles/notebooks.legacyAdmin",
    "stage": "GA",
    "title": "Notebooks Legacy Admin"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.commitments.create",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.commitments.updateReservations",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.delete",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.globalPublicDelegatedPrefixes.create",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.globalPublicDelegatedPrefixes.use",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.create",
    "compute.maintenancePolicies.delete",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.maintenancePolicies.setIamPolicy",
    "compute.maintenancePolicies.use",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.addNodes",
    "compute.nodeGroups.create",
    "compute.nodeGroups.delete",
    "compute.nodeGroups.deleteNodes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeGroups.setIamPolicy",
    "compute.nodeGroups.setNodeTemplate",
    "compute.nodeGroups.update",
    "compute.nodeTemplates.create",
    "compute.nodeTemplates.delete",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTemplates.setIamPolicy",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.administerXpn",
    "compute.organizations.disableXpnHost",
    "compute.organizations.disableXpnResource",
    "compute.organizations.enableXpnHost",
    "compute.organizations.enableXpnResource",
    "compute.organizations.listAssociations",
    "compute.organizations.setSecurityPolicy",
    "compute.oslogin.updateExternalUser",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.projects.setDefaultNetworkTier",
    "compute.projects.setDefaultServiceAccount",
    "compute.projects.setUsageExportBucket",
    "compute.publicAdvertisedPrefixes.create",
    "compute.publicAdvertisedPrefixes.delete",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicAdvertisedPrefixes.update",
    "compute.publicAdvertisedPrefixes.updatePolicy",
    "compute.publicAdvertisedPrefixes.use",
    "compute.publicDelegatedPrefixes.create",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.publicDelegatedPrefixes.use",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.delete",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionOperations.setIamPolicy",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.create",
    "compute.reservations.delete",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.reservations.resize",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.delete",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zoneOperations.setIamPolicy",
    "compute.zones.get",
    "compute.zones.list",
    "notebooks.environments.create",
    "notebooks.environments.delete",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.environments.setIamPolicy",
    "notebooks.executions.create",
    "notebooks.executions.delete",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.executions.setIamPolicy",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.delete",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.reset",
    "notebooks.instances.setAccelerator",
    "notebooks.instances.setIamPolicy",
    "notebooks.instances.setLabels",
    "notebooks.instances.setMachineType",
    "notebooks.instances.start",
    "notebooks.instances.stop",
    "notebooks.instances.update",
    "notebooks.instances.updateConfig",
    "notebooks.instances.updateShieldInstanceConfig",
    "notebooks.instances.upgrade",
    "notebooks.instances.use",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.cancel",
    "notebooks.operations.delete",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.delete",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "notebooks.schedules.setIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/healthcare.fhirStoreAdmin",
   "role": {
    "description": "Administer FHIR resource stores.",
    "etag": "AA==",
    "name": "roles/healthcare.fhirStoreAdmin",
    "stage": "GA",
    "title": "Healthcare FHIR Store Administrator"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.fhirResources.purge",
    "healthcare.fhirStores.create",
    "healthcare.fhirStores.deidentify",
    "healthcare.fhirStores.delete",
    "healthcare.fhirStores.export",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.import",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.setIamPolicy",
    "healthcare.fhirStores.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/notebooks.legacyViewer",
   "role": {
    "description": "Read-only access to Notebooks all resources through compute API.",
    "etag": "AA==",
    "name": "roles/notebooks.legacyViewer",
    "stage": "GA",
    "title": "Notebooks Legacy Viewer"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/notebooks.runner",
   "role": {
    "description": "Restricted access for running scheduled Notebooks.",
    "etag": "AA==",
    "name": "roles/notebooks.runner",
    "stage": "GA",
    "title": "Notebooks Runner"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.create",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/notebooks.serviceAgent",
   "role": {
    "description": "Provide access for notebooks service agent to manage notebook instances in user projects",
    "etag": "AA==",
    "name": "roles/notebooks.serviceAgent",
    "stage": "GA",
    "title": "AI Platform Notebooks Service Agent"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.use",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.list",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.list",
    "notebooks.environments.create",
    "notebooks.environments.delete",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.environments.setIamPolicy",
    "notebooks.executions.create",
    "notebooks.executions.delete",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.executions.setIamPolicy",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.delete",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.reset",
    "notebooks.instances.setAccelerator",
    "notebooks.instances.setIamPolicy",
    "notebooks.instances.setLabels",
    "notebooks.instances.setMachineType",
    "notebooks.instances.start",
    "notebooks.instances.stop",
    "notebooks.instances.update",
    "notebooks.instances.updateConfig",
    "notebooks.instances.updateShieldInstanceConfig",
    "notebooks.instances.upgrade",
    "notebooks.instances.use",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.cancel",
    "notebooks.operations.delete",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.delete",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "notebooks.schedules.setIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/healthcare.hl7V2Consumer",
   "role": {
    "description": "List and read HL7v2 messages, update message labels, and publish new messages.",
    "etag": "AA==",
    "name": "roles/healthcare.hl7V2Consumer",
    "stage": "GA",
    "title": "Healthcare HL7v2 Message Consumer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.hl7V2Messages.create",
    "healthcare.hl7V2Messages.get",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Messages.update",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.hl7V2Editor",
   "role": {
    "description": "Read, write, and delete access to HL7v2 messages.",
    "etag": "AA==",
    "name": "roles/healthcare.hl7V2Editor",
    "stage": "GA",
    "title": "Healthcare HL7v2 Message Editor"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.hl7V2Messages.create",
    "healthcare.hl7V2Messages.delete",
    "healthcare.hl7V2Messages.get",
    "healthcare.hl7V2Messages.ingest",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Messages.update",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/notebooks.viewer",
   "role": {
    "description": "Read-only access to Notebooks all resources.",
    "etag": "AA==",
    "name": "roles/notebooks.viewer",
    "stage": "GA",
    "title": "Notebooks Viewer"
   },
   "included_permissions": [
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/healthcare.hl7V2Ingest",
   "role": {
    "description": "Ingest HL7v2 messages received from a source network.",
    "etag": "AA==",
    "name": "roles/healthcare.hl7V2Ingest",
    "stage": "GA",
    "title": "Healthcare HL7v2 Message Ingest"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.hl7V2Messages.ingest",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.hl7V2StoreAdmin",
   "role": {
    "description": "Administer HL7v2 Stores.",
    "etag": "AA==",
    "name": "roles/healthcare.hl7V2StoreAdmin",
    "stage": "GA",
    "title": "Healthcare HL7v2 Store Administrator"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.hl7V2Stores.create",
    "healthcare.hl7V2Stores.delete",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.import",
    "healthcare.hl7V2Stores.list",
    "healthcare.hl7V2Stores.setIamPolicy",
    "healthcare.hl7V2Stores.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.hl7V2StoreViewer",
   "role": {
    "description": "View HL7v2 Stores in a dataset.",
    "etag": "AA==",
    "name": "roles/healthcare.hl7V2StoreViewer",
    "stage": "GA",
    "title": "Healthcare HL7v2 Store Viewer"
   },
   "included_permissions": [
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/oauthconfig.viewer",
   "role": {
    "description": "Read-only access to OAuth config resources",
    "etag": "AA==",
    "name": "roles/oauthconfig.viewer",
    "stage": "BETA",
    "title": "OAuth Config Viewer"
   },
   "included_permissions": [
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.list",
    "oauthconfig.clientpolicy.get",
    "oauthconfig.testusers.get",
    "oauthconfig.verification.get"
   ]
  },
  {
   "name": "roles/ondemandscanning.admin",
   "role": {
    "description": "All permissions for On-Demand Scanning",
    "etag": "AA==",
    "name": "roles/ondemandscanning.admin",
    "stage": "BETA",
    "title": "On-Demand Scanning Admin"
   },
   "included_permissions": [
    "ondemandscanning.operations.cancel",
    "ondemandscanning.operations.delete",
    "ondemandscanning.operations.get",
    "ondemandscanning.operations.list",
    "ondemandscanning.operations.wait",
    "ondemandscanning.scans.analyzePackages",
    "ondemandscanning.scans.listVulnerabilities",
    "ondemandscanning.scans.scan"
   ]
  },
  {
   "name": "roles/opsconfigmonitoring.resourceMetadata.writer",
   "role": {
    "description": "Write-only access to resource metadata. This provides exactly the permissions needed by the Ops Config Monitoring metadata agent and other systems that send metadata.",
    "etag": "AA==",
    "name": "roles/opsconfigmonitoring.resourceMetadata.writer",
    "stage": "BETA",
    "title": "Ops Config Monitoring Resource Metadata Writer"
   },
   "included_permissions": [
    "opsconfigmonitoring.resourceMetadata.write"
   ]
  },
  {
   "name": "roles/orgpolicy.policyAdmin",
   "role": {
    "description": "The permission to set Organization Policies on resources.",
    "etag": "AA==",
    "name": "roles/orgpolicy.policyAdmin",
    "stage": "GA",
    "title": "Organization Policy Administrator"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "orgpolicy.policy.set"
   ]
  },
  {
   "name": "roles/orgpolicy.policyViewer",
   "role": {
    "description": "Access to view Organization Policies on resources.",
    "etag": "AA==",
    "name": "roles/orgpolicy.policyViewer",
    "stage": "GA",
    "title": "Organization Policy Viewer"
   },
   "included_permissions": [
    "orgpolicy.policy.get"
   ]
  },
  {
   "name": "roles/healthcare.userDataMappingEditor",
   "role": {
    "description": "Edit UserDataMapping objects.",
    "etag": "AA==",
    "name": "roles/healthcare.userDataMappingEditor",
    "stage": "GA",
    "title": "Healthcare User Data Mapping Editor"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "healthcare.userDataMappings.archive",
    "healthcare.userDataMappings.create",
    "healthcare.userDataMappings.delete",
    "healthcare.userDataMappings.get",
    "healthcare.userDataMappings.list",
    "healthcare.userDataMappings.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/healthcare.userDataMappingReader",
   "role": {
    "description": "Read UserDataMapping objects in a consent store.",
    "etag": "AA==",
    "name": "roles/healthcare.userDataMappingReader",
    "stage": "GA",
    "title": "Healthcare User Data Mapping Reader"
   },
   "included_permissions": [
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.datasets.get",
    "healthcare.datasets.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.operations.get",
    "healthcare.userDataMappings.get",
    "healthcare.userDataMappings.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.securityReviewer",
   "role": {
    "description": "Security reviewer role, with permissions to get any IAM policy.",
    "etag": "AA==",
    "name": "roles/iam.securityReviewer",
    "stage": "GA",
    "title": "Security Reviewer"
   },
   "included_permissions": [
    "accessapproval.requests.list",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.servicePerimeters.list",
    "actions.agentVersions.list",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotations.list",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.list",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.list",
    "aiplatform.endpoints.list",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.list",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.list",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.list",
    "aiplatform.studies.list",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.list",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.locations.list",
    "apigateway.operations.list",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.list",
    "apigee.apps.list",
    "apigee.caches.list",
    "apigee.datacollectors.list",
    "apigee.datastores.list",
    "apigee.deployments.list",
    "apigee.developerappattributes.list",
    "apigee.developerapps.list",
    "apigee.developerattributes.list",
    "apigee.developers.list",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.list",
    "apigee.environments.getIamPolicy",
    "apigee.environments.list",
    "apigee.exports.list",
    "apigee.flowhooks.list",
    "apigee.hostqueries.list",
    "apigee.instanceattachments.list",
    "apigee.instances.list",
    "apigee.keystorealiases.list",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.list",
    "apigee.operations.list",
    "apigee.organizations.list",
    "apigee.portals.list",
    "apigee.proxies.list",
    "apigee.proxyrevisions.list",
    "apigee.queries.list",
    "apigee.references.list",
    "apigee.reports.list",
    "apigee.resourcefiles.list",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflows.list",
    "apigee.targetservers.list",
    "apigee.tracesessions.list",
    "apigeeconnect.connections.list",
    "apikeys.keys.list",
    "appengine.instances.list",
    "appengine.memcache.list",
    "appengine.operations.list",
    "appengine.services.list",
    "appengine.versions.list",
    "artifactregistry.files.list",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.list",
    "artifactregistry.versions.list",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.list",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.list",
    "automl.datasets.getIamPolicy",
    "automl.datasets.list",
    "automl.examples.list",
    "automl.humanAnnotationTasks.list",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.modelEvaluations.list",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.operations.list",
    "automl.tableSpecs.list",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "autoscaling.sites.getIamPolicy",
    "bigquery.capacityCommitments.list",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.datasets.getIamPolicy",
    "bigquery.jobs.list",
    "bigquery.models.list",
    "bigquery.reservationAssignments.list",
    "bigquery.reservations.list",
    "bigquery.routines.list",
    "bigquery.savedqueries.list",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.list",
    "bigtable.appProfiles.list",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.clusters.list",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "billing.accounts.getIamPolicy",
    "billing.accounts.list",
    "billing.budgets.list",
    "billing.credits.list",
    "billing.resourceAssociations.list",
    "billing.subscriptions.list",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.policy.getIamPolicy",
    "clientauthconfig.brands.list",
    "clientauthconfig.clients.list",
    "cloudasset.feeds.list",
    "cloudbuild.builds.list",
    "clouddebugger.breakpoints.list",
    "clouddebugger.debuggees.list",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.list",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.list",
    "cloudiot.devices.list",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudjobdiscovery.companies.list",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudnotifications.activities.list",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprofiler.profiles.list",
    "cloudscheduler.jobs.list",
    "cloudscheduler.locations.list",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scans.list",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.list",
    "cloudsql.instances.list",
    "cloudsql.sslCerts.list",
    "cloudsql.users.list",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.list",
    "cloudsupport.techCases.list",
    "cloudtasks.locations.list",
    "cloudtasks.queues.getIamPolicy",
    "cloudtasks.queues.list",
    "cloudtasks.tasks.list",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.steps.list",
    "cloudtrace.insights.list",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.list",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.list",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "composer.environments.list",
    "composer.imageversions.list",
    "composer.operations.list",
    "compute.acceleratorTypes.list",
    "compute.addresses.list",
    "compute.autoscalers.list",
    "compute.backendBuckets.list",
    "compute.backendServices.list",
    "compute.commitments.list",
    "compute.diskTypes.list",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.list",
    "compute.forwardingRules.list",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.list",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.list",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.getIamPolicy",
    "compute.instances.list",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.list",
    "compute.interconnects.list",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.list",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.list",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.list",
    "compute.regions.list",
    "compute.reservations.list",
    "compute.resourcePolicies.list",
    "compute.routers.list",
    "compute.routes.list",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.list",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.list",
    "compute.sslPolicies.list",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.list",
    "compute.targetPools.list",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.list",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.list",
    "consumerprocurement.accounts.list",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.list",
    "consumerprocurement.orders.list",
    "container.apiServices.list",
    "container.auditSinks.list",
    "container.backendConfigs.list",
    "container.bindings.list",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.list",
    "container.clusters.list",
    "container.componentStatuses.list",
    "container.configMaps.list",
    "container.controllerRevisions.list",
    "container.cronJobs.list",
    "container.csiDrivers.list",
    "container.csiNodeInfos.list",
    "container.csiNodes.list",
    "container.customResourceDefinitions.list",
    "container.daemonSets.list",
    "container.deployments.list",
    "container.endpointSlices.list",
    "container.endpoints.list",
    "container.events.list",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.list",
    "container.initializerConfigurations.list",
    "container.jobs.list",
    "container.leases.list",
    "container.limitRanges.list",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.list",
    "container.networkPolicies.list",
    "container.nodes.list",
    "container.operations.list",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.list",
    "container.petSets.list",
    "container.podDisruptionBudgets.list",
    "container.podPresets.list",
    "container.podSecurityPolicies.list",
    "container.podTemplates.list",
    "container.pods.list",
    "container.priorityClasses.list",
    "container.replicaSets.list",
    "container.replicationControllers.list",
    "container.resourceQuotas.list",
    "container.roleBindings.list",
    "container.roles.list",
    "container.runtimeClasses.list",
    "container.scheduledJobs.list",
    "container.selfSubjectAccessReviews.list",
    "container.serviceAccounts.list",
    "container.services.list",
    "container.statefulSets.list",
    "container.storageClasses.list",
    "container.storageStates.list",
    "container.storageVersionMigrations.list",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.list",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.list",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "dataflow.jobs.list",
    "dataflow.messages.list",
    "dataflow.snapshots.list",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.locations.list",
    "datafusion.operations.list",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.list",
    "datalabeling.examples.list",
    "datalabeling.instructions.list",
    "datalabeling.operations.list",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.locations.list",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.operations.list",
    "dataproc.agents.list",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.list",
    "dataprocessing.datasources.list",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.groupcontrols.list",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.entities.list",
    "datastore.indexes.list",
    "datastore.locations.list",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.operations.list",
    "datastore.statistics.list",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.deployments.getIamPolicy",
    "deploymentmanager.deployments.list",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.types.list",
    "dialogflow.agents.list",
    "dialogflow.answerrecords.list",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.list",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.list",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.list",
    "dialogflow.environments.list",
    "dialogflow.flows.list",
    "dialogflow.intents.list",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.list",
    "dialogflow.pages.list",
    "dialogflow.participants.list",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumbers.list",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.versions.list",
    "dialogflow.webhooks.list",
    "dlp.analyzeRiskTemplates.list",
    "dlp.deidentifyTemplates.list",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.list",
    "dlp.jobTriggers.list",
    "dlp.jobs.list",
    "dlp.storedInfoTypes.list",
    "dns.changes.list",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.list",
    "dns.managedZones.list",
    "dns.policies.getIamPolicy",
    "dns.policies.list",
    "dns.resourceRecordSets.list",
    "documentai.evaluations.list",
    "documentai.labelerPools.list",
    "documentai.locations.list",
    "documentai.processorTypes.list",
    "documentai.processorVersions.list",
    "documentai.processors.list",
    "domains.locations.list",
    "domains.operations.list",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.list",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.operations.list",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.list",
    "errorreporting.groups.list",
    "essentialcontacts.contacts.list",
    "eventarc.locations.list",
    "eventarc.operations.list",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "file.backups.list",
    "file.instances.list",
    "file.locations.list",
    "file.operations.list",
    "file.snapshots.list",
    "firebase.clients.list",
    "firebase.links.list",
    "firebaseabt.experiments.list",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "firebasecrashlytics.issues.list",
    "firebasedatabase.instances.list",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.list",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.list",
    "firebaseinappmessaging.campaigns.list",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.list",
    "firebaseml.modelversions.list",
    "firebasenotifications.messages.list",
    "firebasepredictions.predictions.list",
    "firebaserules.releases.list",
    "firebaserules.rulesets.list",
    "firebasestorage.buckets.list",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.list",
    "gameservices.locations.list",
    "gameservices.operations.list",
    "gameservices.realms.list",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/subscriptions.list",
    "genomics.datasets.getIamPolicy",
    "genomics.datasets.list",
    "genomics.operations.list",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.gateway.getIamPolicy",
    "gkehub.locations.list",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.operations.list",
    "gsuiteaddons.deployments.list",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.list",
    "healthcare.annotations.list",
    "healthcare.attributeDefinitions.list",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consents.list",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.list",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.list",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.list",
    "healthcare.operations.list",
    "healthcare.userDataMappings.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.roles.get",
    "iam.roles.list",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iap.tunnel.getIamPolicy",
    "iap.tunnelInstances.getIamPolicy",
    "iap.tunnelZones.getIamPolicy",
    "iap.web.getIamPolicy",
    "iap.webServiceVersions.getIamPolicy",
    "iap.webServices.getIamPolicy",
    "iap.webTypes.getIamPolicy",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPools.list",
    "lifesciences.operations.list",
    "logging.buckets.list",
    "logging.exclusions.list",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.notificationRules.list",
    "logging.privateLogEntries.list",
    "logging.queries.list",
    "logging.sinks.list",
    "logging.views.list",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.locations.list",
    "managedidentities.operations.list",
    "memcache.instances.list",
    "memcache.locations.list",
    "memcache.operations.list",
    "metastore.imports.list",
    "metastore.locations.list",
    "metastore.operations.list",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.locations.list",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.operations.list",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.trials.list",
    "ml.versions.list",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.list",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.list",
    "monitoring.services.list",
    "monitoring.slos.list",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.list",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.locations.list",
    "networkmanagement.operations.list",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.locations.list",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.locations.list",
    "networkservices.operations.list",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.locations.list",
    "notebooks.operations.list",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "ondemandscanning.operations.list",
    "osconfig.guestPolicies.list",
    "osconfig.patchDeployments.list",
    "osconfig.patchJobs.list",
    "policysimulator.replayResults.list",
    "policysimulator.replays.list",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.locations.list",
    "privateca.operations.list",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.getIamPolicy",
    "proximitybeacon.beacons.list",
    "proximitybeacon.namespaces.getIamPolicy",
    "proximitybeacon.namespaces.list",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsublite.subscriptions.list",
    "pubsublite.topics.list",
    "recaptchaenterprise.keys.list",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeFirewallInsights.list",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamServiceAccountInsights.list",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.usageCommitmentRecommendations.list",
    "redis.instances.list",
    "redis.locations.list",
    "redis.operations.list",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.workerpools.list",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.getIamPolicy",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "retail.catalogs.list",
    "retail.operations.list",
    "retail.products.list",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.list",
    "run.routes.list",
    "run.services.getIamPolicy",
    "run.services.list",
    "runtimeconfig.configs.getIamPolicy",
    "runtimeconfig.configs.list",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.getIamPolicy",
    "runtimeconfig.variables.list",
    "runtimeconfig.waiters.getIamPolicy",
    "runtimeconfig.waiters.list",
    "secretmanager.locations.list",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.versions.list",
    "securitycenter.assets.list",
    "securitycenter.findings.list",
    "securitycenter.notificationconfig.list",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "serviceconsumermanagement.tenancyu.list",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicemanagement.consumerSettings.getIamPolicy",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.services.getIamPolicy",
    "servicemanagement.services.list",
    "servicenetworking.operations.list",
    "serviceusage.operations.list",
    "serviceusage.services.list",
    "source.repos.getIamPolicy",
    "source.repos.list",
    "spanner.backupOperations.list",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.databaseOperations.list",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.list",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.sessions.list",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.hmacKeys.list",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storagetransfer.jobs.list",
    "storagetransfer.operations.list",
    "tpu.acceleratortypes.list",
    "tpu.locations.list",
    "tpu.nodes.list",
    "tpu.operations.list",
    "tpu.tensorflowversions.list",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.list",
    "vmmigration.deployments.list",
    "vpcaccess.connectors.list",
    "vpcaccess.locations.list",
    "vpcaccess.operations.list",
    "workflows.executions.list",
    "workflows.locations.list",
    "workflows.operations.list",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list"
   ]
  },
  {
   "name": "roles/iam.serviceAccountAdmin",
   "role": {
    "description": "Create and manage service accounts.",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountAdmin",
    "stage": "GA",
    "title": "Service Account Admin"
   },
   "included_permissions": [
    "iam.serviceAccounts.create",
    "iam.serviceAccounts.delete",
    "iam.serviceAccounts.disable",
    "iam.serviceAccounts.enable",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.setIamPolicy",
    "iam.serviceAccounts.undelete",
    "iam.serviceAccounts.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.organizationRoleViewer",
   "role": {
    "description": "Read access to all custom roles in the organization and the projects below it.",
    "etag": "AA==",
    "name": "roles/iam.organizationRoleViewer",
    "stage": "GA",
    "title": "Organization Role Viewer"
   },
   "included_permissions": [
    "iam.roles.get",
    "iam.roles.list",
    "resourcemanager.organizations.get",
    "resourcemanager.organizations.getIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.roleAdmin",
   "role": {
    "description": "Access to administer all custom roles in the project.",
    "etag": "AA==",
    "name": "roles/iam.roleAdmin",
    "stage": "GA",
    "title": "Role Administrator"
   },
   "included_permissions": [
    "iam.roles.create",
    "iam.roles.delete",
    "iam.roles.get",
    "iam.roles.list",
    "iam.roles.undelete",
    "iam.roles.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy"
   ]
  },
  {
   "name": "roles/iam.roleViewer",
   "role": {
    "description": "Read access to all custom roles in the project.",
    "etag": "AA==",
    "name": "roles/iam.roleViewer",
    "stage": "GA",
    "title": "Role Viewer"
   },
   "included_permissions": [
    "iam.roles.get",
    "iam.roles.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy"
   ]
  },
  {
   "name": "roles/iam.serviceAccountTokenCreator",
   "role": {
    "description": "Impersonate service accounts (create OAuth2 access tokens, sign blobs or JWTs, etc).",
    "etag": "AA==",
    "name": "roles/iam.serviceAccountTokenCreator",
    "stage": "GA",
    "title": "Service Account Token Creator"
   },
   "included_permissions": [
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.implicitDelegation",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/osconfig.guestPolicyViewer",
   "role": {
    "description": "Viewer of GuestPolicy resources",
    "etag": "AA==",
    "name": "roles/osconfig.guestPolicyViewer",
    "stage": "BETA",
    "title": "GuestPolicy Viewer"
   },
   "included_permissions": [
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/iam.workloadIdentityUser",
   "role": {
    "description": "Impersonate service accounts from GKE Workloads",
    "etag": "AA==",
    "name": "roles/iam.workloadIdentityUser",
    "stage": "GA",
    "title": "Workload Identity User"
   },
   "included_permissions": [
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.list"
   ]
  },
  {
   "name": "roles/iap.admin",
   "role": {
    "description": "Administrator of IAP Permissions",
    "etag": "AA==",
    "name": "roles/iap.admin",
    "stage": "GA",
    "title": "IAP Policy Admin"
   },
   "included_permissions": [
    "iap.tunnel.getIamPolicy",
    "iap.tunnel.setIamPolicy",
    "iap.tunnelInstances.getIamPolicy",
    "iap.tunnelInstances.setIamPolicy",
    "iap.tunnelZones.getIamPolicy",
    "iap.tunnelZones.setIamPolicy",
    "iap.web.getIamPolicy",
    "iap.web.setIamPolicy",
    "iap.webServiceVersions.getIamPolicy",
    "iap.webServiceVersions.setIamPolicy",
    "iap.webServices.getIamPolicy",
    "iap.webServices.setIamPolicy",
    "iap.webTypes.getIamPolicy",
    "iap.webTypes.setIamPolicy"
   ]
  },
  {
   "name": "roles/osconfig.patchDeploymentViewer",
   "role": {
    "description": "Viewer of PatchDeployment resources",
    "etag": "AA==",
    "name": "roles/osconfig.patchDeploymentViewer",
    "stage": "GA",
    "title": "PatchDeployment Viewer"
   },
   "included_permissions": [
    "osconfig.patchDeployments.get",
    "osconfig.patchDeployments.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/pubsublite.publisher",
   "role": {
    "description": "Publish messages to a topic.",
    "etag": "AA==",
    "name": "roles/pubsublite.publisher",
    "stage": "GA",
    "title": "Pub/Sub Lite Publisher"
   },
   "included_permissions": [
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.publish"
   ]
  },
  {
   "name": "roles/osconfig.patchJobExecutor",
   "role": {
    "description": "Access to execute Patch Jobs.",
    "etag": "AA==",
    "name": "roles/osconfig.patchJobExecutor",
    "stage": "GA",
    "title": "Patch Job Executor"
   },
   "included_permissions": [
    "osconfig.patchJobs.exec",
    "osconfig.patchJobs.get",
    "osconfig.patchJobs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/osconfig.patchJobViewer",
   "role": {
    "description": "Get and list Patch Jobs.",
    "etag": "AA==",
    "name": "roles/osconfig.patchJobViewer",
    "stage": "GA",
    "title": "Patch Job Viewer"
   },
   "included_permissions": [
    "osconfig.patchJobs.get",
    "osconfig.patchJobs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/pubsublite.subscriber",
   "role": {
    "description": "Subscribe to and read messages from a topic.",
    "etag": "AA==",
    "name": "roles/pubsublite.subscriber",
    "stage": "GA",
    "title": "Pub/Sub Lite Subscriber"
   },
   "included_permissions": [
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.setCursor",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.subscribe"
   ]
  },
  {
   "name": "roles/owner",
   "role": {
    "description": "Full access to all resources.",
    "etag": "AA==",
    "name": "roles/owner",
    "stage": "GA",
    "title": "Owner"
   },
   "included_permissions": [
    "accessapproval.requests.approve",
    "accessapproval.requests.dismiss",
    "accessapproval.requests.get",
    "accessapproval.requests.list",
    "accessapproval.settings.delete",
    "accessapproval.settings.get",
    "accessapproval.settings.update",
    "accesscontextmanager.accessLevels.create",
    "accesscontextmanager.accessLevels.delete",
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessLevels.replaceAll",
    "accesscontextmanager.accessLevels.update",
    "accesscontextmanager.accessPolicies.create",
    "accesscontextmanager.accessPolicies.delete",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessPolicies.setIamPolicy",
    "accesscontextmanager.accessPolicies.update",
    "accesscontextmanager.accessZones.create",
    "accesscontextmanager.accessZones.delete",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.accessZones.update",
    "accesscontextmanager.gcpUserAccessBindings.create",
    "accesscontextmanager.gcpUserAccessBindings.delete",
    "accesscontextmanager.gcpUserAccessBindings.get",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.gcpUserAccessBindings.update",
    "accesscontextmanager.policies.create",
    "accesscontextmanager.policies.delete",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.policies.setIamPolicy",
    "accesscontextmanager.policies.update",
    "accesscontextmanager.servicePerimeters.commit",
    "accesscontextmanager.servicePerimeters.create",
    "accesscontextmanager.servicePerimeters.delete",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "accesscontextmanager.servicePerimeters.replaceAll",
    "accesscontextmanager.servicePerimeters.update",
    "actions.agent.claimContentProvider",
    "actions.agent.get",
    "actions.agent.update",
    "actions.agentVersions.create",
    "actions.agentVersions.delete",
    "actions.agentVersions.deploy",
    "actions.agentVersions.get",
    "actions.agentVersions.list",
    "aiplatform.annotationSpecs.create",
    "aiplatform.annotationSpecs.delete",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotationSpecs.update",
    "aiplatform.annotations.create",
    "aiplatform.annotations.delete",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.annotations.update",
    "aiplatform.batchPredictionJobs.cancel",
    "aiplatform.batchPredictionJobs.create",
    "aiplatform.batchPredictionJobs.delete",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.cancel",
    "aiplatform.customJobs.create",
    "aiplatform.customJobs.delete",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.create",
    "aiplatform.dataItems.delete",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataItems.update",
    "aiplatform.dataLabelingJobs.cancel",
    "aiplatform.dataLabelingJobs.create",
    "aiplatform.dataLabelingJobs.delete",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.create",
    "aiplatform.datasets.delete",
    "aiplatform.datasets.export",
    "aiplatform.datasets.get",
    "aiplatform.datasets.import",
    "aiplatform.datasets.list",
    "aiplatform.datasets.update",
    "aiplatform.endpoints.create",
    "aiplatform.endpoints.delete",
    "aiplatform.endpoints.deploy",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.endpoints.undeploy",
    "aiplatform.endpoints.update",
    "aiplatform.hyperparameterTuningJobs.cancel",
    "aiplatform.hyperparameterTuningJobs.create",
    "aiplatform.hyperparameterTuningJobs.delete",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.migratableResources.migrate",
    "aiplatform.migratableResources.search",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.exportEvaluatedDataItems",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.delete",
    "aiplatform.models.export",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.models.upload",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.create",
    "aiplatform.specialistPools.delete",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.specialistPools.update",
    "aiplatform.studies.create",
    "aiplatform.studies.delete",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.studies.update",
    "aiplatform.trainingPipelines.cancel",
    "aiplatform.trainingPipelines.create",
    "aiplatform.trainingPipelines.delete",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.create",
    "aiplatform.trials.delete",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "aiplatform.trials.update",
    "androidmanagement.enterprises.manage",
    "apigateway.apiconfigs.create",
    "apigateway.apiconfigs.delete",
    "apigateway.apiconfigs.get",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apiconfigs.setIamPolicy",
    "apigateway.apiconfigs.update",
    "apigateway.apis.create",
    "apigateway.apis.delete",
    "apigateway.apis.get",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.apis.setIamPolicy",
    "apigateway.apis.update",
    "apigateway.gateways.create",
    "apigateway.gateways.delete",
    "apigateway.gateways.get",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.gateways.setIamPolicy",
    "apigateway.gateways.update",
    "apigateway.locations.get",
    "apigateway.locations.list",
    "apigateway.operations.cancel",
    "apigateway.operations.delete",
    "apigateway.operations.get",
    "apigateway.operations.list",
    "apigee.apiproductattributes.createOrUpdateAll",
    "apigee.apiproductattributes.delete",
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproductattributes.update",
    "apigee.apiproducts.create",
    "apigee.apiproducts.delete",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.apiproducts.update",
    "apigee.appkeys.create",
    "apigee.appkeys.delete",
    "apigee.appkeys.get",
    "apigee.appkeys.manage",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.caches.delete",
    "apigee.caches.list",
    "apigee.canaryevaluations.create",
    "apigee.canaryevaluations.get",
    "apigee.datacollectors.create",
    "apigee.datacollectors.delete",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datacollectors.update",
    "apigee.datastores.create",
    "apigee.datastores.delete",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.datastores.update",
    "apigee.deployments.create",
    "apigee.deployments.delete",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.deployments.update",
    "apigee.developerappattributes.createOrUpdateAll",
    "apigee.developerappattributes.delete",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerappattributes.update",
    "apigee.developerapps.create",
    "apigee.developerapps.delete",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerapps.manage",
    "apigee.developerattributes.createOrUpdateAll",
    "apigee.developerattributes.delete",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developerattributes.update",
    "apigee.developers.create",
    "apigee.developers.delete",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.developers.update",
    "apigee.envgroupattachments.create",
    "apigee.envgroupattachments.delete",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.create",
    "apigee.envgroups.delete",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.envgroups.update",
    "apigee.environments.create",
    "apigee.environments.delete",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.getIamPolicy",
    "apigee.environments.getStats",
    "apigee.environments.list",
    "apigee.environments.manageRuntime",
    "apigee.environments.setIamPolicy",
    "apigee.environments.update",
    "apigee.exports.create",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.flowhooks.attachSharedFlow",
    "apigee.flowhooks.detachSharedFlow",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.hostqueries.create",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.ingressconfigs.get",
    "apigee.instanceattachments.create",
    "apigee.instanceattachments.delete",
    "apigee.instanceattachments.get",
    "apigee.instanceattachments.list",
    "apigee.instances.create",
    "apigee.instances.delete",
    "apigee.instances.get",
    "apigee.instances.list",
    "apigee.instances.reportStatus",
    "apigee.keystorealiases.create",
    "apigee.keystorealiases.delete",
    "apigee.keystorealiases.exportCertificate",
    "apigee.keystorealiases.generateCSR",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystorealiases.update",
    "apigee.keystores.create",
    "apigee.keystores.delete",
    "apigee.keystores.export",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.create",
    "apigee.keyvaluemaps.delete",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.maskconfigs.update",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.create",
    "apigee.organizations.delete",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.organizations.update",
    "apigee.portals.create",
    "apigee.portals.delete",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.portals.update",
    "apigee.projects.update",
    "apigee.proxies.create",
    "apigee.proxies.delete",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.delete",
    "apigee.proxyrevisions.deploy",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.proxyrevisions.undeploy",
    "apigee.proxyrevisions.update",
    "apigee.queries.create",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.references.create",
    "apigee.references.delete",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.references.update",
    "apigee.reports.create",
    "apigee.reports.delete",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.reports.update",
    "apigee.resourcefiles.create",
    "apigee.resourcefiles.delete",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.resourcefiles.update",
    "apigee.sharedflowrevisions.delete",
    "apigee.sharedflowrevisions.deploy",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflowrevisions.undeploy",
    "apigee.sharedflowrevisions.update",
    "apigee.sharedflows.create",
    "apigee.sharedflows.delete",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.create",
    "apigee.targetservers.delete",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.targetservers.update",
    "apigee.tracesessions.create",
    "apigee.tracesessions.delete",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "apigeeconnect.connections.list",
    "apigeeconnect.endpoints.connect",
    "apikeys.keys.create",
    "apikeys.keys.delete",
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "apikeys.keys.update",
    "appengine.applications.create",
    "appengine.applications.get",
    "appengine.applications.update",
    "appengine.instances.delete",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.memcache.addKey",
    "appengine.memcache.flush",
    "appengine.memcache.get",
    "appengine.memcache.getKey",
    "appengine.memcache.list",
    "appengine.memcache.update",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.runtimes.actAsAdmin",
    "appengine.services.delete",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.services.update",
    "appengine.versions.create",
    "appengine.versions.delete",
    "appengine.versions.get",
    "appengine.versions.getFileContents",
    "appengine.versions.list",
    "appengine.versions.update",
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.delete",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.create",
    "artifactregistry.repositories.delete",
    "artifactregistry.repositories.deleteArtifacts",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.repositories.setIamPolicy",
    "artifactregistry.repositories.update",
    "artifactregistry.repositories.uploadArtifacts",
    "artifactregistry.tags.create",
    "artifactregistry.tags.delete",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.tags.update",
    "artifactregistry.versions.delete",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.delete",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "assuredworkloads.workload.update",
    "automl.annotationSpecs.create",
    "automl.annotationSpecs.delete",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotationSpecs.update",
    "automl.annotations.approve",
    "automl.annotations.create",
    "automl.annotations.list",
    "automl.annotations.manipulate",
    "automl.annotations.reject",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.columnSpecs.update",
    "automl.datasets.create",
    "automl.datasets.delete",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.import",
    "automl.datasets.list",
    "automl.datasets.setIamPolicy",
    "automl.datasets.update",
    "automl.examples.delete",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.create",
    "automl.humanAnnotationTasks.delete",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.locations.setIamPolicy",
    "automl.modelEvaluations.create",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.create",
    "automl.models.delete",
    "automl.models.deploy",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.models.setIamPolicy",
    "automl.models.undeploy",
    "automl.operations.cancel",
    "automl.operations.delete",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automl.tableSpecs.update",
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.delete",
    "automlrecommendations.apiKeys.list",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.catalogs.update",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.events.purge",
    "automlrecommendations.events.rejoin",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.delete",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.delete",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "autoscaling.sites.getIamPolicy",
    "autoscaling.sites.readRecommendations",
    "autoscaling.sites.setIamPolicy",
    "autoscaling.sites.writeMetrics",
    "autoscaling.sites.writeState",
    "bigquery.bireservations.get",
    "bigquery.bireservations.update",
    "bigquery.capacityCommitments.create",
    "bigquery.capacityCommitments.delete",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.capacityCommitments.update",
    "bigquery.config.get",
    "bigquery.config.update",
    "bigquery.connections.create",
    "bigquery.connections.delete",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.setIamPolicy",
    "bigquery.connections.update",
    "bigquery.connections.use",
    "bigquery.datasets.create",
    "bigquery.datasets.delete",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.datasets.setIamPolicy",
    "bigquery.datasets.update",
    "bigquery.datasets.updateTag",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.listAll",
    "bigquery.jobs.update",
    "bigquery.models.create",
    "bigquery.models.delete",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.models.updateData",
    "bigquery.models.updateMetadata",
    "bigquery.models.updateTag",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.create",
    "bigquery.reservationAssignments.delete",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.create",
    "bigquery.reservations.delete",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.reservations.update",
    "bigquery.routines.create",
    "bigquery.routines.delete",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.routines.update",
    "bigquery.savedqueries.create",
    "bigquery.savedqueries.delete",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.savedqueries.update",
    "bigquery.tables.getIamPolicy",
    "bigquery.tables.setIamPolicy",
    "bigquery.transfers.get",
    "bigquery.transfers.update",
    "bigtable.appProfiles.create",
    "bigtable.appProfiles.delete",
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.appProfiles.update",
    "bigtable.backups.create",
    "bigtable.backups.delete",
    "bigtable.backups.get",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.backups.restore",
    "bigtable.backups.setIamPolicy",
    "bigtable.backups.update",
    "bigtable.clusters.create",
    "bigtable.clusters.delete",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.clusters.update",
    "bigtable.instances.create",
    "bigtable.instances.delete",
    "bigtable.instances.get",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.instances.setIamPolicy",
    "bigtable.instances.update",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.create",
    "bigtable.tables.delete",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.mutateRows",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "bigtable.tables.setIamPolicy",
    "bigtable.tables.update",
    "billing.resourceCosts.get",
    "binaryauthorization.attestors.create",
    "binaryauthorization.attestors.delete",
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.setIamPolicy",
    "binaryauthorization.attestors.update",
    "binaryauthorization.attestors.verifyImageAttested",
    "binaryauthorization.continuousValidationConfig.get",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.continuousValidationConfig.setIamPolicy",
    "binaryauthorization.continuousValidationConfig.update",
    "binaryauthorization.policy.get",
    "binaryauthorization.policy.getIamPolicy",
    "binaryauthorization.policy.setIamPolicy",
    "binaryauthorization.policy.update",
    "chat.bots.get",
    "chat.bots.update",
    "clientauthconfig.brands.create",
    "clientauthconfig.brands.delete",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.brands.update",
    "clientauthconfig.clients.create",
    "clientauthconfig.clients.createSecret",
    "clientauthconfig.clients.delete",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.getWithSecret",
    "clientauthconfig.clients.list",
    "clientauthconfig.clients.listWithSecrets",
    "clientauthconfig.clients.undelete",
    "clientauthconfig.clients.update",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudbuild.builds.update",
    "cloudconfig.configs.get",
    "cloudconfig.configs.update",
    "clouddebugger.breakpoints.create",
    "clouddebugger.breakpoints.delete",
    "clouddebugger.breakpoints.get",
    "clouddebugger.breakpoints.list",
    "clouddebugger.breakpoints.listActive",
    "clouddebugger.breakpoints.update",
    "clouddebugger.debuggees.create",
    "clouddebugger.debuggees.list",
    "cloudfunctions.functions.call",
    "cloudfunctions.functions.create",
    "cloudfunctions.functions.delete",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.invoke",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.setIamPolicy",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.functions.sourceCodeSet",
    "cloudfunctions.functions.update",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudiot.devices.bindGateway",
    "cloudiot.devices.create",
    "cloudiot.devices.delete",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.devices.sendCommand",
    "cloudiot.devices.unbindGateway",
    "cloudiot.devices.update",
    "cloudiot.devices.updateConfig",
    "cloudiot.registries.create",
    "cloudiot.registries.delete",
    "cloudiot.registries.get",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudiot.registries.setIamPolicy",
    "cloudiot.registries.update",
    "cloudiottoken.tokensettings.get",
    "cloudiottoken.tokensettings.update",
    "cloudjobdiscovery.companies.create",
    "cloudjobdiscovery.companies.delete",
    "cloudjobdiscovery.companies.get",
    "cloudjobdiscovery.companies.list",
    "cloudjobdiscovery.companies.update",
    "cloudjobdiscovery.events.create",
    "cloudjobdiscovery.jobs.create",
    "cloudjobdiscovery.jobs.delete",
    "cloudjobdiscovery.jobs.get",
    "cloudjobdiscovery.jobs.search",
    "cloudjobdiscovery.jobs.update",
    "cloudjobdiscovery.profiles.create",
    "cloudjobdiscovery.profiles.delete",
    "cloudjobdiscovery.profiles.get",
    "cloudjobdiscovery.profiles.search",
    "cloudjobdiscovery.profiles.update",
    "cloudjobdiscovery.tenants.create",
    "cloudjobdiscovery.tenants.delete",
    "cloudjobdiscovery.tenants.get",
    "cloudjobdiscovery.tenants.update",
    "cloudjobdiscovery.tools.access",
    "cloudkms.cryptoKeyVersions.create",
    "cloudkms.cryptoKeyVersions.destroy",
    "cloudkms.cryptoKeyVersions.get",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeyVersions.restore",
    "cloudkms.cryptoKeyVersions.update",
    "cloudkms.cryptoKeyVersions.useToDecrypt",
    "cloudkms.cryptoKeyVersions.useToEncrypt",
    "cloudkms.cryptoKeyVersions.useToSign",
    "cloudkms.cryptoKeyVersions.viewPublicKey",
    "cloudkms.cryptoKeys.create",
    "cloudkms.cryptoKeys.get",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.cryptoKeys.setIamPolicy",
    "cloudkms.cryptoKeys.update",
    "cloudkms.importJobs.create",
    "cloudkms.importJobs.get",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.importJobs.setIamPolicy",
    "cloudkms.importJobs.useToImport",
    "cloudkms.keyRings.create",
    "cloudkms.keyRings.get",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudkms.keyRings.setIamPolicy",
    "cloudmessaging.messages.create",
    "cloudmigration.velostrataendpoints.connect",
    "cloudnotifications.activities.list",
    "cloudonefs.isiloncloud.com/clusters.create",
    "cloudonefs.isiloncloud.com/clusters.delete",
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/clusters.update",
    "cloudonefs.isiloncloud.com/clusters.updateAdvancedSettings",
    "cloudonefs.isiloncloud.com/fileshares.create",
    "cloudonefs.isiloncloud.com/fileshares.delete",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudonefs.isiloncloud.com/fileshares.update",
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.create",
    "cloudprivatecatalogproducer.associations.delete",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.create",
    "cloudprivatecatalogproducer.catalogAssociations.delete",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.create",
    "cloudprivatecatalogproducer.catalogs.delete",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.catalogs.setIamPolicy",
    "cloudprivatecatalogproducer.catalogs.undelete",
    "cloudprivatecatalogproducer.catalogs.update",
    "cloudprivatecatalogproducer.producerCatalogs.attachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.create",
    "cloudprivatecatalogproducer.producerCatalogs.delete",
    "cloudprivatecatalogproducer.producerCatalogs.detachProduct",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.setIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.update",
    "cloudprivatecatalogproducer.products.create",
    "cloudprivatecatalogproducer.products.delete",
    "cloudprivatecatalogproducer.products.get",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.products.setIamPolicy",
    "cloudprivatecatalogproducer.products.update",
    "cloudprivatecatalogproducer.settings.get",
    "cloudprivatecatalogproducer.settings.update",
    "cloudprivatecatalogproducer.targets.associate",
    "cloudprivatecatalogproducer.targets.unassociate",
    "cloudprofiler.profiles.create",
    "cloudprofiler.profiles.list",
    "cloudprofiler.profiles.update",
    "cloudscheduler.jobs.create",
    "cloudscheduler.jobs.delete",
    "cloudscheduler.jobs.enable",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.get",
    "cloudscheduler.jobs.list",
    "cloudscheduler.jobs.pause",
    "cloudscheduler.jobs.run",
    "cloudscheduler.jobs.update",
    "cloudscheduler.locations.get",
    "cloudscheduler.locations.list",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "cloudsql.backupRuns.create",
    "cloudsql.backupRuns.delete",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.create",
    "cloudsql.databases.delete",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.databases.update",
    "cloudsql.instances.addServerCa",
    "cloudsql.instances.clone",
    "cloudsql.instances.connect",
    "cloudsql.instances.create",
    "cloudsql.instances.delete",
    "cloudsql.instances.demoteMaster",
    "cloudsql.instances.export",
    "cloudsql.instances.failover",
    "cloudsql.instances.get",
    "cloudsql.instances.import",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.instances.login",
    "cloudsql.instances.promoteReplica",
    "cloudsql.instances.resetSslConfig",
    "cloudsql.instances.restart",
    "cloudsql.instances.restoreBackup",
    "cloudsql.instances.rotateServerCa",
    "cloudsql.instances.startReplica",
    "cloudsql.instances.stopReplica",
    "cloudsql.instances.truncateLog",
    "cloudsql.instances.update",
    "cloudsql.sslCerts.create",
    "cloudsql.sslCerts.createEphemeral",
    "cloudsql.sslCerts.delete",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.create",
    "cloudsql.users.delete",
    "cloudsql.users.list",
    "cloudsql.users.update",
    "cloudsupport.accounts.create",
    "cloudsupport.accounts.delete",
    "cloudsupport.accounts.get",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.getUserRoles",
    "cloudsupport.accounts.list",
    "cloudsupport.accounts.setIamPolicy",
    "cloudsupport.accounts.update",
    "cloudsupport.accounts.updateUserRoles",
    "cloudsupport.operations.get",
    "cloudsupport.properties.get",
    "cloudsupport.techCases.create",
    "cloudsupport.techCases.escalate",
    "cloudsupport.techCases.get",
    "cloudsupport.techCases.list",
    "cloudsupport.techCases.update",
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.create",
    "cloudtasks.queues.delete",
    "cloudtasks.queues.get",
    "cloudtasks.queues.getIamPolicy",
    "cloudtasks.queues.list",
    "cloudtasks.queues.pause",
    "cloudtasks.queues.purge",
    "cloudtasks.queues.resume",
    "cloudtasks.queues.setIamPolicy",
    "cloudtasks.queues.update",
    "cloudtasks.tasks.create",
    "cloudtasks.tasks.delete",
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.get",
    "cloudtasks.tasks.list",
    "cloudtasks.tasks.run",
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.create",
    "cloudtestservice.matrices.get",
    "cloudtestservice.matrices.update",
    "cloudtoolresults.executions.create",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.executions.update",
    "cloudtoolresults.histories.create",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.create",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.settings.update",
    "cloudtoolresults.steps.create",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "cloudtoolresults.steps.update",
    "cloudtrace.insights.get",
    "cloudtrace.insights.list",
    "cloudtrace.stats.get",
    "cloudtrace.tasks.create",
    "cloudtrace.tasks.delete",
    "cloudtrace.tasks.get",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.get",
    "cloudtrace.traces.list",
    "cloudtrace.traces.patch",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.create",
    "cloudtranslate.glossaries.delete",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.cancel",
    "cloudtranslate.operations.delete",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.create",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.delete",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.get",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.update",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.get",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.create",
    "cloudvolumesgcp-api.netapp.com/snapshots.delete",
    "cloudvolumesgcp-api.netapp.com/snapshots.get",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.update",
    "cloudvolumesgcp-api.netapp.com/volumes.create",
    "cloudvolumesgcp-api.netapp.com/volumes.delete",
    "cloudvolumesgcp-api.netapp.com/volumes.get",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "cloudvolumesgcp-api.netapp.com/volumes.update",
    "composer.environments.create",
    "composer.environments.delete",
    "composer.environments.get",
    "composer.environments.list",
    "composer.environments.update",
    "composer.imageversions.list",
    "composer.operations.delete",
    "composer.operations.get",
    "composer.operations.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.create",
    "compute.addresses.createInternal",
    "compute.addresses.delete",
    "compute.addresses.deleteInternal",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.addresses.setLabels",
    "compute.addresses.use",
    "compute.addresses.useInternal",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.backendBuckets.create",
    "compute.backendBuckets.delete",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendBuckets.update",
    "compute.backendBuckets.use",
    "compute.backendServices.create",
    "compute.backendServices.delete",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.backendServices.setSecurityPolicy",
    "compute.backendServices.update",
    "compute.backendServices.use",
    "compute.commitments.create",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.commitments.updateReservations",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.addResourcePolicies",
    "compute.disks.create",
    "compute.disks.createSnapshot",
    "compute.disks.delete",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.removeResourcePolicies",
    "compute.disks.resize",
    "compute.disks.setIamPolicy",
    "compute.disks.setLabels",
    "compute.disks.update",
    "compute.disks.use",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.create",
    "compute.externalVpnGateways.delete",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.externalVpnGateways.setLabels",
    "compute.externalVpnGateways.use",
    "compute.firewallPolicies.addAssociation",
    "compute.firewallPolicies.cloneRules",
    "compute.firewallPolicies.copyRules",
    "compute.firewallPolicies.create",
    "compute.firewallPolicies.delete",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewallPolicies.move",
    "compute.firewallPolicies.removeAssociation",
    "compute.firewallPolicies.setIamPolicy",
    "compute.firewallPolicies.update",
    "compute.firewallPolicies.use",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.forwardingRules.create",
    "compute.forwardingRules.delete",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.forwardingRules.setLabels",
    "compute.forwardingRules.setTarget",
    "compute.forwardingRules.update",
    "compute.globalAddresses.create",
    "compute.globalAddresses.createInternal",
    "compute.globalAddresses.delete",
    "compute.globalAddresses.deleteInternal",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalAddresses.setLabels",
    "compute.globalAddresses.use",
    "compute.globalForwardingRules.create",
    "compute.globalForwardingRules.delete",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscCreate",
    "compute.globalForwardingRules.pscDelete",
    "compute.globalForwardingRules.pscGet",
    "compute.globalForwardingRules.pscUpdate",
    "compute.globalForwardingRules.setLabels",
    "compute.globalForwardingRules.setTarget",
    "compute.globalForwardingRules.update",
    "compute.globalNetworkEndpointGroups.attachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.create",
    "compute.globalNetworkEndpointGroups.delete",
    "compute.globalNetworkEndpointGroups.detachNetworkEndpoints",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalNetworkEndpointGroups.use",
    "compute.globalOperations.delete",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalOperations.setIamPolicy",
    "compute.globalPublicDelegatedPrefixes.create",
    "compute.globalPublicDelegatedPrefixes.delete",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.globalPublicDelegatedPrefixes.update",
    "compute.globalPublicDelegatedPrefixes.updatePolicy",
    "compute.globalPublicDelegatedPrefixes.use",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.update",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.create",
    "compute.images.delete",
    "compute.images.deprecate",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.setIamPolicy",
    "compute.images.setLabels",
    "compute.images.update",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceGroups.update",
    "compute.instanceGroups.use",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.setIamPolicy",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.addAccessConfig",
    "compute.instances.addMaintenancePolicies",
    "compute.instances.attachDisk",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.deleteAccessConfig",
    "compute.instances.detachDisk",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.osAdminLogin",
    "compute.instances.osLogin",
    "compute.instances.removeMaintenancePolicies",
    "compute.instances.reset",
    "compute.instances.resume",
    "compute.instances.setDeletionProtection",
    "compute.instances.setDiskAutoDelete",
    "compute.instances.setIamPolicy",
    "compute.instances.setLabels",
    "compute.instances.setMachineResources",
    "compute.instances.setMachineType",
    "compute.instances.setMetadata",
    "compute.instances.setMinCpuPlatform",
    "compute.instances.setScheduling",
    "compute.instances.setServiceAccount",
    "compute.instances.setShieldedInstanceIntegrityPolicy",
    "compute.instances.setShieldedVmIntegrityPolicy",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.startWithEncryptionKey",
    "compute.instances.stop",
    "compute.instances.suspend",
    "compute.instances.update",
    "compute.instances.updateAccessConfig",
    "compute.instances.updateDisplayDevice",
    "compute.instances.updateNetworkInterface",
    "compute.instances.updateShieldedInstanceConfig",
    "compute.instances.updateShieldedVmConfig",
    "compute.instances.use",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.create",
    "compute.interconnectAttachments.delete",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectAttachments.setLabels",
    "compute.interconnectAttachments.update",
    "compute.interconnectAttachments.use",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.create",
    "compute.interconnects.delete",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.interconnects.setLabels",
    "compute.interconnects.update",
    "compute.interconnects.use",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenseCodes.setIamPolicy",
    "compute.licenseCodes.update",
    "compute.licenseCodes.use",
    "compute.licenses.create",
    "compute.licenses.delete",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.licenses.setIamPolicy",
    "compute.machineImages.create",
    "compute.machineImages.delete",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.setIamPolicy",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.create",
    "compute.maintenancePolicies.delete",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.maintenancePolicies.setIamPolicy",
    "compute.maintenancePolicies.use",
    "compute.networkEndpointGroups.attachNetworkEndpoints",
    "compute.networkEndpointGroups.create",
    "compute.networkEndpointGroups.delete",
    "compute.networkEndpointGroups.detachNetworkEndpoints",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networkEndpointGroups.setIamPolicy",
    "compute.networkEndpointGroups.use",
    "compute.networks.access",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.mirror",
    "compute.networks.removePeering",
    "compute.networks.switchToCustomMode",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.networks.use",
    "compute.networks.useExternalIp",
    "compute.nodeGroups.addNodes",
    "compute.nodeGroups.create",
    "compute.nodeGroups.delete",
    "compute.nodeGroups.deleteNodes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeGroups.setIamPolicy",
    "compute.nodeGroups.setNodeTemplate",
    "compute.nodeGroups.update",
    "compute.nodeTemplates.create",
    "compute.nodeTemplates.delete",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTemplates.setIamPolicy",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.organizations.setSecurityPolicy",
    "compute.oslogin.updateExternalUser",
    "compute.packetMirrorings.update",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.projects.setDefaultNetworkTier",
    "compute.projects.setDefaultServiceAccount",
    "compute.projects.setUsageExportBucket",
    "compute.publicAdvertisedPrefixes.create",
    "compute.publicAdvertisedPrefixes.delete",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicAdvertisedPrefixes.update",
    "compute.publicAdvertisedPrefixes.updatePolicy",
    "compute.publicAdvertisedPrefixes.use",
    "compute.publicDelegatedPrefixes.create",
    "compute.publicDelegatedPrefixes.delete",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.publicDelegatedPrefixes.update",
    "compute.publicDelegatedPrefixes.updatePolicy",
    "compute.publicDelegatedPrefixes.use",
    "compute.regionBackendServices.create",
    "compute.regionBackendServices.delete",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionBackendServices.setSecurityPolicy",
    "compute.regionBackendServices.update",
    "compute.regionBackendServices.use",
    "compute.regionHealthCheckServices.create",
    "compute.regionHealthCheckServices.delete",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthCheckServices.update",
    "compute.regionHealthCheckServices.use",
    "compute.regionHealthChecks.create",
    "compute.regionHealthChecks.delete",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.update",
    "compute.regionHealthChecks.use",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.create",
    "compute.regionNetworkEndpointGroups.delete",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNetworkEndpointGroups.use",
    "compute.regionNotificationEndpoints.create",
    "compute.regionNotificationEndpoints.delete",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionNotificationEndpoints.update",
    "compute.regionNotificationEndpoints.use",
    "compute.regionOperations.delete",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionOperations.setIamPolicy",
    "compute.regionSslCertificates.create",
    "compute.regionSslCertificates.delete",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.create",
    "compute.regionTargetHttpProxies.delete",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpProxies.setUrlMap",
    "compute.regionTargetHttpProxies.use",
    "compute.regionTargetHttpsProxies.create",
    "compute.regionTargetHttpsProxies.delete",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionTargetHttpsProxies.setSslCertificates",
    "compute.regionTargetHttpsProxies.setUrlMap",
    "compute.regionTargetHttpsProxies.use",
    "compute.regionUrlMaps.create",
    "compute.regionUrlMaps.delete",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.invalidateCache",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.update",
    "compute.regionUrlMaps.use",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.create",
    "compute.reservations.delete",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.reservations.resize",
    "compute.resourcePolicies.create",
    "compute.resourcePolicies.delete",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.resourcePolicies.use",
    "compute.routers.create",
    "compute.routers.delete",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routers.update",
    "compute.routers.use",
    "compute.routes.create",
    "compute.routes.delete",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.addAssociation",
    "compute.securityPolicies.copyRules",
    "compute.securityPolicies.create",
    "compute.securityPolicies.delete",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.securityPolicies.move",
    "compute.securityPolicies.removeAssociation",
    "compute.securityPolicies.setIamPolicy",
    "compute.securityPolicies.update",
    "compute.securityPolicies.use",
    "compute.serviceAttachments.create",
    "compute.serviceAttachments.delete",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.serviceAttachments.update",
    "compute.snapshots.create",
    "compute.snapshots.delete",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.setIamPolicy",
    "compute.snapshots.setLabels",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.create",
    "compute.sslCertificates.delete",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.create",
    "compute.sslPolicies.delete",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.sslPolicies.update",
    "compute.sslPolicies.use",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.expandIpCidrRange",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.subnetworks.mirror",
    "compute.subnetworks.setIamPolicy",
    "compute.subnetworks.setPrivateIpGoogleAccess",
    "compute.subnetworks.update",
    "compute.subnetworks.use",
    "compute.subnetworks.useExternalIp",
    "compute.targetGrpcProxies.create",
    "compute.targetGrpcProxies.delete",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetGrpcProxies.update",
    "compute.targetGrpcProxies.use",
    "compute.targetHttpProxies.create",
    "compute.targetHttpProxies.delete",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpProxies.setUrlMap",
    "compute.targetHttpProxies.use",
    "compute.targetHttpsProxies.create",
    "compute.targetHttpsProxies.delete",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetHttpsProxies.setSslCertificates",
    "compute.targetHttpsProxies.setSslPolicy",
    "compute.targetHttpsProxies.setUrlMap",
    "compute.targetHttpsProxies.use",
    "compute.targetInstances.create",
    "compute.targetInstances.delete",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetInstances.use",
    "compute.targetPools.addHealthCheck",
    "compute.targetPools.addInstance",
    "compute.targetPools.create",
    "compute.targetPools.delete",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetPools.removeHealthCheck",
    "compute.targetPools.removeInstance",
    "compute.targetPools.update",
    "compute.targetPools.use",
    "compute.targetSslProxies.create",
    "compute.targetSslProxies.delete",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetSslProxies.setBackendService",
    "compute.targetSslProxies.setProxyHeader",
    "compute.targetSslProxies.setSslCertificates",
    "compute.targetSslProxies.use",
    "compute.targetTcpProxies.create",
    "compute.targetTcpProxies.delete",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetTcpProxies.update",
    "compute.targetTcpProxies.use",
    "compute.targetVpnGateways.create",
    "compute.targetVpnGateways.delete",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.targetVpnGateways.setLabels",
    "compute.targetVpnGateways.use",
    "compute.urlMaps.create",
    "compute.urlMaps.delete",
    "compute.urlMaps.get",
    "compute.urlMaps.invalidateCache",
    "compute.urlMaps.list",
    "compute.urlMaps.update",
    "compute.urlMaps.use",
    "compute.urlMaps.validate",
    "compute.vpnGateways.create",
    "compute.vpnGateways.delete",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnGateways.setLabels",
    "compute.vpnGateways.use",
    "compute.vpnTunnels.create",
    "compute.vpnTunnels.delete",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.vpnTunnels.setLabels",
    "compute.zoneOperations.delete",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zoneOperations.setIamPolicy",
    "compute.zones.get",
    "compute.zones.list",
    "consumerprocurement.accounts.create",
    "consumerprocurement.accounts.delete",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.entitlements.get",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.create",
    "consumerprocurement.freeTrials.get",
    "consumerprocurement.freeTrials.list",
    "consumerprocurement.orders.cancel",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "consumerprocurement.orders.modify",
    "consumerprocurement.orders.place",
    "container.apiServices.create",
    "container.apiServices.delete",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.apiServices.update",
    "container.apiServices.updateStatus",
    "container.auditSinks.create",
    "container.auditSinks.delete",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.auditSinks.update",
    "container.backendConfigs.create",
    "container.backendConfigs.delete",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.backendConfigs.update",
    "container.bindings.create",
    "container.bindings.delete",
    "container.bindings.get",
    "container.bindings.list",
    "container.bindings.update",
    "container.certificateSigningRequests.approve",
    "container.certificateSigningRequests.create",
    "container.certificateSigningRequests.delete",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.certificateSigningRequests.update",
    "container.certificateSigningRequests.updateStatus",
    "container.clusterRoleBindings.create",
    "container.clusterRoleBindings.delete",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoleBindings.update",
    "container.clusterRoles.bind",
    "container.clusterRoles.create",
    "container.clusterRoles.delete",
    "container.clusterRoles.escalate",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusterRoles.update",
    "container.clusters.create",
    "container.clusters.delete",
    "container.clusters.get",
    "container.clusters.getCredentials",
    "container.clusters.list",
    "container.clusters.update",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.create",
    "container.configMaps.delete",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.configMaps.update",
    "container.controllerRevisions.create",
    "container.controllerRevisions.delete",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.controllerRevisions.update",
    "container.cronJobs.create",
    "container.cronJobs.delete",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.cronJobs.update",
    "container.cronJobs.updateStatus",
    "container.csiDrivers.create",
    "container.csiDrivers.delete",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiDrivers.update",
    "container.csiNodeInfos.create",
    "container.csiNodeInfos.delete",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodeInfos.update",
    "container.csiNodes.create",
    "container.csiNodes.delete",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.csiNodes.update",
    "container.customResourceDefinitions.create",
    "container.customResourceDefinitions.delete",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.customResourceDefinitions.update",
    "container.customResourceDefinitions.updateStatus",
    "container.daemonSets.create",
    "container.daemonSets.delete",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.daemonSets.update",
    "container.daemonSets.updateStatus",
    "container.deployments.create",
    "container.deployments.delete",
    "container.deployments.get",
    "container.deployments.getScale",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.deployments.rollback",
    "container.deployments.update",
    "container.deployments.updateScale",
    "container.deployments.updateStatus",
    "container.endpointSlices.create",
    "container.endpointSlices.delete",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpointSlices.update",
    "container.endpoints.create",
    "container.endpoints.delete",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.endpoints.update",
    "container.events.create",
    "container.events.delete",
    "container.events.get",
    "container.events.list",
    "container.events.update",
    "container.frontendConfigs.create",
    "container.frontendConfigs.delete",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.frontendConfigs.update",
    "container.horizontalPodAutoscalers.create",
    "container.horizontalPodAutoscalers.delete",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.horizontalPodAutoscalers.update",
    "container.horizontalPodAutoscalers.updateStatus",
    "container.ingresses.create",
    "container.ingresses.delete",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.ingresses.update",
    "container.ingresses.updateStatus",
    "container.initializerConfigurations.create",
    "container.initializerConfigurations.delete",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.initializerConfigurations.update",
    "container.jobs.create",
    "container.jobs.delete",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.jobs.update",
    "container.jobs.updateStatus",
    "container.leases.create",
    "container.leases.delete",
    "container.leases.get",
    "container.leases.list",
    "container.leases.update",
    "container.limitRanges.create",
    "container.limitRanges.delete",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.limitRanges.update",
    "container.localSubjectAccessReviews.create",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.create",
    "container.managedCertificates.delete",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.managedCertificates.update",
    "container.mutatingWebhookConfigurations.create",
    "container.mutatingWebhookConfigurations.delete",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.mutatingWebhookConfigurations.update",
    "container.namespaces.create",
    "container.namespaces.delete",
    "container.namespaces.finalize",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.namespaces.update",
    "container.namespaces.updateStatus",
    "container.networkPolicies.create",
    "container.networkPolicies.delete",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.networkPolicies.update",
    "container.nodes.create",
    "container.nodes.delete",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.nodes.proxy",
    "container.nodes.update",
    "container.nodes.updateStatus",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.create",
    "container.persistentVolumeClaims.delete",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumeClaims.update",
    "container.persistentVolumeClaims.updateStatus",
    "container.persistentVolumes.create",
    "container.persistentVolumes.delete",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.persistentVolumes.update",
    "container.persistentVolumes.updateStatus",
    "container.petSets.create",
    "container.petSets.delete",
    "container.petSets.get",
    "container.petSets.list",
    "container.petSets.update",
    "container.petSets.updateStatus",
    "container.podDisruptionBudgets.create",
    "container.podDisruptionBudgets.delete",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podDisruptionBudgets.update",
    "container.podDisruptionBudgets.updateStatus",
    "container.podPresets.create",
    "container.podPresets.delete",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podPresets.update",
    "container.podSecurityPolicies.create",
    "container.podSecurityPolicies.delete",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podSecurityPolicies.update",
    "container.podSecurityPolicies.use",
    "container.podTemplates.create",
    "container.podTemplates.delete",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.podTemplates.update",
    "container.pods.attach",
    "container.pods.create",
    "container.pods.delete",
    "container.pods.evict",
    "container.pods.exec",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.initialize",
    "container.pods.list",
    "container.pods.portForward",
    "container.pods.proxy",
    "container.pods.update",
    "container.pods.updateStatus",
    "container.priorityClasses.create",
    "container.priorityClasses.delete",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.priorityClasses.update",
    "container.replicaSets.create",
    "container.replicaSets.delete",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicaSets.update",
    "container.replicaSets.updateScale",
    "container.replicaSets.updateStatus",
    "container.replicationControllers.create",
    "container.replicationControllers.delete",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.replicationControllers.update",
    "container.replicationControllers.updateScale",
    "container.replicationControllers.updateStatus",
    "container.resourceQuotas.create",
    "container.resourceQuotas.delete",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.resourceQuotas.update",
    "container.resourceQuotas.updateStatus",
    "container.roleBindings.create",
    "container.roleBindings.delete",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roleBindings.update",
    "container.roles.bind",
    "container.roles.create",
    "container.roles.delete",
    "container.roles.escalate",
    "container.roles.get",
    "container.roles.list",
    "container.roles.update",
    "container.runtimeClasses.create",
    "container.runtimeClasses.delete",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.runtimeClasses.update",
    "container.scheduledJobs.create",
    "container.scheduledJobs.delete",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.scheduledJobs.update",
    "container.scheduledJobs.updateStatus",
    "container.secrets.create",
    "container.secrets.delete",
    "container.secrets.get",
    "container.secrets.list",
    "container.secrets.update",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.create",
    "container.serviceAccounts.createToken",
    "container.serviceAccounts.delete",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.serviceAccounts.update",
    "container.services.create",
    "container.services.delete",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.services.proxy",
    "container.services.update",
    "container.services.updateStatus",
    "container.statefulSets.create",
    "container.statefulSets.delete",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.statefulSets.update",
    "container.statefulSets.updateScale",
    "container.statefulSets.updateStatus",
    "container.storageClasses.create",
    "container.storageClasses.delete",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageClasses.update",
    "container.storageStates.create",
    "container.storageStates.delete",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageStates.update",
    "container.storageStates.updateStatus",
    "container.storageVersionMigrations.create",
    "container.storageVersionMigrations.delete",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.storageVersionMigrations.update",
    "container.storageVersionMigrations.updateStatus",
    "container.subjectAccessReviews.create",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.create",
    "container.thirdPartyObjects.delete",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyObjects.update",
    "container.thirdPartyResources.create",
    "container.thirdPartyResources.delete",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.thirdPartyResources.update",
    "container.tokenReviews.create",
    "container.updateInfos.create",
    "container.updateInfos.delete",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.updateInfos.update",
    "container.validatingWebhookConfigurations.create",
    "container.validatingWebhookConfigurations.delete",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.validatingWebhookConfigurations.update",
    "container.volumeAttachments.create",
    "container.volumeAttachments.delete",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeAttachments.update",
    "container.volumeAttachments.updateStatus",
    "container.volumeSnapshotClasses.create",
    "container.volumeSnapshotClasses.delete",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotClasses.update",
    "container.volumeSnapshotContents.create",
    "container.volumeSnapshotContents.delete",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshotContents.update",
    "container.volumeSnapshotContents.updateStatus",
    "container.volumeSnapshots.create",
    "container.volumeSnapshots.delete",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "container.volumeSnapshots.update",
    "container.volumeSnapshots.updateStatus",
    "containeranalysis.notes.attachOccurrence",
    "containeranalysis.notes.create",
    "containeranalysis.notes.delete",
    "containeranalysis.notes.get",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.notes.listOccurrences",
    "containeranalysis.notes.setIamPolicy",
    "containeranalysis.notes.update",
    "containeranalysis.occurrences.create",
    "containeranalysis.occurrences.delete",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "containeranalysis.occurrences.setIamPolicy",
    "containeranalysis.occurrences.update",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.categories.setIamPolicy",
    "datacatalog.entries.create",
    "datacatalog.entries.delete",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entries.setIamPolicy",
    "datacatalog.entries.update",
    "datacatalog.entries.updateTag",
    "datacatalog.entryGroups.create",
    "datacatalog.entryGroups.delete",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.entryGroups.setIamPolicy",
    "datacatalog.entryGroups.update",
    "datacatalog.tagTemplates.create",
    "datacatalog.tagTemplates.delete",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.tagTemplates.setIamPolicy",
    "datacatalog.tagTemplates.update",
    "datacatalog.tagTemplates.use",
    "datacatalog.taxonomies.create",
    "datacatalog.taxonomies.delete",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "datacatalog.taxonomies.setIamPolicy",
    "datacatalog.taxonomies.update",
    "dataflow.jobs.cancel",
    "dataflow.jobs.create",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.jobs.snapshot",
    "dataflow.jobs.updateContents",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.delete",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "datafusion.instances.create",
    "datafusion.instances.delete",
    "datafusion.instances.get",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.restart",
    "datafusion.instances.runtime",
    "datafusion.instances.setIamPolicy",
    "datafusion.instances.update",
    "datafusion.instances.upgrade",
    "datafusion.locations.get",
    "datafusion.locations.list",
    "datafusion.operations.cancel",
    "datafusion.operations.get",
    "datafusion.operations.list",
    "datalabeling.annotateddatasets.delete",
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.label",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.create",
    "datalabeling.annotationspecsets.delete",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.create",
    "datalabeling.datasets.delete",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.import",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.create",
    "datalabeling.instructions.delete",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.cancel",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "datamigration.connectionprofiles.create",
    "datamigration.connectionprofiles.delete",
    "datamigration.connectionprofiles.get",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.connectionprofiles.setIamPolicy",
    "datamigration.connectionprofiles.update",
    "datamigration.locations.get",
    "datamigration.locations.list",
    "datamigration.migrationjobs.create",
    "datamigration.migrationjobs.delete",
    "datamigration.migrationjobs.generateSshScript",
    "datamigration.migrationjobs.get",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.migrationjobs.promote",
    "datamigration.migrationjobs.restart",
    "datamigration.migrationjobs.resume",
    "datamigration.migrationjobs.setIamPolicy",
    "datamigration.migrationjobs.start",
    "datamigration.migrationjobs.stop",
    "datamigration.migrationjobs.update",
    "datamigration.migrationjobs.verify",
    "datamigration.operations.cancel",
    "datamigration.operations.delete",
    "datamigration.operations.get",
    "datamigration.operations.list",
    "dataprep.projects.use",
    "dataproc.agents.create",
    "dataproc.agents.delete",
    "dataproc.agents.get",
    "dataproc.agents.list",
    "dataproc.agents.update",
    "dataproc.autoscalingPolicies.create",
    "dataproc.autoscalingPolicies.delete",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.setIamPolicy",
    "dataproc.autoscalingPolicies.update",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.create",
    "dataproc.clusters.delete",
    "dataproc.clusters.get",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.clusters.setIamPolicy",
    "dataproc.clusters.start",
    "dataproc.clusters.stop",
    "dataproc.clusters.update",
    "dataproc.clusters.use",
    "dataproc.jobs.cancel",
    "dataproc.jobs.create",
    "dataproc.jobs.delete",
    "dataproc.jobs.get",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.jobs.setIamPolicy",
    "dataproc.jobs.update",
    "dataproc.operations.cancel",
    "dataproc.operations.delete",
    "dataproc.operations.get",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.operations.setIamPolicy",
    "dataproc.tasks.lease",
    "dataproc.tasks.listInvalidatedLeases",
    "dataproc.tasks.reportStatus",
    "dataproc.workflowTemplates.create",
    "dataproc.workflowTemplates.delete",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.instantiate",
    "dataproc.workflowTemplates.instantiateInline",
    "dataproc.workflowTemplates.list",
    "dataproc.workflowTemplates.setIamPolicy",
    "dataproc.workflowTemplates.update",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.datasources.update",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.featurecontrols.update",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "dataprocessing.groupcontrols.update",
    "datastore.databases.create",
    "datastore.databases.delete",
    "datastore.databases.export",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.import",
    "datastore.databases.list",
    "datastore.databases.setIamPolicy",
    "datastore.databases.update",
    "datastore.entities.allocateIds",
    "datastore.entities.create",
    "datastore.entities.delete",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.entities.update",
    "datastore.indexes.create",
    "datastore.indexes.delete",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.indexes.update",
    "datastore.locations.get",
    "datastore.locations.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.namespaces.setIamPolicy",
    "datastore.operations.cancel",
    "datastore.operations.delete",
    "datastore.operations.get",
    "datastore.operations.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "deploymentmanager.compositeTypes.create",
    "deploymentmanager.compositeTypes.delete",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.compositeTypes.update",
    "deploymentmanager.deployments.cancelPreview",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.getIamPolicy",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.setIamPolicy",
    "deploymentmanager.deployments.stop",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.delete",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.typeProviders.update",
    "deploymentmanager.types.create",
    "deploymentmanager.types.delete",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "deploymentmanager.types.update",
    "dialogflow.agents.create",
    "dialogflow.agents.delete",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.import",
    "dialogflow.agents.list",
    "dialogflow.agents.restore",
    "dialogflow.agents.search",
    "dialogflow.agents.train",
    "dialogflow.agents.update",
    "dialogflow.agents.validate",
    "dialogflow.answerrecords.delete",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.answerrecords.update",
    "dialogflow.callMatchers.create",
    "dialogflow.callMatchers.delete",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.create",
    "dialogflow.contexts.delete",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.contexts.update",
    "dialogflow.conversationDatasets.create",
    "dialogflow.conversationDatasets.delete",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.import",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.create",
    "dialogflow.conversationModels.delete",
    "dialogflow.conversationModels.deploy",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationModels.undeploy",
    "dialogflow.conversationProfiles.create",
    "dialogflow.conversationProfiles.delete",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversationProfiles.update",
    "dialogflow.conversations.addPhoneNumber",
    "dialogflow.conversations.complete",
    "dialogflow.conversations.create",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.create",
    "dialogflow.documents.delete",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.create",
    "dialogflow.entityTypes.createEntity",
    "dialogflow.entityTypes.delete",
    "dialogflow.entityTypes.deleteEntity",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.entityTypes.update",
    "dialogflow.entityTypes.updateEntity",
    "dialogflow.environments.create",
    "dialogflow.environments.delete",
    "dialogflow.environments.get",
    "dialogflow.environments.getHistory",
    "dialogflow.environments.list",
    "dialogflow.environments.lookupHistory",
    "dialogflow.environments.update",
    "dialogflow.flows.create",
    "dialogflow.flows.delete",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.flows.train",
    "dialogflow.flows.update",
    "dialogflow.flows.validate",
    "dialogflow.fulfillments.get",
    "dialogflow.fulfillments.update",
    "dialogflow.intents.create",
    "dialogflow.intents.delete",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.intents.update",
    "dialogflow.knowledgeBases.create",
    "dialogflow.knowledgeBases.delete",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.create",
    "dialogflow.pages.delete",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.pages.update",
    "dialogflow.participants.analyzeContent",
    "dialogflow.participants.create",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.participants.update",
    "dialogflow.phoneNumberOrders.cancel",
    "dialogflow.phoneNumberOrders.create",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumberOrders.update",
    "dialogflow.phoneNumbers.delete",
    "dialogflow.phoneNumbers.list",
    "dialogflow.phoneNumbers.undelete",
    "dialogflow.phoneNumbers.update",
    "dialogflow.sessionEntityTypes.create",
    "dialogflow.sessionEntityTypes.delete",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessionEntityTypes.update",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.create",
    "dialogflow.smartMessagingEntries.delete",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.create",
    "dialogflow.transitionRouteGroups.delete",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.transitionRouteGroups.update",
    "dialogflow.versions.create",
    "dialogflow.versions.delete",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.versions.load",
    "dialogflow.versions.update",
    "dialogflow.webhooks.create",
    "dialogflow.webhooks.delete",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dialogflow.webhooks.update",
    "dlp.analyzeRiskTemplates.create",
    "dlp.analyzeRiskTemplates.delete",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.analyzeRiskTemplates.update",
    "dlp.deidentifyTemplates.create",
    "dlp.deidentifyTemplates.delete",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.deidentifyTemplates.update",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.create",
    "dlp.inspectTemplates.delete",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.inspectTemplates.update",
    "dlp.jobTriggers.create",
    "dlp.jobTriggers.delete",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.hybridInspect",
    "dlp.jobTriggers.list",
    "dlp.jobTriggers.update",
    "dlp.jobs.cancel",
    "dlp.jobs.create",
    "dlp.jobs.delete",
    "dlp.jobs.get",
    "dlp.jobs.hybridInspect",
    "dlp.jobs.list",
    "dlp.kms.encrypt",
    "dlp.storedInfoTypes.create",
    "dlp.storedInfoTypes.delete",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list",
    "dlp.storedInfoTypes.update",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.networks.targetWithPeeringZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.getIamPolicy",
    "dns.policies.list",
    "dns.policies.setIamPolicy",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "documentai.evaluations.create",
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.humanReviewConfigs.update",
    "documentai.labelerPools.create",
    "documentai.labelerPools.delete",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.labelerPools.update",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.create",
    "documentai.processorVersions.delete",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processorVersions.update",
    "documentai.processors.create",
    "documentai.processors.delete",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "documentai.processors.update",
    "domains.locations.get",
    "domains.locations.list",
    "domains.operations.cancel",
    "domains.operations.get",
    "domains.operations.list",
    "domains.registrations.configureContact",
    "domains.registrations.configureDns",
    "domains.registrations.configureManagement",
    "domains.registrations.create",
    "domains.registrations.delete",
    "domains.registrations.get",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "domains.registrations.setIamPolicy",
    "domains.registrations.update",
    "earlyaccesscenter.campaigns.enroll",
    "earlyaccesscenter.campaigns.get",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.get",
    "earlyaccesscenter.customerAllowlists.list",
    "earthengine.assets.create",
    "earthengine.assets.delete",
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.assets.setIamPolicy",
    "earthengine.assets.update",
    "earthengine.computations.create",
    "earthengine.exports.create",
    "earthengine.filmstripthumbnails.create",
    "earthengine.filmstripthumbnails.get",
    "earthengine.imports.create",
    "earthengine.maps.create",
    "earthengine.maps.get",
    "earthengine.operations.delete",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.operations.update",
    "earthengine.tables.create",
    "earthengine.tables.get",
    "earthengine.thumbnails.create",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.create",
    "earthengine.videothumbnails.get",
    "endpoints.portals.attachCustomDomain",
    "endpoints.portals.detachCustomDomain",
    "endpoints.portals.listCustomDomains",
    "endpoints.portals.update",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.create",
    "errorreporting.errorEvents.delete",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groupMetadata.update",
    "errorreporting.groups.list",
    "essentialcontacts.contacts.create",
    "essentialcontacts.contacts.delete",
    "essentialcontacts.contacts.get",
    "essentialcontacts.contacts.list",
    "essentialcontacts.contacts.update",
    "eventarc.events.receiveAuditLogWritten",
    "eventarc.locations.get",
    "eventarc.locations.list",
    "eventarc.operations.cancel",
    "eventarc.operations.delete",
    "eventarc.operations.get",
    "eventarc.operations.list",
    "eventarc.triggers.create",
    "eventarc.triggers.delete",
    "eventarc.triggers.get",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "eventarc.triggers.setIamPolicy",
    "eventarc.triggers.undelete",
    "eventarc.triggers.update",
    "file.backups.create",
    "file.backups.delete",
    "file.backups.get",
    "file.backups.list",
    "file.backups.update",
    "file.instances.create",
    "file.instances.delete",
    "file.instances.get",
    "file.instances.list",
    "file.instances.restore",
    "file.instances.update",
    "file.locations.get",
    "file.locations.list",
    "file.operations.cancel",
    "file.operations.delete",
    "file.operations.get",
    "file.operations.list",
    "file.snapshots.create",
    "file.snapshots.delete",
    "file.snapshots.get",
    "file.snapshots.list",
    "file.snapshots.update",
    "firebase.billingPlans.get",
    "firebase.billingPlans.update",
    "firebase.clients.create",
    "firebase.clients.delete",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.clients.update",
    "firebase.links.create",
    "firebase.links.delete",
    "firebase.links.list",
    "firebase.links.update",
    "firebase.projects.delete",
    "firebase.projects.get",
    "firebase.projects.update",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.create",
    "firebaseabt.experiments.delete",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.experiments.update",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsEdit",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.groups.update",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.releases.update",
    "firebaseappdistro.testers.list",
    "firebaseappdistro.testers.update",
    "firebaseauth.configs.create",
    "firebaseauth.configs.get",
    "firebaseauth.configs.getHashConfig",
    "firebaseauth.configs.update",
    "firebaseauth.users.create",
    "firebaseauth.users.createSession",
    "firebaseauth.users.delete",
    "firebaseauth.users.get",
    "firebaseauth.users.sendEmail",
    "firebaseauth.users.update",
    "firebasecrash.issues.update",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.config.update",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.issues.update",
    "firebasecrashlytics.sessions.get",
    "firebasedatabase.instances.create",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedatabase.instances.update",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.destinations.update",
    "firebasedynamiclinks.domains.create",
    "firebasedynamiclinks.domains.delete",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.domains.update",
    "firebasedynamiclinks.links.create",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.links.update",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.create",
    "firebaseextensions.configs.delete",
    "firebaseextensions.configs.list",
    "firebaseextensions.configs.update",
    "firebasehosting.sites.create",
    "firebasehosting.sites.delete",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebasehosting.sites.update",
    "firebaseinappmessaging.campaigns.create",
    "firebaseinappmessaging.campaigns.delete",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseinappmessaging.campaigns.update",
    "firebaseml.compressionjobs.create",
    "firebaseml.compressionjobs.delete",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.compressionjobs.start",
    "firebaseml.compressionjobs.update",
    "firebaseml.models.create",
    "firebaseml.models.delete",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.create",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebaseml.modelversions.update",
    "firebasenotifications.messages.create",
    "firebasenotifications.messages.delete",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebasenotifications.messages.update",
    "firebaseperformance.config.create",
    "firebaseperformance.config.delete",
    "firebaseperformance.config.update",
    "firebaseperformance.data.get",
    "firebasepredictions.predictions.create",
    "firebasepredictions.predictions.delete",
    "firebasepredictions.predictions.list",
    "firebasepredictions.predictions.update",
    "firebaserules.releases.create",
    "firebaserules.releases.delete",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.releases.update",
    "firebaserules.rulesets.create",
    "firebaserules.rulesets.delete",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "firebaserules.rulesets.test",
    "firebasestorage.buckets.addFirebase",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "firebasestorage.buckets.removeFirebase",
    "gameservices.gameServerClusters.create",
    "gameservices.gameServerClusters.delete",
    "gameservices.gameServerClusters.get",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerClusters.update",
    "gameservices.gameServerConfigs.create",
    "gameservices.gameServerConfigs.delete",
    "gameservices.gameServerConfigs.get",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.create",
    "gameservices.gameServerDeployments.delete",
    "gameservices.gameServerDeployments.get",
    "gameservices.gameServerDeployments.list",
    "gameservices.gameServerDeployments.rollout",
    "gameservices.gameServerDeployments.update",
    "gameservices.locations.get",
    "gameservices.locations.list",
    "gameservices.operations.cancel",
    "gameservices.operations.delete",
    "gameservices.operations.get",
    "gameservices.operations.list",
    "gameservices.realms.create",
    "gameservices.realms.delete",
    "gameservices.realms.get",
    "gameservices.realms.list",
    "gameservices.realms.update",
    "gcp.redisenterprise.com/databases.create",
    "gcp.redisenterprise.com/databases.delete",
    "gcp.redisenterprise.com/databases.get",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/databases.update",
    "gcp.redisenterprise.com/subscriptions.create",
    "gcp.redisenterprise.com/subscriptions.delete",
    "gcp.redisenterprise.com/subscriptions.get",
    "gcp.redisenterprise.com/subscriptions.list",
    "gcp.redisenterprise.com/subscriptions.update",
    "genomics.datasets.create",
    "genomics.datasets.delete",
    "genomics.datasets.get",
    "genomics.datasets.getIamPolicy",
    "genomics.datasets.list",
    "genomics.datasets.setIamPolicy",
    "genomics.datasets.update",
    "genomics.operations.cancel",
    "genomics.operations.create",
    "genomics.operations.get",
    "genomics.operations.list",
    "gkehub.endpoints.connect",
    "gkehub.features.create",
    "gkehub.features.delete",
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.features.setIamPolicy",
    "gkehub.features.update",
    "gkehub.gateway.delete",
    "gkehub.gateway.get",
    "gkehub.gateway.getIamPolicy",
    "gkehub.gateway.patch",
    "gkehub.gateway.post",
    "gkehub.gateway.put",
    "gkehub.gateway.setIamPolicy",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.create",
    "gkehub.memberships.delete",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.memberships.setIamPolicy",
    "gkehub.memberships.update",
    "gkehub.operations.cancel",
    "gkehub.operations.delete",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "gsuiteaddons.authorizations.get",
    "gsuiteaddons.deployments.create",
    "gsuiteaddons.deployments.delete",
    "gsuiteaddons.deployments.execute",
    "gsuiteaddons.deployments.get",
    "gsuiteaddons.deployments.install",
    "gsuiteaddons.deployments.installStatus",
    "gsuiteaddons.deployments.list",
    "gsuiteaddons.deployments.uninstall",
    "gsuiteaddons.deployments.update",
    "healthcare.annotationStores.create",
    "healthcare.annotationStores.delete",
    "healthcare.annotationStores.evaluate",
    "healthcare.annotationStores.export",
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.import",
    "healthcare.annotationStores.list",
    "healthcare.annotationStores.setIamPolicy",
    "healthcare.annotationStores.update",
    "healthcare.annotations.create",
    "healthcare.annotations.delete",
    "healthcare.annotations.get",
    "healthcare.annotations.list",
    "healthcare.annotations.update",
    "healthcare.attributeDefinitions.create",
    "healthcare.attributeDefinitions.delete",
    "healthcare.attributeDefinitions.get",
    "healthcare.attributeDefinitions.list",
    "healthcare.attributeDefinitions.update",
    "healthcare.consentArtifacts.create",
    "healthcare.consentArtifacts.delete",
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.create",
    "healthcare.consentStores.delete",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consentStores.setIamPolicy",
    "healthcare.consentStores.update",
    "healthcare.consents.activate",
    "healthcare.consents.create",
    "healthcare.consents.delete",
    "healthcare.consents.get",
    "healthcare.consents.list",
    "healthcare.consents.reject",
    "healthcare.consents.revoke",
    "healthcare.consents.update",
    "healthcare.datasets.create",
    "healthcare.datasets.deidentify",
    "healthcare.datasets.delete",
    "healthcare.datasets.get",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.datasets.setIamPolicy",
    "healthcare.datasets.update",
    "healthcare.dicomStores.create",
    "healthcare.dicomStores.deidentify",
    "healthcare.dicomStores.delete",
    "healthcare.dicomStores.dicomWebDelete",
    "healthcare.dicomStores.dicomWebRead",
    "healthcare.dicomStores.dicomWebWrite",
    "healthcare.dicomStores.export",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.import",
    "healthcare.dicomStores.list",
    "healthcare.dicomStores.setIamPolicy",
    "healthcare.dicomStores.update",
    "healthcare.fhirResources.create",
    "healthcare.fhirResources.delete",
    "healthcare.fhirResources.get",
    "healthcare.fhirResources.patch",
    "healthcare.fhirResources.purge",
    "healthcare.fhirResources.translateConceptMap",
    "healthcare.fhirResources.update",
    "healthcare.fhirStores.create",
    "healthcare.fhirStores.deidentify",
    "healthcare.fhirStores.delete",
    "healthcare.fhirStores.executeBundle",
    "healthcare.fhirStores.export",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.import",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.searchResources",
    "healthcare.fhirStores.setIamPolicy",
    "healthcare.fhirStores.update",
    "healthcare.hl7V2Messages.create",
    "healthcare.hl7V2Messages.delete",
    "healthcare.hl7V2Messages.get",
    "healthcare.hl7V2Messages.ingest",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Messages.update",
    "healthcare.hl7V2Stores.create",
    "healthcare.hl7V2Stores.delete",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.import",
    "healthcare.hl7V2Stores.list",
    "healthcare.hl7V2Stores.setIamPolicy",
    "healthcare.hl7V2Stores.update",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.nlpservice.analyzeEntities",
    "healthcare.operations.cancel",
    "healthcare.operations.get",
    "healthcare.operations.list",
    "healthcare.userDataMappings.archive",
    "healthcare.userDataMappings.create",
    "healthcare.userDataMappings.delete",
    "healthcare.userDataMappings.get",
    "healthcare.userDataMappings.list",
    "healthcare.userDataMappings.update",
    "iam.googleapis.com/workloadIdentityPoolProviders.create",
    "iam.googleapis.com/workloadIdentityPoolProviders.delete",
    "iam.googleapis.com/workloadIdentityPoolProviders.get",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.undelete",
    "iam.googleapis.com/workloadIdentityPoolProviders.update",
    "iam.googleapis.com/workloadIdentityPools.create",
    "iam.googleapis.com/workloadIdentityPools.delete",
    "iam.googleapis.com/workloadIdentityPools.get",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.googleapis.com/workloadIdentityPools.undelete",
    "iam.googleapis.com/workloadIdentityPools.update",
    "iam.roles.create",
    "iam.roles.delete",
    "iam.roles.get",
    "iam.roles.list",
    "iam.roles.undelete",
    "iam.roles.update",
    "iam.serviceAccountKeys.create",
    "iam.serviceAccountKeys.delete",
    "iam.serviceAccountKeys.get",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.create",
    "iam.serviceAccounts.delete",
    "iam.serviceAccounts.disable",
    "iam.serviceAccounts.enable",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.setIamPolicy",
    "iam.serviceAccounts.undelete",
    "iam.serviceAccounts.update",
    "iap.projects.getSettings",
    "iap.projects.updateSettings",
    "iap.tunnel.getIamPolicy",
    "iap.tunnel.setIamPolicy",
    "iap.tunnelInstances.accessViaIAP",
    "iap.tunnelInstances.getIamPolicy",
    "iap.tunnelInstances.setIamPolicy",
    "iap.tunnelZones.getIamPolicy",
    "iap.tunnelZones.setIamPolicy",
    "iap.web.getIamPolicy",
    "iap.web.getSettings",
    "iap.web.setIamPolicy",
    "iap.web.updateSettings",
    "iap.webServiceVersions.getIamPolicy",
    "iap.webServiceVersions.getSettings",
    "iap.webServiceVersions.setIamPolicy",
    "iap.webServiceVersions.updateSettings",
    "iap.webServices.getIamPolicy",
    "iap.webServices.getSettings",
    "iap.webServices.setIamPolicy",
    "iap.webServices.updateSettings",
    "iap.webTypes.getIamPolicy",
    "iap.webTypes.getSettings",
    "iap.webTypes.setIamPolicy",
    "iap.webTypes.updateSettings",
    "identityplatform.workloadPoolProviders.create",
    "identityplatform.workloadPoolProviders.delete",
    "identityplatform.workloadPoolProviders.get",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPoolProviders.undelete",
    "identityplatform.workloadPoolProviders.update",
    "identityplatform.workloadPools.create",
    "identityplatform.workloadPools.delete",
    "identityplatform.workloadPools.get",
    "identityplatform.workloadPools.list",
    "identityplatform.workloadPools.undelete",
    "identityplatform.workloadPools.update",
    "lifesciences.operations.cancel",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "lifesciences.workflows.run",
    "logging.buckets.create",
    "logging.buckets.delete",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.buckets.undelete",
    "logging.buckets.update",
    "logging.cmekSettings.get",
    "logging.cmekSettings.update",
    "logging.exclusions.create",
    "logging.exclusions.delete",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.exclusions.update",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.create",
    "logging.logEntries.download",
    "logging.logEntries.list",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logMetrics.update",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.delete",
    "logging.logs.list",
    "logging.notificationRules.create",
    "logging.notificationRules.delete",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.notificationRules.update",
    "logging.privateLogEntries.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.share",
    "logging.queries.update",
    "logging.queries.updateShared",
    "logging.sinks.create",
    "logging.sinks.delete",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.sinks.update",
    "logging.usage.get",
    "logging.views.access",
    "logging.views.create",
    "logging.views.delete",
    "logging.views.get",
    "logging.views.list",
    "logging.views.listLogs",
    "logging.views.listResourceKeys",
    "logging.views.listResourceValues",
    "logging.views.update",
    "managedidentities.domains.attachTrust",
    "managedidentities.domains.create",
    "managedidentities.domains.delete",
    "managedidentities.domains.detachTrust",
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.domains.reconfigureTrust",
    "managedidentities.domains.resetpassword",
    "managedidentities.domains.setIamPolicy",
    "managedidentities.domains.update",
    "managedidentities.domains.updateLDAPSSettings",
    "managedidentities.domains.validateTrust",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.cancel",
    "managedidentities.operations.delete",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "memcache.instances.applyParameters",
    "memcache.instances.applySoftwareUpdate",
    "memcache.instances.create",
    "memcache.instances.delete",
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.instances.update",
    "memcache.instances.updateParameters",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.cancel",
    "memcache.operations.delete",
    "memcache.operations.get",
    "memcache.operations.list",
    "metastore.imports.create",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.imports.update",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.cancel",
    "metastore.operations.delete",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.create",
    "metastore.services.delete",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "metastore.services.restore",
    "metastore.services.setIamPolicy",
    "metastore.services.update",
    "ml.jobs.cancel",
    "ml.jobs.create",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.jobs.setIamPolicy",
    "ml.jobs.update",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.create",
    "ml.models.delete",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.models.setIamPolicy",
    "ml.models.update",
    "ml.operations.cancel",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.create",
    "ml.studies.delete",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.studies.setIamPolicy",
    "ml.trials.create",
    "ml.trials.delete",
    "ml.trials.get",
    "ml.trials.list",
    "ml.trials.update",
    "ml.versions.create",
    "ml.versions.delete",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "ml.versions.update",
    "monitoring.alertPolicies.create",
    "monitoring.alertPolicies.delete",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.alertPolicies.update",
    "monitoring.dashboards.create",
    "monitoring.dashboards.delete",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.dashboards.update",
    "monitoring.groups.create",
    "monitoring.groups.delete",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.groups.update",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.delete",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.create",
    "monitoring.notificationChannels.delete",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.getVerificationCode",
    "monitoring.notificationChannels.list",
    "monitoring.notificationChannels.sendVerificationCode",
    "monitoring.notificationChannels.update",
    "monitoring.notificationChannels.verify",
    "monitoring.publicWidgets.create",
    "monitoring.publicWidgets.delete",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.publicWidgets.update",
    "monitoring.services.create",
    "monitoring.services.delete",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.services.update",
    "monitoring.slos.create",
    "monitoring.slos.delete",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.slos.update",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.create",
    "monitoring.uptimeCheckConfigs.delete",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "monitoring.uptimeCheckConfigs.update",
    "networkmanagement.connectivitytests.create",
    "networkmanagement.connectivitytests.delete",
    "networkmanagement.connectivitytests.get",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.connectivitytests.rerun",
    "networkmanagement.connectivitytests.setIamPolicy",
    "networkmanagement.connectivitytests.update",
    "networkmanagement.locations.get",
    "networkmanagement.locations.list",
    "networkmanagement.operations.get",
    "networkmanagement.operations.list",
    "networksecurity.authorizationPolicies.create",
    "networksecurity.authorizationPolicies.delete",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.authorizationPolicies.setIamPolicy",
    "networksecurity.authorizationPolicies.update",
    "networksecurity.authorizationPolicies.use",
    "networksecurity.clientTlsPolicies.create",
    "networksecurity.clientTlsPolicies.delete",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.clientTlsPolicies.setIamPolicy",
    "networksecurity.clientTlsPolicies.update",
    "networksecurity.clientTlsPolicies.use",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.cancel",
    "networksecurity.operations.delete",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.create",
    "networksecurity.serverTlsPolicies.delete",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networksecurity.serverTlsPolicies.setIamPolicy",
    "networksecurity.serverTlsPolicies.update",
    "networksecurity.serverTlsPolicies.use",
    "networkservices.endpointConfigSelectors.create",
    "networkservices.endpointConfigSelectors.delete",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.endpointConfigSelectors.setIamPolicy",
    "networkservices.endpointConfigSelectors.update",
    "networkservices.endpointConfigSelectors.use",
    "networkservices.httpFilters.create",
    "networkservices.httpFilters.delete",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpFilters.setIamPolicy",
    "networkservices.httpFilters.update",
    "networkservices.httpFilters.use",
    "networkservices.httpfilters.create",
    "networkservices.httpfilters.delete",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.httpfilters.setIamPolicy",
    "networkservices.httpfilters.update",
    "networkservices.httpfilters.use",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.cancel",
    "networkservices.operations.delete",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "notebooks.environments.create",
    "notebooks.environments.delete",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.environments.setIamPolicy",
    "notebooks.executions.create",
    "notebooks.executions.delete",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.executions.setIamPolicy",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.create",
    "notebooks.instances.delete",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.instances.reset",
    "notebooks.instances.setAccelerator",
    "notebooks.instances.setIamPolicy",
    "notebooks.instances.setLabels",
    "notebooks.instances.setMachineType",
    "notebooks.instances.start",
    "notebooks.instances.stop",
    "notebooks.instances.update",
    "notebooks.instances.updateConfig",
    "notebooks.instances.updateShieldInstanceConfig",
    "notebooks.instances.upgrade",
    "notebooks.instances.use",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.cancel",
    "notebooks.operations.delete",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.create",
    "notebooks.schedules.delete",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "notebooks.schedules.setIamPolicy",
    "oauthconfig.clientpolicy.get",
    "oauthconfig.testusers.get",
    "oauthconfig.testusers.update",
    "oauthconfig.verification.get",
    "oauthconfig.verification.submit",
    "oauthconfig.verification.update",
    "ondemandscanning.operations.cancel",
    "ondemandscanning.operations.delete",
    "ondemandscanning.operations.get",
    "ondemandscanning.operations.list",
    "ondemandscanning.operations.wait",
    "ondemandscanning.scans.analyzePackages",
    "ondemandscanning.scans.listVulnerabilities",
    "ondemandscanning.scans.scan",
    "opsconfigmonitoring.resourceMetadata.write",
    "orgpolicy.policy.get",
    "osconfig.guestPolicies.create",
    "osconfig.guestPolicies.delete",
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "osconfig.guestPolicies.update",
    "osconfig.patchDeployments.create",
    "osconfig.patchDeployments.delete",
    "osconfig.patchDeployments.execute",
    "osconfig.patchDeployments.get",
    "osconfig.patchDeployments.list",
    "osconfig.patchDeployments.update",
    "osconfig.patchJobs.exec",
    "osconfig.patchJobs.get",
    "osconfig.patchJobs.list",
    "policysimulator.replayResults.list",
    "policysimulator.replays.create",
    "policysimulator.replays.get",
    "policysimulator.replays.list",
    "policysimulator.replays.run",
    "privateca.certificateAuthorities.create",
    "privateca.certificateAuthorities.delete",
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateAuthorities.setIamPolicy",
    "privateca.certificateAuthorities.update",
    "privateca.certificateRevocationLists.create",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificateRevocationLists.setIamPolicy",
    "privateca.certificateRevocationLists.update",
    "privateca.certificates.create",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.certificates.setIamPolicy",
    "privateca.certificates.update",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.cancel",
    "privateca.operations.delete",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.create",
    "privateca.reusableConfigs.delete",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "privateca.reusableConfigs.setIamPolicy",
    "privateca.reusableConfigs.update",
    "proximitybeacon.attachments.create",
    "proximitybeacon.attachments.delete",
    "proximitybeacon.attachments.get",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.attach",
    "proximitybeacon.beacons.create",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.getIamPolicy",
    "proximitybeacon.beacons.list",
    "proximitybeacon.beacons.setIamPolicy",
    "proximitybeacon.beacons.update",
    "proximitybeacon.namespaces.create",
    "proximitybeacon.namespaces.delete",
    "proximitybeacon.namespaces.get",
    "proximitybeacon.namespaces.getIamPolicy",
    "proximitybeacon.namespaces.list",
    "proximitybeacon.namespaces.setIamPolicy",
    "proximitybeacon.namespaces.update",
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "pubsublite.subscriptions.create",
    "pubsublite.subscriptions.delete",
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.subscriptions.setCursor",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.subscriptions.update",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.create",
    "pubsublite.topics.delete",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions",
    "pubsublite.topics.publish",
    "pubsublite.topics.subscribe",
    "pubsublite.topics.update",
    "recaptchaenterprise.assessments.annotate",
    "recaptchaenterprise.assessments.create",
    "recaptchaenterprise.keys.create",
    "recaptchaenterprise.keys.delete",
    "recaptchaenterprise.keys.get",
    "recaptchaenterprise.keys.list",
    "recaptchaenterprise.keys.update",
    "recaptchaenterprise.metrics.get",
    "recaptchaenterprise.projectmetadata.get",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.commitmentUtilizationInsights.update",
    "recommender.computeAddressIdleResourceInsights.get",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceInsights.update",
    "recommender.computeAddressIdleResourceRecommendations.get",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeAddressIdleResourceRecommendations.update",
    "recommender.computeDiskIdleResourceInsights.get",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceInsights.update",
    "recommender.computeDiskIdleResourceRecommendations.get",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceRecommendations.update",
    "recommender.computeFirewallInsights.get",
    "recommender.computeFirewallInsights.list",
    "recommender.computeFirewallInsights.update",
    "recommender.computeImageIdleResourceInsights.get",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceInsights.update",
    "recommender.computeImageIdleResourceRecommendations.get",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeImageIdleResourceRecommendations.update",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
    "recommender.computeInstanceIdleResourceRecommendations.get",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.update",
    "recommender.computeInstanceMachineTypeRecommendations.get",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.update",
    "recommender.iamPolicyInsights.get",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyInsights.update",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamPolicyRecommendations.update",
    "recommender.iamServiceAccountInsights.get",
    "recommender.iamServiceAccountInsights.list",
    "recommender.iamServiceAccountInsights.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.get",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerInsights.update",
    "recommender.loggingProductSuggestionContainerRecommendations.get",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.loggingProductSuggestionContainerRecommendations.update",
    "recommender.monitoringProductSuggestionComputeInsights.get",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeInsights.update",
    "recommender.monitoringProductSuggestionComputeRecommendations.get",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.update",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "recommender.usageCommitmentRecommendations.update",
    "redis.instances.create",
    "redis.instances.delete",
    "redis.instances.export",
    "redis.instances.failover",
    "redis.instances.get",
    "redis.instances.getAuthString",
    "redis.instances.import",
    "redis.instances.list",
    "redis.instances.update",
    "redis.instances.updateAuth",
    "redis.instances.upgrade",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.cancel",
    "redis.operations.delete",
    "redis.operations.get",
    "redis.operations.list",
    "remotebuildexecution.actions.create",
    "remotebuildexecution.actions.delete",
    "remotebuildexecution.actions.get",
    "remotebuildexecution.actions.update",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.botsessions.create",
    "remotebuildexecution.botsessions.update",
    "remotebuildexecution.instances.create",
    "remotebuildexecution.instances.delete",
    "remotebuildexecution.instances.get",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.get",
    "remotebuildexecution.logstreams.update",
    "remotebuildexecution.workerpools.create",
    "remotebuildexecution.workerpools.delete",
    "remotebuildexecution.workerpools.get",
    "remotebuildexecution.workerpools.list",
    "remotebuildexecution.workerpools.update",
    "resourcemanager.projects.createBillingAssignment",
    "resourcemanager.projects.delete",
    "resourcemanager.projects.deleteBillingAssignment",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.projects.move",
    "resourcemanager.projects.setIamPolicy",
    "resourcemanager.projects.undelete",
    "resourcemanager.projects.update",
    "resourcemanager.projects.updateLiens",
    "resourcemanager.resourceTagBindings.create",
    "resourcemanager.resourceTagBindings.delete",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.create",
    "resourcemanager.tagKeys.delete",
    "resourcemanager.tagKeys.get",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagKeys.setIamPolicy",
    "resourcemanager.tagKeys.update",
    "resourcemanager.tagValueBindings.create",
    "resourcemanager.tagValueBindings.delete",
    "resourcemanager.tagValues.create",
    "resourcemanager.tagValues.delete",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "resourcemanager.tagValues.setIamPolicy",
    "resourcemanager.tagValues.update",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import",
    "retail.userEvents.purge",
    "retail.userEvents.rejoin",
    "run.configurations.get",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.delete",
    "run.revisions.get",
    "run.revisions.list",
    "run.routes.get",
    "run.routes.invoke",
    "run.routes.list",
    "run.services.create",
    "run.services.delete",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list",
    "run.services.setIamPolicy",
    "run.services.update",
    "runtimeconfig.configs.create",
    "runtimeconfig.configs.delete",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.getIamPolicy",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.setIamPolicy",
    "runtimeconfig.configs.update",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.create",
    "runtimeconfig.variables.delete",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.getIamPolicy",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.setIamPolicy",
    "runtimeconfig.variables.update",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.create",
    "runtimeconfig.waiters.delete",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.getIamPolicy",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.setIamPolicy",
    "runtimeconfig.waiters.update",
    "secretmanager.locations.get",
    "secretmanager.locations.list",
    "secretmanager.secrets.create",
    "secretmanager.secrets.delete",
    "secretmanager.secrets.get",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.secrets.setIamPolicy",
    "secretmanager.secrets.update",
    "secretmanager.versions.access",
    "secretmanager.versions.add",
    "secretmanager.versions.destroy",
    "secretmanager.versions.disable",
    "secretmanager.versions.enable",
    "secretmanager.versions.get",
    "secretmanager.versions.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.containerthreatdetectionsettings.update",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.update",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.organizationsettings.update",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securitycentersettings.update",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.securityhealthanalyticssettings.update",
    "securitycenter.sources.get",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.sources.setIamPolicy",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "securitycenter.websecurityscannersettings.update",
    "servicebroker.bindingoperations.get",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.create",
    "servicebroker.bindings.delete",
    "servicebroker.bindings.get",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.bindings.setIamPolicy",
    "servicebroker.catalogs.create",
    "servicebroker.catalogs.delete",
    "servicebroker.catalogs.get",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.catalogs.setIamPolicy",
    "servicebroker.catalogs.validate",
    "servicebroker.instanceoperations.get",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.create",
    "servicebroker.instances.delete",
    "servicebroker.instances.get",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "servicebroker.instances.setIamPolicy",
    "servicebroker.instances.update",
    "serviceconsumermanagement.consumers.get",
    "serviceconsumermanagement.quota.get",
    "serviceconsumermanagement.quota.update",
    "serviceconsumermanagement.tenancyu.addResource",
    "serviceconsumermanagement.tenancyu.create",
    "serviceconsumermanagement.tenancyu.delete",
    "serviceconsumermanagement.tenancyu.list",
    "serviceconsumermanagement.tenancyu.removeResource",
    "servicedirectory.endpoints.create",
    "servicedirectory.endpoints.delete",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.endpoints.setIamPolicy",
    "servicedirectory.endpoints.update",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.associatePrivateZone",
    "servicedirectory.namespaces.create",
    "servicedirectory.namespaces.delete",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.namespaces.setIamPolicy",
    "servicedirectory.namespaces.update",
    "servicedirectory.services.create",
    "servicedirectory.services.delete",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve",
    "servicedirectory.services.setIamPolicy",
    "servicedirectory.services.update",
    "servicemanagement.consumerSettings.get",
    "servicemanagement.consumerSettings.getIamPolicy",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.consumerSettings.setIamPolicy",
    "servicemanagement.consumerSettings.update",
    "servicemanagement.services.bind",
    "servicemanagement.services.check",
    "servicemanagement.services.create",
    "servicemanagement.services.delete",
    "servicemanagement.services.get",
    "servicemanagement.services.getIamPolicy",
    "servicemanagement.services.list",
    "servicemanagement.services.quota",
    "servicemanagement.services.report",
    "servicemanagement.services.setIamPolicy",
    "servicemanagement.services.update",
    "servicenetworking.operations.cancel",
    "servicenetworking.operations.delete",
    "servicenetworking.operations.get",
    "servicenetworking.operations.list",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.addSubnetwork",
    "servicenetworking.services.get",
    "serviceusage.apiKeys.regenerate",
    "serviceusage.apiKeys.revert",
    "serviceusage.operations.cancel",
    "serviceusage.operations.delete",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.quotas.update",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use",
    "source.repos.create",
    "source.repos.delete",
    "source.repos.get",
    "source.repos.getIamPolicy",
    "source.repos.getProjectConfig",
    "source.repos.list",
    "source.repos.setIamPolicy",
    "source.repos.update",
    "source.repos.updateProjectConfig",
    "source.repos.updateRepoConfig",
    "spanner.backupOperations.cancel",
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.create",
    "spanner.backups.delete",
    "spanner.backups.get",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.backups.restoreDatabase",
    "spanner.backups.setIamPolicy",
    "spanner.backups.update",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.create",
    "spanner.databases.createBackup",
    "spanner.databases.drop",
    "spanner.databases.get",
    "spanner.databases.getDdl",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.setIamPolicy",
    "spanner.databases.update",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.cancel",
    "spanner.instanceOperations.delete",
    "spanner.instanceOperations.get",
    "spanner.instanceOperations.list",
    "spanner.instances.create",
    "spanner.instances.delete",
    "spanner.instances.get",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.instances.setIamPolicy",
    "spanner.instances.update",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list",
    "stackdriver.projects.edit",
    "stackdriver.projects.get",
    "stackdriver.resourceMetadata.write",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.list",
    "storage.hmacKeys.create",
    "storage.hmacKeys.delete",
    "storage.hmacKeys.get",
    "storage.hmacKeys.list",
    "storage.hmacKeys.update",
    "storagetransfer.jobs.create",
    "storagetransfer.jobs.delete",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.jobs.run",
    "storagetransfer.jobs.update",
    "storagetransfer.operations.cancel",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.operations.pause",
    "storagetransfer.operations.resume",
    "storagetransfer.projects.getServiceAccount",
    "subscribewithgoogledeveloper.tools.get",
    "threatdetection.detectorSettings.clear",
    "threatdetection.detectorSettings.get",
    "threatdetection.detectorSettings.update",
    "threatdetection.sinkSettings.get",
    "threatdetection.sinkSettings.update",
    "threatdetection.sourceSettings.get",
    "threatdetection.sourceSettings.update",
    "tpu.acceleratortypes.get",
    "tpu.acceleratortypes.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.create",
    "tpu.nodes.delete",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.nodes.reimage",
    "tpu.nodes.reset",
    "tpu.nodes.start",
    "tpu.nodes.stop",
    "tpu.operations.get",
    "tpu.operations.list",
    "tpu.tensorflowversions.get",
    "tpu.tensorflowversions.list",
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics",
    "transcoder.jobTemplates.create",
    "transcoder.jobTemplates.delete",
    "transcoder.jobTemplates.get",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.create",
    "transcoder.jobs.delete",
    "transcoder.jobs.get",
    "transcoder.jobs.list",
    "vmmigration.deployments.create",
    "vmmigration.deployments.get",
    "vmmigration.deployments.list",
    "vmwareengine.services.use",
    "vmwareengine.services.view",
    "vpcaccess.connectors.create",
    "vpcaccess.connectors.delete",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.connectors.use",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list",
    "workflows.executions.cancel",
    "workflows.executions.create",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.cancel",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.create",
    "workflows.workflows.delete",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list",
    "workflows.workflows.setIamPolicy",
    "workflows.workflows.update"
   ]
  },
  {
   "name": "roles/policysimulator.admin",
   "role": {
    "description": "Admin user that can run and access replays.",
    "etag": "AA==",
    "name": "roles/policysimulator.admin",
    "stage": "BETA",
    "title": "Simulator Admin"
   },
   "included_permissions": [
    "policysimulator.replayResults.list",
    "policysimulator.replays.create",
    "policysimulator.replays.get",
    "policysimulator.replays.list",
    "policysimulator.replays.run"
   ]
  },
  {
   "name": "roles/privateca.admin",
   "role": {
    "description": "Full access to all CA Service resources.",
    "etag": "AA==",
    "name": "roles/privateca.admin",
    "stage": "BETA",
    "title": "CA Service Admin"
   },
   "included_permissions": [
    "privateca.certificateAuthorities.create",
    "privateca.certificateAuthorities.delete",
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateAuthorities.setIamPolicy",
    "privateca.certificateAuthorities.update",
    "privateca.certificateRevocationLists.create",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificateRevocationLists.setIamPolicy",
    "privateca.certificateRevocationLists.update",
    "privateca.certificates.create",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.certificates.setIamPolicy",
    "privateca.certificates.update",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.cancel",
    "privateca.operations.delete",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.create",
    "privateca.reusableConfigs.delete",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "privateca.reusableConfigs.setIamPolicy",
    "privateca.reusableConfigs.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.create"
   ]
  },
  {
   "name": "roles/pubsublite.viewer",
   "role": {
    "description": "View topics and subscriptions.",
    "etag": "AA==",
    "name": "roles/pubsublite.viewer",
    "stage": "GA",
    "title": "Pub/Sub Lite Viewer"
   },
   "included_permissions": [
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions"
   ]
  },
  {
   "name": "roles/privateca.auditor",
   "role": {
    "description": "Read-only access to all CA Service resources.",
    "etag": "AA==",
    "name": "roles/privateca.auditor",
    "stage": "BETA",
    "title": "CA Service Auditor"
   },
   "included_permissions": [
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/privateca.caManager",
   "role": {
    "description": "Create and manage CAs, revoke certificates, create CA configurations, and read-only access for CA Service resources.",
    "etag": "AA==",
    "name": "roles/privateca.caManager",
    "stage": "BETA",
    "title": "CA Service Operation Manager"
   },
   "included_permissions": [
    "privateca.certificateAuthorities.create",
    "privateca.certificateAuthorities.delete",
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateAuthorities.update",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificateRevocationLists.update",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.certificates.update",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.create",
    "privateca.reusableConfigs.delete",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "privateca.reusableConfigs.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.create"
   ]
  },
  {
   "name": "roles/privateca.certificateManager",
   "role": {
    "description": "Create certificates and read-only access for CA Service resources.",
    "etag": "AA==",
    "name": "roles/privateca.certificateManager",
    "stage": "BETA",
    "title": "CA Service Certificate Manager"
   },
   "included_permissions": [
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificates.create",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/privateca.certificateRequester",
   "role": {
    "description": "Request certificates from CA Service.",
    "etag": "AA==",
    "name": "roles/privateca.certificateRequester",
    "stage": "BETA",
    "title": "CA Service Certificate Requester"
   },
   "included_permissions": [
    "privateca.certificates.create"
   ]
  },
  {
   "name": "roles/proximitybeacon.attachmentEditor",
   "role": {
    "description": "Can create and delete attachments; can list and get a project's beacons; can list a project's namespaces.",
    "etag": "AA==",
    "name": "roles/proximitybeacon.attachmentEditor",
    "stage": "GA",
    "title": "Beacon Attachment Editor"
   },
   "included_permissions": [
    "proximitybeacon.attachments.create",
    "proximitybeacon.attachments.delete",
    "proximitybeacon.attachments.get",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.list",
    "proximitybeacon.namespaces.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recaptchaenterprise.admin",
   "role": {
    "description": "Access to view and modify reCAPTCHA Enterprise keys",
    "etag": "AA==",
    "name": "roles/recaptchaenterprise.admin",
    "stage": "BETA",
    "title": "reCAPTCHA Enterprise Admin"
   },
   "included_permissions": [
    "recaptchaenterprise.keys.create",
    "recaptchaenterprise.keys.delete",
    "recaptchaenterprise.keys.get",
    "recaptchaenterprise.keys.list",
    "recaptchaenterprise.keys.update",
    "recaptchaenterprise.metrics.get",
    "recaptchaenterprise.projectmetadata.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/proximitybeacon.beaconEditor",
   "role": {
    "description": "Necessary access to register, modify, and view beacons; no attachment or namespace permissions.",
    "etag": "AA==",
    "name": "roles/proximitybeacon.beaconEditor",
    "stage": "GA",
    "title": "Beacon Editor"
   },
   "included_permissions": [
    "proximitybeacon.beacons.create",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.list",
    "proximitybeacon.beacons.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recaptchaenterprise.agent",
   "role": {
    "description": "Access to create and annotate reCAPTCHA Enterprise assessments",
    "etag": "AA==",
    "name": "roles/recaptchaenterprise.agent",
    "stage": "BETA",
    "title": "reCAPTCHA Enterprise Agent"
   },
   "included_permissions": [
    "recaptchaenterprise.assessments.annotate",
    "recaptchaenterprise.assessments.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/pubsub.admin",
   "role": {
    "description": "Full access to topics, subscriptions, and snapshots.",
    "etag": "AA==",
    "name": "roles/pubsub.admin",
    "stage": "GA",
    "title": "Pub/Sub Admin"
   },
   "included_permissions": [
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.schemas.setIamPolicy",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.getIamPolicy",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.setIamPolicy",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.setIamPolicy",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.setIamPolicy",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/pubsub.editor",
   "role": {
    "description": "Modify topics and subscriptions, publish and consume messages.",
    "etag": "AA==",
    "name": "roles/pubsub.editor",
    "stage": "GA",
    "title": "Pub/Sub Editor"
   },
   "included_permissions": [
    "pubsub.schemas.attach",
    "pubsub.schemas.create",
    "pubsub.schemas.delete",
    "pubsub.schemas.get",
    "pubsub.schemas.list",
    "pubsub.schemas.validate",
    "pubsub.snapshots.create",
    "pubsub.snapshots.delete",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.snapshots.update",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.subscriptions.update",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "pubsub.topics.update",
    "pubsub.topics.updateTag",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/pubsub.publisher",
   "role": {
    "description": "Publish messages to a topic.",
    "etag": "AA==",
    "name": "roles/pubsub.publisher",
    "stage": "GA",
    "title": "Pub/Sub Publisher"
   },
   "included_permissions": [
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/pubsub.serviceAgent",
   "role": {
    "description": "Grants Cloud Pub/Sub Service Account access to manage resources.",
    "etag": "AA==",
    "name": "roles/pubsub.serviceAgent",
    "stage": "GA",
    "title": "Cloud Pub/Sub Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.implicitDelegation",
    "iam.serviceAccounts.list",
    "iam.serviceAccounts.signBlob",
    "iam.serviceAccounts.signJwt",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/pubsub.subscriber",
   "role": {
    "description": "Consume messages from a subscription, attach subscriptions to a topic, and seek to a snapshot.",
    "etag": "AA==",
    "name": "roles/pubsub.subscriber",
    "stage": "GA",
    "title": "Pub/Sub Subscriber"
   },
   "included_permissions": [
    "pubsub.snapshots.seek",
    "pubsub.subscriptions.consume",
    "pubsub.topics.attachSubscription"
   ]
  },
  {
   "name": "roles/pubsub.viewer",
   "role": {
    "description": "View topics, subscriptions, and snapshots.",
    "etag": "AA==",
    "name": "roles/pubsub.viewer",
    "stage": "GA",
    "title": "Pub/Sub Viewer"
   },
   "included_permissions": [
    "pubsub.schemas.get",
    "pubsub.schemas.list",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "resourcemanager.projects.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/recommender.productSuggestionAdmin",
   "role": {
    "description": "Admin of all Product Suggestion insights and recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.productSuggestionAdmin",
    "stage": "BETA",
    "title": "Product Suggestion Recommenders Admin"
   },
   "included_permissions": [
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.get",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerInsights.update",
    "recommender.loggingProductSuggestionContainerRecommendations.get",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.loggingProductSuggestionContainerRecommendations.update",
    "recommender.monitoringProductSuggestionComputeInsights.get",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeInsights.update",
    "recommender.monitoringProductSuggestionComputeRecommendations.get",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.billingAccountCudViewer",
   "role": {
    "description": "Viewer of Billing Account Usage Commitment Recommender.",
    "etag": "AA==",
    "name": "roles/recommender.billingAccountCudViewer",
    "stage": "BETA",
    "title": "Billing Account Usage Commitment Recommender Viewer"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.list",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list"
   ]
  },
  {
   "name": "roles/recommender.billingAccountCudAdmin",
   "role": {
    "description": "Admin of Billing Account Usage Commitment Recommender.",
    "etag": "AA==",
    "name": "roles/recommender.billingAccountCudAdmin",
    "stage": "BETA",
    "title": "Billing Account Usage Commitment Recommender Admin"
   },
   "included_permissions": [
    "billing.accounts.get",
    "billing.accounts.list",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.commitmentUtilizationInsights.update",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "recommender.usageCommitmentRecommendations.update"
   ]
  },
  {
   "name": "roles/recommender.computeAdmin",
   "role": {
    "description": "Admin of compute recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.computeAdmin",
    "stage": "GA",
    "title": "Compute Recommender Admin"
   },
   "included_permissions": [
    "recommender.computeAddressIdleResourceInsights.get",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceInsights.update",
    "recommender.computeAddressIdleResourceRecommendations.get",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeAddressIdleResourceRecommendations.update",
    "recommender.computeDiskIdleResourceInsights.get",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceInsights.update",
    "recommender.computeDiskIdleResourceRecommendations.get",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceRecommendations.update",
    "recommender.computeImageIdleResourceInsights.get",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceInsights.update",
    "recommender.computeImageIdleResourceRecommendations.get",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeImageIdleResourceRecommendations.update",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
    "recommender.computeInstanceIdleResourceRecommendations.get",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.update",
    "recommender.computeInstanceMachineTypeRecommendations.get",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.computeViewer",
   "role": {
    "description": "Viewer of compute recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.computeViewer",
    "stage": "GA",
    "title": "Compute Recommender Viewer"
   },
   "included_permissions": [
    "recommender.computeAddressIdleResourceInsights.get",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceRecommendations.get",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceInsights.get",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceRecommendations.get",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeImageIdleResourceInsights.get",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceRecommendations.get",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.get",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.get",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.firewallAdmin",
   "role": {
    "description": "Admin of Firewall insights and recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.firewallAdmin",
    "stage": "GA",
    "title": "Firewall Recommender Admin"
   },
   "included_permissions": [
    "recommender.computeFirewallInsights.get",
    "recommender.computeFirewallInsights.list",
    "recommender.computeFirewallInsights.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.firewallViewer",
   "role": {
    "description": "Viewer of Firewall insights and recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.firewallViewer",
    "stage": "GA",
    "title": "Firewall Recommender Viewer"
   },
   "included_permissions": [
    "recommender.computeFirewallInsights.get",
    "recommender.computeFirewallInsights.list",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.iamAdmin",
   "role": {
    "description": "Admin of IAM recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.iamAdmin",
    "stage": "GA",
    "title": "IAM Recommender Admin"
   },
   "included_permissions": [
    "recommender.iamPolicyInsights.get",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyInsights.update",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamPolicyRecommendations.update",
    "recommender.iamServiceAccountInsights.get",
    "recommender.iamServiceAccountInsights.list",
    "recommender.iamServiceAccountInsights.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/recommender.productSuggestionViewer",
   "role": {
    "description": "Viewer of all Product Suggestion insights and recommendations.",
    "etag": "AA==",
    "name": "roles/recommender.productSuggestionViewer",
    "stage": "BETA",
    "title": "Product Suggestion Recommenders Viewer"
   },
   "included_permissions": [
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.get",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerRecommendations.get",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.monitoringProductSuggestionComputeInsights.get",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.get",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/redis.editor",
   "role": {
    "description": "Read-Write access to Redis instances and related resources.",
    "etag": "AA==",
    "name": "roles/redis.editor",
    "stage": "BETA",
    "title": "Cloud Memorystore Redis Editor"
   },
   "included_permissions": [
    "compute.networks.list",
    "redis.instances.failover",
    "redis.instances.get",
    "redis.instances.list",
    "redis.instances.update",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.cancel",
    "redis.operations.delete",
    "redis.operations.get",
    "redis.operations.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/recommender.projectCudAdmin",
   "role": {
    "description": "Admin of Project Usage Commitment Recommender.",
    "etag": "AA==",
    "name": "roles/recommender.projectCudAdmin",
    "stage": "BETA",
    "title": "Project Usage Commitment Recommender Admin"
   },
   "included_permissions": [
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.commitmentUtilizationInsights.update",
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "recommender.usageCommitmentRecommendations.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/remotebuildexecution.configurationAdmin",
   "role": {
    "description": "Remote Build Execution Configuration Admin",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.configurationAdmin",
    "stage": "BETA",
    "title": "Remote Build Execution Configuration Admin"
   },
   "included_permissions": [
    "remotebuildexecution.instances.create",
    "remotebuildexecution.instances.delete",
    "remotebuildexecution.instances.get",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.workerpools.create",
    "remotebuildexecution.workerpools.delete",
    "remotebuildexecution.workerpools.get",
    "remotebuildexecution.workerpools.list",
    "remotebuildexecution.workerpools.update"
   ]
  },
  {
   "name": "roles/remotebuildexecution.artifactCreator",
   "role": {
    "description": "Remote Build Execution Artifact Creator",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.artifactCreator",
    "stage": "BETA",
    "title": "Remote Build Execution Artifact Creator"
   },
   "included_permissions": [
    "remotebuildexecution.actions.create",
    "remotebuildexecution.actions.get",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.get",
    "remotebuildexecution.logstreams.update"
   ]
  },
  {
   "name": "roles/remotebuildexecution.artifactAdmin",
   "role": {
    "description": "Remote Build Execution Artifact Admin",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.artifactAdmin",
    "stage": "BETA",
    "title": "Remote Build Execution Artifact Admin"
   },
   "included_permissions": [
    "remotebuildexecution.actions.create",
    "remotebuildexecution.actions.delete",
    "remotebuildexecution.actions.get",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.get",
    "remotebuildexecution.logstreams.update"
   ]
  },
  {
   "name": "roles/remotebuildexecution.serviceAgent",
   "role": {
    "description": "Gives Remote Build Execution service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.serviceAgent",
    "stage": "GA",
    "title": "Remote Build Execution Service Agent"
   },
   "included_permissions": [
    "remotebuildexecution.actions.update",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.botsessions.create",
    "remotebuildexecution.botsessions.update",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.update"
   ]
  },
  {
   "name": "roles/servicemanagement.reporter",
   "role": {
    "description": "Can report usage of a service during runtime.",
    "etag": "AA==",
    "name": "roles/servicemanagement.reporter",
    "stage": "GA",
    "title": "Service Reporter"
   },
   "included_permissions": [
    "servicemanagement.services.report"
   ]
  },
  {
   "name": "roles/resourcemanager.lienModifier",
   "role": {
    "description": "Access to modify Liens on projects.",
    "etag": "AA==",
    "name": "roles/resourcemanager.lienModifier",
    "stage": "GA",
    "title": "Project Lien Modifier"
   },
   "included_permissions": [
    "resourcemanager.projects.updateLiens"
   ]
  },
  {
   "name": "roles/resourcemanager.folderCreator",
   "role": {
    "description": "Create folder and view all of its sub-resources.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderCreator",
    "stage": "GA",
    "title": "Folder Creator"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "resourcemanager.folders.create",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/resourcemanager.folderEditor",
   "role": {
    "description": "Edit, delete, and undelete a folder and all of its child resources.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderEditor",
    "stage": "GA",
    "title": "Folder Editor"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "resourcemanager.folders.delete",
    "resourcemanager.folders.get",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list",
    "resourcemanager.folders.undelete",
    "resourcemanager.folders.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/securitycenter.findingSecurityMarksWriter",
   "role": {
    "description": "Write access to finding security marks",
    "etag": "AA==",
    "name": "roles/securitycenter.findingSecurityMarksWriter",
    "stage": "GA",
    "title": "Security Center Finding Security Marks Writer"
   },
   "included_permissions": [
    "securitycenter.findingsecuritymarks.update"
   ]
  },
  {
   "name": "roles/securitycenter.assetSecurityMarksWriter",
   "role": {
    "description": "Write access to asset security marks",
    "etag": "AA==",
    "name": "roles/securitycenter.assetSecurityMarksWriter",
    "stage": "GA",
    "title": "Security Center Asset Security Marks Writer"
   },
   "included_permissions": [
    "securitycenter.assetsecuritymarks.update"
   ]
  },
  {
   "name": "roles/securitycenter.notificationConfigViewer",
   "role": {
    "description": "Read access to notification configurations",
    "etag": "AA==",
    "name": "roles/securitycenter.notificationConfigViewer",
    "stage": "GA",
    "title": "Security Center Notification Configurations Viewer"
   },
   "included_permissions": [
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list"
   ]
  },
  {
   "name": "roles/resourcemanager.projectMover",
   "role": {
    "description": "Access to update and move a project",
    "etag": "AA==",
    "name": "roles/resourcemanager.projectMover",
    "stage": "GA",
    "title": "Project Mover"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.move",
    "resourcemanager.projects.update"
   ]
  },
  {
   "name": "roles/servicenetworking.networksAdmin",
   "role": {
    "description": "Full control of service networking with projects.",
    "etag": "AA==",
    "name": "roles/servicenetworking.networksAdmin",
    "stage": "BETA",
    "title": "Service Networking Admin"
   },
   "included_permissions": [
    "servicenetworking.operations.cancel",
    "servicenetworking.operations.delete",
    "servicenetworking.operations.get",
    "servicenetworking.operations.list",
    "servicenetworking.services.addPeering",
    "servicenetworking.services.addSubnetwork",
    "servicenetworking.services.get"
   ]
  },
  {
   "name": "roles/remotebuildexecution.configurationViewer",
   "role": {
    "description": "Remote Build Execution Configuration Viewer",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.configurationViewer",
    "stage": "BETA",
    "title": "Remote Build Execution Configuration Viewer"
   },
   "included_permissions": [
    "remotebuildexecution.instances.get",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.workerpools.get",
    "remotebuildexecution.workerpools.list"
   ]
  },
  {
   "name": "roles/remotebuildexecution.artifactViewer",
   "role": {
    "description": "Remote Build Execution Artifact Viewer",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.artifactViewer",
    "stage": "BETA",
    "title": "Remote Build Execution Artifact Viewer"
   },
   "included_permissions": [
    "remotebuildexecution.actions.get",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.logstreams.get"
   ]
  },
  {
   "name": "roles/serviceusage.serviceUsageConsumer",
   "role": {
    "description": "Ability to inspect service states and operations, and consume quota and billing for a consumer project.",
    "etag": "AA==",
    "name": "roles/serviceusage.serviceUsageConsumer",
    "stage": "BETA",
    "title": "Service Usage Consumer"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/securitycenter.sourcesAdmin",
   "role": {
    "description": "Admin access to sources",
    "etag": "AA==",
    "name": "roles/securitycenter.sourcesAdmin",
    "stage": "GA",
    "title": "Security Center Sources Admin"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.sources.get",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.sources.setIamPolicy",
    "securitycenter.sources.update"
   ]
  },
  {
   "name": "roles/serviceusage.serviceUsageViewer",
   "role": {
    "description": "Ability to inspect service states and operations for a consumer project.",
    "etag": "AA==",
    "name": "roles/serviceusage.serviceUsageViewer",
    "stage": "BETA",
    "title": "Service Usage Viewer"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/securitycenter.settingsViewer",
   "role": {
    "description": "Read access to security center settings",
    "etag": "AA==",
    "name": "roles/securitycenter.settingsViewer",
    "stage": "GA",
    "title": "Security Center Settings Viewer"
   },
   "included_permissions": [
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get"
   ]
  },
  {
   "name": "roles/remotebuildexecution.reservationAdmin",
   "role": {
    "description": "Remote Build Execution Reservation Admin",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.reservationAdmin",
    "stage": "BETA",
    "title": "Remote Build Execution Reservation Admin"
   },
   "included_permissions": [
    "remotebuildexecution.actions.create",
    "remotebuildexecution.actions.delete",
    "remotebuildexecution.actions.get"
   ]
  },
  {
   "name": "roles/workflows.viewer",
   "role": {
    "description": "Read-only access to workflows and related resources.",
    "etag": "AA==",
    "name": "roles/workflows.viewer",
    "stage": "BETA",
    "title": "Workflows Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list"
   ]
  },
  {
   "name": "roles/servicemanagement.quotaAdmin",
   "role": {
    "description": "Access to administer service quotas.",
    "etag": "AA==",
    "name": "roles/servicemanagement.quotaAdmin",
    "stage": "BETA",
    "title": "Quota Administrator"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicemanagement.consumerSettings.get",
    "servicemanagement.consumerSettings.getIamPolicy",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.consumerSettings.setIamPolicy",
    "servicemanagement.consumerSettings.update",
    "serviceusage.quotas.get",
    "serviceusage.quotas.update",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/servicemanagement.quotaViewer",
   "role": {
    "description": "Access to view service quotas.",
    "etag": "AA==",
    "name": "roles/servicemanagement.quotaViewer",
    "stage": "BETA",
    "title": "Quota Viewer"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "servicemanagement.consumerSettings.get",
    "servicemanagement.consumerSettings.getIamPolicy",
    "servicemanagement.consumerSettings.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/resourcemanager.folderIamAdmin",
   "role": {
    "description": "Access and administer a folder IAM policies.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderIamAdmin",
    "stage": "GA",
    "title": "Folder IAM Admin"
   },
   "included_permissions": [
    "resourcemanager.folders.get",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.setIamPolicy"
   ]
  },
  {
   "name": "roles/securitycenter.assetsDiscoveryRunner",
   "role": {
    "description": "Run asset discovery access to assets",
    "etag": "AA==",
    "name": "roles/securitycenter.assetsDiscoveryRunner",
    "stage": "GA",
    "title": "Security Center Assets Discovery Runner"
   },
   "included_permissions": [
    "securitycenter.assets.runDiscovery"
   ]
  },
  {
   "name": "roles/securitycenter.assetsViewer",
   "role": {
    "description": "Read access to assets",
    "etag": "AA==",
    "name": "roles/securitycenter.assetsViewer",
    "stage": "GA",
    "title": "Security Center Assets Viewer"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames"
   ]
  },
  {
   "name": "roles/resourcemanager.folderMover",
   "role": {
    "description": "Move a folder and all of its child resources.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderMover",
    "stage": "GA",
    "title": "Folder Mover"
   },
   "included_permissions": [
    "resourcemanager.folders.move",
    "resourcemanager.projects.move"
   ]
  },
  {
   "name": "roles/remotebuildexecution.worker",
   "role": {
    "description": "Remote Build Execution Worker",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.worker",
    "stage": "BETA",
    "title": "Remote Build Execution Worker"
   },
   "included_permissions": [
    "remotebuildexecution.actions.update",
    "remotebuildexecution.blobs.create",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.botsessions.create",
    "remotebuildexecution.botsessions.update",
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.update"
   ]
  },
  {
   "name": "roles/securedlandingzone.serviceAgent",
   "role": {
    "description": "Grants Secured Landing Zone service account permissions to manage resources in the customer project",
    "etag": "AA==",
    "name": "roles/securedlandingzone.serviceAgent",
    "stage": "GA",
    "title": "Secured Landing Zone Service Agent"
   },
   "included_permissions": [
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportResource",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.update",
    "logging.logEntries.list",
    "pubsub.subscriptions.consume",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.detachSubscription",
    "pubsub.topics.getIamPolicy",
    "pubsub.topics.setIamPolicy",
    "resourcemanager.projects.get",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.findings.list",
    "securitycenter.findings.update",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/servicemanagement.configEditor",
   "role": {
    "description": "Access to update the service config and create rollouts.",
    "etag": "AA==",
    "name": "roles/servicemanagement.configEditor",
    "stage": "GA",
    "title": "Service Config Editor"
   },
   "included_permissions": [
    "servicemanagement.services.get",
    "servicemanagement.services.update"
   ]
  },
  {
   "name": "roles/source.reader",
   "role": {
    "description": "Read access to repositories",
    "etag": "AA==",
    "name": "roles/source.reader",
    "stage": "GA",
    "title": "Source Repository Reader"
   },
   "included_permissions": [
    "source.repos.get",
    "source.repos.list"
   ]
  },
  {
   "name": "roles/securitycenter.adminEditor",
   "role": {
    "description": "Admin Read-write access to security center",
    "etag": "AA==",
    "name": "roles/securitycenter.adminEditor",
    "stage": "GA",
    "title": "Security Center Admin Editor"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "compute.addresses.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/stackdriver.accounts.editor",
   "role": {
    "description": "Read/write access to manage Stackdriver account structure.",
    "etag": "AA==",
    "name": "roles/stackdriver.accounts.editor",
    "stage": "GA",
    "title": "Stackdriver Accounts Editor"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceusage.services.enable",
    "stackdriver.projects.edit",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/sourcerepo.serviceAgent",
   "role": {
    "description": "Allow Cloud Source Repositories to integrate with other Cloud services.",
    "etag": "AA==",
    "name": "roles/sourcerepo.serviceAgent",
    "stage": "GA",
    "title": "Cloud Source Repositories Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.getAccessToken",
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/stackdriver.accounts.viewer",
   "role": {
    "description": "Read-only access to get and list information about Stackdriver account structure.",
    "etag": "AA==",
    "name": "roles/stackdriver.accounts.viewer",
    "stage": "GA",
    "title": "Stackdriver Accounts Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/securitycenter.automationServiceAgent",
   "role": {
    "description": "Security Center automation service agent can configure GCP resources to enable security scanning.",
    "etag": "AA==",
    "name": "roles/securitycenter.automationServiceAgent",
    "stage": "GA",
    "title": "Security Center Automation Service Agent"
   },
   "included_permissions": [
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "serviceusage.services.enable"
   ]
  },
  {
   "name": "roles/spanner.databaseAdmin",
   "role": {
    "description": "Full control of Cloud Spanner databases.",
    "etag": "AA==",
    "name": "roles/spanner.databaseAdmin",
    "stage": "GA",
    "title": "Cloud Spanner Database Admin"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.create",
    "spanner.databases.drop",
    "spanner.databases.get",
    "spanner.databases.getDdl",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.setIamPolicy",
    "spanner.databases.update",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instances.get",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list"
   ]
  },
  {
   "name": "roles/securitycenter.admin",
   "role": {
    "description": "Admin(super user) access to security center",
    "etag": "AA==",
    "name": "roles/securitycenter.admin",
    "stage": "GA",
    "title": "Security Center Admin"
   },
   "included_permissions": [
    "appengine.applications.get",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "compute.addresses.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.containerthreatdetectionsettings.update",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.update",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.organizationsettings.update",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securitycentersettings.update",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.securityhealthanalyticssettings.update",
    "securitycenter.sources.get",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.sources.setIamPolicy",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "securitycenter.websecurityscannersettings.update",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/storage.hmacKeyAdmin",
   "role": {
    "description": "Full control of GCS HMAC Keys.",
    "etag": "AA==",
    "name": "roles/storage.hmacKeyAdmin",
    "stage": "GA",
    "title": "Storage HMAC Key Admin"
   },
   "included_permissions": [
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.hmacKeys.create",
    "storage.hmacKeys.delete",
    "storage.hmacKeys.get",
    "storage.hmacKeys.list",
    "storage.hmacKeys.update"
   ]
  },
  {
   "name": "roles/viewer",
   "role": {
    "description": "Read access to all resources.",
    "etag": "AA==",
    "name": "roles/viewer",
    "stage": "GA",
    "title": "Viewer"
   },
   "included_permissions": [
    "accessapproval.requests.get",
    "accessapproval.requests.list",
    "accessapproval.settings.get",
    "accesscontextmanager.accessLevels.get",
    "accesscontextmanager.accessLevels.list",
    "accesscontextmanager.accessPolicies.get",
    "accesscontextmanager.accessPolicies.getIamPolicy",
    "accesscontextmanager.accessPolicies.list",
    "accesscontextmanager.accessZones.get",
    "accesscontextmanager.accessZones.list",
    "accesscontextmanager.gcpUserAccessBindings.get",
    "accesscontextmanager.gcpUserAccessBindings.list",
    "accesscontextmanager.policies.get",
    "accesscontextmanager.policies.getIamPolicy",
    "accesscontextmanager.policies.list",
    "accesscontextmanager.servicePerimeters.get",
    "accesscontextmanager.servicePerimeters.list",
    "actions.agent.get",
    "actions.agentVersions.get",
    "actions.agentVersions.list",
    "aiplatform.annotationSpecs.get",
    "aiplatform.annotationSpecs.list",
    "aiplatform.annotations.get",
    "aiplatform.annotations.list",
    "aiplatform.batchPredictionJobs.get",
    "aiplatform.batchPredictionJobs.list",
    "aiplatform.customJobs.get",
    "aiplatform.customJobs.list",
    "aiplatform.dataItems.get",
    "aiplatform.dataItems.list",
    "aiplatform.dataLabelingJobs.get",
    "aiplatform.dataLabelingJobs.list",
    "aiplatform.datasets.get",
    "aiplatform.datasets.list",
    "aiplatform.endpoints.explain",
    "aiplatform.endpoints.get",
    "aiplatform.endpoints.list",
    "aiplatform.endpoints.predict",
    "aiplatform.hyperparameterTuningJobs.get",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.locations.get",
    "aiplatform.locations.list",
    "aiplatform.migratableResources.search",
    "aiplatform.modelEvaluationSlices.get",
    "aiplatform.modelEvaluationSlices.list",
    "aiplatform.modelEvaluations.get",
    "aiplatform.modelEvaluations.list",
    "aiplatform.models.get",
    "aiplatform.models.list",
    "aiplatform.operations.list",
    "aiplatform.specialistPools.get",
    "aiplatform.specialistPools.list",
    "aiplatform.studies.get",
    "aiplatform.studies.list",
    "aiplatform.trainingPipelines.get",
    "aiplatform.trainingPipelines.list",
    "aiplatform.trials.get",
    "aiplatform.trials.list",
    "apigateway.apiconfigs.get",
    "apigateway.apiconfigs.getIamPolicy",
    "apigateway.apiconfigs.list",
    "apigateway.apis.get",
    "apigateway.apis.getIamPolicy",
    "apigateway.apis.list",
    "apigateway.gateways.get",
    "apigateway.gateways.getIamPolicy",
    "apigateway.gateways.list",
    "apigateway.locations.get",
    "apigateway.locations.list",
    "apigateway.operations.get",
    "apigateway.operations.list",
    "apigee.apiproductattributes.get",
    "apigee.apiproductattributes.list",
    "apigee.apiproducts.get",
    "apigee.apiproducts.list",
    "apigee.appkeys.get",
    "apigee.apps.get",
    "apigee.apps.list",
    "apigee.caches.list",
    "apigee.canaryevaluations.get",
    "apigee.datacollectors.get",
    "apigee.datacollectors.list",
    "apigee.datastores.get",
    "apigee.datastores.list",
    "apigee.deployments.get",
    "apigee.deployments.list",
    "apigee.developerappattributes.get",
    "apigee.developerappattributes.list",
    "apigee.developerapps.get",
    "apigee.developerapps.list",
    "apigee.developerattributes.get",
    "apigee.developerattributes.list",
    "apigee.developers.get",
    "apigee.developers.list",
    "apigee.envgroupattachments.get",
    "apigee.envgroupattachments.list",
    "apigee.envgroups.get",
    "apigee.envgroups.list",
    "apigee.environments.get",
    "apigee.environments.getDataLocation",
    "apigee.environments.getIamPolicy",
    "apigee.environments.list",
    "apigee.exports.get",
    "apigee.exports.list",
    "apigee.flowhooks.getSharedFlow",
    "apigee.flowhooks.list",
    "apigee.hostqueries.get",
    "apigee.hostqueries.list",
    "apigee.hoststats.get",
    "apigee.ingressconfigs.get",
    "apigee.instanceattachments.get",
    "apigee.instanceattachments.list",
    "apigee.instances.get",
    "apigee.instances.list",
    "apigee.keystorealiases.generateCSR",
    "apigee.keystorealiases.get",
    "apigee.keystorealiases.list",
    "apigee.keystores.export",
    "apigee.keystores.get",
    "apigee.keystores.list",
    "apigee.keyvaluemaps.list",
    "apigee.maskconfigs.get",
    "apigee.operations.get",
    "apigee.operations.list",
    "apigee.organizations.get",
    "apigee.organizations.list",
    "apigee.portals.get",
    "apigee.portals.list",
    "apigee.proxies.get",
    "apigee.proxies.list",
    "apigee.proxyrevisions.get",
    "apigee.proxyrevisions.list",
    "apigee.queries.get",
    "apigee.queries.list",
    "apigee.references.get",
    "apigee.references.list",
    "apigee.reports.get",
    "apigee.reports.list",
    "apigee.resourcefiles.get",
    "apigee.resourcefiles.list",
    "apigee.sharedflowrevisions.get",
    "apigee.sharedflowrevisions.list",
    "apigee.sharedflows.get",
    "apigee.sharedflows.list",
    "apigee.targetservers.get",
    "apigee.targetservers.list",
    "apigee.tracesessions.get",
    "apigee.tracesessions.list",
    "apigeeconnect.connections.list",
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.memcache.get",
    "appengine.memcache.getKey",
    "appengine.memcache.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.runtimes.actAsAdmin",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.get",
    "appengine.versions.list",
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.getIamPolicy",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "assuredworkloads.operations.get",
    "assuredworkloads.operations.list",
    "assuredworkloads.workload.get",
    "assuredworkloads.workload.list",
    "automl.annotationSpecs.get",
    "automl.annotationSpecs.list",
    "automl.annotations.list",
    "automl.columnSpecs.get",
    "automl.columnSpecs.list",
    "automl.datasets.export",
    "automl.datasets.get",
    "automl.datasets.getIamPolicy",
    "automl.datasets.list",
    "automl.examples.get",
    "automl.examples.list",
    "automl.humanAnnotationTasks.get",
    "automl.humanAnnotationTasks.list",
    "automl.locations.get",
    "automl.locations.getIamPolicy",
    "automl.locations.list",
    "automl.modelEvaluations.get",
    "automl.modelEvaluations.list",
    "automl.models.export",
    "automl.models.get",
    "automl.models.getIamPolicy",
    "automl.models.list",
    "automl.models.predict",
    "automl.operations.get",
    "automl.operations.list",
    "automl.tableSpecs.get",
    "automl.tableSpecs.list",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "autoscaling.sites.getIamPolicy",
    "autoscaling.sites.readRecommendations",
    "bigquery.bireservations.get",
    "bigquery.capacityCommitments.get",
    "bigquery.capacityCommitments.list",
    "bigquery.config.get",
    "bigquery.connections.get",
    "bigquery.connections.getIamPolicy",
    "bigquery.connections.list",
    "bigquery.connections.use",
    "bigquery.datasets.get",
    "bigquery.datasets.getIamPolicy",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.models.export",
    "bigquery.models.getData",
    "bigquery.models.getMetadata",
    "bigquery.models.list",
    "bigquery.readsessions.create",
    "bigquery.readsessions.getData",
    "bigquery.readsessions.update",
    "bigquery.reservationAssignments.list",
    "bigquery.reservationAssignments.search",
    "bigquery.reservations.get",
    "bigquery.reservations.list",
    "bigquery.routines.get",
    "bigquery.routines.list",
    "bigquery.savedqueries.get",
    "bigquery.savedqueries.list",
    "bigquery.tables.getIamPolicy",
    "bigquery.transfers.get",
    "bigtable.appProfiles.get",
    "bigtable.appProfiles.list",
    "bigtable.backups.get",
    "bigtable.backups.getIamPolicy",
    "bigtable.backups.list",
    "bigtable.clusters.get",
    "bigtable.clusters.list",
    "bigtable.instances.get",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "bigtable.keyvisualizer.get",
    "bigtable.keyvisualizer.list",
    "bigtable.locations.list",
    "bigtable.tables.checkConsistency",
    "bigtable.tables.generateConsistencyToken",
    "bigtable.tables.get",
    "bigtable.tables.getIamPolicy",
    "bigtable.tables.list",
    "bigtable.tables.readRows",
    "bigtable.tables.sampleRowKeys",
    "billing.resourceCosts.get",
    "binaryauthorization.attestors.get",
    "binaryauthorization.attestors.getIamPolicy",
    "binaryauthorization.attestors.list",
    "binaryauthorization.attestors.verifyImageAttested",
    "binaryauthorization.continuousValidationConfig.get",
    "binaryauthorization.continuousValidationConfig.getIamPolicy",
    "binaryauthorization.policy.get",
    "binaryauthorization.policy.getIamPolicy",
    "chat.bots.get",
    "clientauthconfig.brands.get",
    "clientauthconfig.brands.list",
    "clientauthconfig.clients.get",
    "clientauthconfig.clients.list",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudbuild.builds.get",
    "cloudbuild.builds.list",
    "cloudconfig.configs.get",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.list",
    "cloudfunctions.functions.sourceCodeGet",
    "cloudfunctions.locations.list",
    "cloudfunctions.operations.get",
    "cloudfunctions.operations.list",
    "cloudiot.devices.get",
    "cloudiot.devices.list",
    "cloudiot.registries.get",
    "cloudiot.registries.getIamPolicy",
    "cloudiot.registries.list",
    "cloudiottoken.tokensettings.get",
    "cloudjobdiscovery.companies.get",
    "cloudjobdiscovery.companies.list",
    "cloudjobdiscovery.jobs.get",
    "cloudjobdiscovery.jobs.search",
    "cloudjobdiscovery.profiles.get",
    "cloudjobdiscovery.profiles.search",
    "cloudjobdiscovery.tenants.get",
    "cloudkms.cryptoKeyVersions.get",
    "cloudkms.cryptoKeyVersions.list",
    "cloudkms.cryptoKeys.get",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.importJobs.get",
    "cloudkms.importJobs.getIamPolicy",
    "cloudkms.importJobs.list",
    "cloudkms.keyRings.get",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudnotifications.activities.list",
    "cloudonefs.isiloncloud.com/clusters.get",
    "cloudonefs.isiloncloud.com/clusters.list",
    "cloudonefs.isiloncloud.com/fileshares.get",
    "cloudonefs.isiloncloud.com/fileshares.list",
    "cloudprivatecatalog.targets.get",
    "cloudprivatecatalogproducer.associations.get",
    "cloudprivatecatalogproducer.associations.list",
    "cloudprivatecatalogproducer.catalogAssociations.get",
    "cloudprivatecatalogproducer.catalogAssociations.list",
    "cloudprivatecatalogproducer.catalogs.get",
    "cloudprivatecatalogproducer.catalogs.getIamPolicy",
    "cloudprivatecatalogproducer.catalogs.list",
    "cloudprivatecatalogproducer.producerCatalogs.get",
    "cloudprivatecatalogproducer.producerCatalogs.getIamPolicy",
    "cloudprivatecatalogproducer.producerCatalogs.list",
    "cloudprivatecatalogproducer.products.get",
    "cloudprivatecatalogproducer.products.getIamPolicy",
    "cloudprivatecatalogproducer.products.list",
    "cloudprivatecatalogproducer.settings.get",
    "cloudprofiler.profiles.list",
    "cloudscheduler.jobs.fullView",
    "cloudscheduler.jobs.get",
    "cloudscheduler.jobs.list",
    "cloudscheduler.locations.get",
    "cloudscheduler.locations.list",
    "cloudsql.backupRuns.get",
    "cloudsql.backupRuns.list",
    "cloudsql.databases.get",
    "cloudsql.databases.list",
    "cloudsql.instances.export",
    "cloudsql.instances.get",
    "cloudsql.instances.list",
    "cloudsql.instances.listServerCas",
    "cloudsql.sslCerts.get",
    "cloudsql.sslCerts.list",
    "cloudsql.users.list",
    "cloudsupport.accounts.get",
    "cloudsupport.accounts.getIamPolicy",
    "cloudsupport.accounts.getUserRoles",
    "cloudsupport.accounts.list",
    "cloudsupport.operations.get",
    "cloudsupport.properties.get",
    "cloudsupport.techCases.get",
    "cloudsupport.techCases.list",
    "cloudtasks.locations.get",
    "cloudtasks.locations.list",
    "cloudtasks.queues.get",
    "cloudtasks.queues.list",
    "cloudtasks.tasks.fullView",
    "cloudtasks.tasks.get",
    "cloudtasks.tasks.list",
    "cloudtestservice.environmentcatalog.get",
    "cloudtestservice.matrices.get",
    "cloudtoolresults.executions.get",
    "cloudtoolresults.executions.list",
    "cloudtoolresults.histories.get",
    "cloudtoolresults.histories.list",
    "cloudtoolresults.settings.get",
    "cloudtoolresults.steps.get",
    "cloudtoolresults.steps.list",
    "cloudtrace.insights.get",
    "cloudtrace.insights.list",
    "cloudtrace.stats.get",
    "cloudtrace.tasks.create",
    "cloudtrace.tasks.get",
    "cloudtrace.tasks.list",
    "cloudtrace.traces.get",
    "cloudtrace.traces.list",
    "cloudtranslate.generalModels.batchPredict",
    "cloudtranslate.generalModels.get",
    "cloudtranslate.generalModels.predict",
    "cloudtranslate.glossaries.batchPredict",
    "cloudtranslate.glossaries.get",
    "cloudtranslate.glossaries.list",
    "cloudtranslate.glossaries.predict",
    "cloudtranslate.languageDetectionModels.predict",
    "cloudtranslate.locations.get",
    "cloudtranslate.locations.list",
    "cloudtranslate.operations.get",
    "cloudtranslate.operations.list",
    "cloudtranslate.operations.wait",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.get",
    "cloudvolumesgcp-api.netapp.com/activeDirectories.list",
    "cloudvolumesgcp-api.netapp.com/ipRanges.list",
    "cloudvolumesgcp-api.netapp.com/jobs.get",
    "cloudvolumesgcp-api.netapp.com/jobs.list",
    "cloudvolumesgcp-api.netapp.com/regions.list",
    "cloudvolumesgcp-api.netapp.com/serviceLevels.list",
    "cloudvolumesgcp-api.netapp.com/snapshots.get",
    "cloudvolumesgcp-api.netapp.com/snapshots.list",
    "cloudvolumesgcp-api.netapp.com/volumes.get",
    "cloudvolumesgcp-api.netapp.com/volumes.list",
    "composer.environments.get",
    "composer.environments.list",
    "composer.imageversions.list",
    "composer.operations.get",
    "composer.operations.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.createSnapshot",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.disks.useReadOnly",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.instances.useReadOnly",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineImages.useReadOnly",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionHealthChecks.useReadOnly",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.snapshots.useReadOnly",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "consumerprocurement.accounts.get",
    "consumerprocurement.accounts.list",
    "consumerprocurement.entitlements.get",
    "consumerprocurement.entitlements.list",
    "consumerprocurement.freeTrials.get",
    "consumerprocurement.freeTrials.list",
    "consumerprocurement.orders.get",
    "consumerprocurement.orders.list",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.bindings.get",
    "container.bindings.list",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.deployments.get",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.events.get",
    "container.events.list",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.leases.get",
    "container.leases.list",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.localSubjectAccessReviews.list",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.petSets.get",
    "container.petSets.list",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.pods.get",
    "container.pods.getLogs",
    "container.pods.getStatus",
    "container.pods.list",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.selfSubjectAccessReviews.create",
    "container.selfSubjectAccessReviews.list",
    "container.selfSubjectRulesReviews.create",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.statefulSets.get",
    "container.statefulSets.getScale",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageStates.get",
    "container.storageStates.getStatus",
    "container.storageStates.list",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.getStatus",
    "container.storageVersionMigrations.list",
    "container.subjectAccessReviews.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.tokenReviews.create",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.getStatus",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.getStatus",
    "container.volumeSnapshots.list",
    "containeranalysis.notes.get",
    "containeranalysis.notes.getIamPolicy",
    "containeranalysis.notes.list",
    "containeranalysis.occurrences.get",
    "containeranalysis.occurrences.getIamPolicy",
    "containeranalysis.occurrences.list",
    "datacatalog.categories.getIamPolicy",
    "datacatalog.entries.get",
    "datacatalog.entries.getIamPolicy",
    "datacatalog.entries.list",
    "datacatalog.entryGroups.get",
    "datacatalog.entryGroups.getIamPolicy",
    "datacatalog.entryGroups.list",
    "datacatalog.tagTemplates.get",
    "datacatalog.tagTemplates.getIamPolicy",
    "datacatalog.tagTemplates.getTag",
    "datacatalog.taxonomies.get",
    "datacatalog.taxonomies.getIamPolicy",
    "datacatalog.taxonomies.list",
    "dataflow.jobs.get",
    "dataflow.jobs.list",
    "dataflow.messages.list",
    "dataflow.metrics.get",
    "dataflow.snapshots.get",
    "dataflow.snapshots.list",
    "datafusion.instances.get",
    "datafusion.instances.getIamPolicy",
    "datafusion.instances.list",
    "datafusion.instances.runtime",
    "datafusion.locations.get",
    "datafusion.locations.list",
    "datafusion.operations.get",
    "datafusion.operations.list",
    "datalabeling.annotateddatasets.get",
    "datalabeling.annotateddatasets.label",
    "datalabeling.annotateddatasets.list",
    "datalabeling.annotationspecsets.get",
    "datalabeling.annotationspecsets.list",
    "datalabeling.dataitems.get",
    "datalabeling.dataitems.list",
    "datalabeling.datasets.export",
    "datalabeling.datasets.get",
    "datalabeling.datasets.list",
    "datalabeling.examples.get",
    "datalabeling.examples.list",
    "datalabeling.instructions.get",
    "datalabeling.instructions.list",
    "datalabeling.operations.get",
    "datalabeling.operations.list",
    "datamigration.connectionprofiles.get",
    "datamigration.connectionprofiles.getIamPolicy",
    "datamigration.connectionprofiles.list",
    "datamigration.locations.get",
    "datamigration.locations.list",
    "datamigration.migrationjobs.get",
    "datamigration.migrationjobs.getIamPolicy",
    "datamigration.migrationjobs.list",
    "datamigration.migrationjobs.verify",
    "datamigration.operations.get",
    "datamigration.operations.list",
    "dataproc.agents.get",
    "dataproc.agents.list",
    "dataproc.autoscalingPolicies.get",
    "dataproc.autoscalingPolicies.getIamPolicy",
    "dataproc.autoscalingPolicies.list",
    "dataproc.autoscalingPolicies.use",
    "dataproc.clusters.get",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "dataproc.jobs.get",
    "dataproc.jobs.getIamPolicy",
    "dataproc.jobs.list",
    "dataproc.operations.get",
    "dataproc.operations.getIamPolicy",
    "dataproc.operations.list",
    "dataproc.tasks.listInvalidatedLeases",
    "dataproc.workflowTemplates.get",
    "dataproc.workflowTemplates.getIamPolicy",
    "dataproc.workflowTemplates.list",
    "dataprocessing.datasources.get",
    "dataprocessing.datasources.list",
    "dataprocessing.featurecontrols.list",
    "dataprocessing.groupcontrols.get",
    "dataprocessing.groupcontrols.list",
    "datastore.databases.get",
    "datastore.databases.getIamPolicy",
    "datastore.databases.list",
    "datastore.entities.get",
    "datastore.entities.list",
    "datastore.indexes.get",
    "datastore.indexes.list",
    "datastore.namespaces.get",
    "datastore.namespaces.getIamPolicy",
    "datastore.namespaces.list",
    "datastore.statistics.get",
    "datastore.statistics.list",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.compositeTypes.list",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.resources.get",
    "deploymentmanager.resources.list",
    "deploymentmanager.typeProviders.get",
    "deploymentmanager.typeProviders.getType",
    "deploymentmanager.typeProviders.list",
    "deploymentmanager.typeProviders.listTypes",
    "deploymentmanager.types.get",
    "deploymentmanager.types.list",
    "dialogflow.agents.export",
    "dialogflow.agents.get",
    "dialogflow.agents.list",
    "dialogflow.agents.search",
    "dialogflow.answerrecords.get",
    "dialogflow.answerrecords.list",
    "dialogflow.callMatchers.list",
    "dialogflow.contexts.get",
    "dialogflow.contexts.list",
    "dialogflow.conversationDatasets.get",
    "dialogflow.conversationDatasets.list",
    "dialogflow.conversationModels.get",
    "dialogflow.conversationModels.list",
    "dialogflow.conversationProfiles.get",
    "dialogflow.conversationProfiles.list",
    "dialogflow.conversations.get",
    "dialogflow.conversations.list",
    "dialogflow.documents.get",
    "dialogflow.documents.list",
    "dialogflow.entityTypes.get",
    "dialogflow.entityTypes.list",
    "dialogflow.environments.get",
    "dialogflow.environments.getHistory",
    "dialogflow.environments.list",
    "dialogflow.environments.lookupHistory",
    "dialogflow.flows.get",
    "dialogflow.flows.list",
    "dialogflow.fulfillments.get",
    "dialogflow.intents.get",
    "dialogflow.intents.list",
    "dialogflow.knowledgeBases.get",
    "dialogflow.knowledgeBases.list",
    "dialogflow.messages.list",
    "dialogflow.modelEvaluations.get",
    "dialogflow.modelEvaluations.list",
    "dialogflow.operations.get",
    "dialogflow.pages.get",
    "dialogflow.pages.list",
    "dialogflow.participants.get",
    "dialogflow.participants.list",
    "dialogflow.participants.suggest",
    "dialogflow.phoneNumberOrders.get",
    "dialogflow.phoneNumberOrders.list",
    "dialogflow.phoneNumbers.list",
    "dialogflow.sessionEntityTypes.get",
    "dialogflow.sessionEntityTypes.list",
    "dialogflow.sessions.detectIntent",
    "dialogflow.sessions.streamingDetectIntent",
    "dialogflow.smartMessagingEntries.get",
    "dialogflow.smartMessagingEntries.list",
    "dialogflow.transitionRouteGroups.get",
    "dialogflow.transitionRouteGroups.list",
    "dialogflow.versions.get",
    "dialogflow.versions.list",
    "dialogflow.webhooks.get",
    "dialogflow.webhooks.list",
    "dlp.analyzeRiskTemplates.get",
    "dlp.analyzeRiskTemplates.list",
    "dlp.deidentifyTemplates.get",
    "dlp.deidentifyTemplates.list",
    "dlp.inspectFindings.list",
    "dlp.inspectTemplates.get",
    "dlp.inspectTemplates.list",
    "dlp.jobTriggers.get",
    "dlp.jobTriggers.list",
    "dlp.jobs.get",
    "dlp.jobs.list",
    "dlp.storedInfoTypes.get",
    "dlp.storedInfoTypes.list",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.policies.get",
    "dns.policies.list",
    "dns.projects.get",
    "dns.resourceRecordSets.list",
    "documentai.evaluations.get",
    "documentai.evaluations.list",
    "documentai.humanReviewConfigs.get",
    "documentai.humanReviewConfigs.review",
    "documentai.labelerPools.get",
    "documentai.labelerPools.list",
    "documentai.locations.get",
    "documentai.locations.list",
    "documentai.operations.getLegacy",
    "documentai.processorTypes.list",
    "documentai.processorVersions.get",
    "documentai.processorVersions.list",
    "documentai.processorVersions.processBatch",
    "documentai.processorVersions.processOnline",
    "documentai.processors.fetchHumanReviewDetails",
    "documentai.processors.get",
    "documentai.processors.list",
    "documentai.processors.processBatch",
    "documentai.processors.processOnline",
    "domains.locations.get",
    "domains.locations.list",
    "domains.operations.get",
    "domains.operations.list",
    "domains.registrations.get",
    "domains.registrations.getIamPolicy",
    "domains.registrations.list",
    "earlyaccesscenter.campaigns.get",
    "earlyaccesscenter.campaigns.list",
    "earlyaccesscenter.customerAllowlists.get",
    "earlyaccesscenter.customerAllowlists.list",
    "earthengine.assets.get",
    "earthengine.assets.getIamPolicy",
    "earthengine.assets.list",
    "earthengine.filmstripthumbnails.get",
    "earthengine.maps.get",
    "earthengine.operations.get",
    "earthengine.operations.list",
    "earthengine.tables.get",
    "earthengine.thumbnails.get",
    "earthengine.videothumbnails.get",
    "endpoints.portals.listCustomDomains",
    "errorreporting.applications.list",
    "errorreporting.errorEvents.list",
    "errorreporting.groupMetadata.get",
    "errorreporting.groups.list",
    "essentialcontacts.contacts.get",
    "essentialcontacts.contacts.list",
    "eventarc.locations.get",
    "eventarc.locations.list",
    "eventarc.operations.get",
    "eventarc.operations.list",
    "eventarc.triggers.get",
    "eventarc.triggers.getIamPolicy",
    "eventarc.triggers.list",
    "file.backups.get",
    "file.backups.list",
    "file.instances.get",
    "file.instances.list",
    "file.locations.get",
    "file.locations.list",
    "file.operations.get",
    "file.operations.list",
    "file.snapshots.get",
    "file.snapshots.list",
    "firebase.billingPlans.get",
    "firebase.clients.get",
    "firebase.clients.list",
    "firebase.links.list",
    "firebase.projects.get",
    "firebaseabt.experimentresults.get",
    "firebaseabt.experiments.get",
    "firebaseabt.experiments.list",
    "firebaseabt.projectmetadata.get",
    "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
    "firebaseappdistro.groups.list",
    "firebaseappdistro.releases.list",
    "firebaseappdistro.testers.list",
    "firebaseauth.configs.get",
    "firebaseauth.users.get",
    "firebasecrash.reports.get",
    "firebasecrashlytics.config.get",
    "firebasecrashlytics.data.get",
    "firebasecrashlytics.issues.get",
    "firebasecrashlytics.issues.list",
    "firebasecrashlytics.sessions.get",
    "firebasedatabase.instances.get",
    "firebasedatabase.instances.list",
    "firebasedynamiclinks.destinations.list",
    "firebasedynamiclinks.domains.get",
    "firebasedynamiclinks.domains.list",
    "firebasedynamiclinks.links.get",
    "firebasedynamiclinks.links.list",
    "firebasedynamiclinks.stats.get",
    "firebaseextensions.configs.list",
    "firebasehosting.sites.get",
    "firebasehosting.sites.list",
    "firebaseinappmessaging.campaigns.get",
    "firebaseinappmessaging.campaigns.list",
    "firebaseml.compressionjobs.get",
    "firebaseml.compressionjobs.list",
    "firebaseml.models.get",
    "firebaseml.models.list",
    "firebaseml.modelversions.get",
    "firebaseml.modelversions.list",
    "firebasenotifications.messages.get",
    "firebasenotifications.messages.list",
    "firebaseperformance.data.get",
    "firebasepredictions.predictions.list",
    "firebaserules.releases.get",
    "firebaserules.releases.getExecutable",
    "firebaserules.releases.list",
    "firebaserules.rulesets.list",
    "firebasestorage.buckets.get",
    "firebasestorage.buckets.list",
    "gameservices.gameServerClusters.get",
    "gameservices.gameServerClusters.list",
    "gameservices.gameServerConfigs.get",
    "gameservices.gameServerConfigs.list",
    "gameservices.gameServerDeployments.get",
    "gameservices.gameServerDeployments.list",
    "gameservices.locations.get",
    "gameservices.locations.list",
    "gameservices.operations.get",
    "gameservices.operations.list",
    "gameservices.realms.get",
    "gameservices.realms.list",
    "gcp.redisenterprise.com/databases.get",
    "gcp.redisenterprise.com/databases.list",
    "gcp.redisenterprise.com/subscriptions.get",
    "gcp.redisenterprise.com/subscriptions.list",
    "genomics.datasets.get",
    "genomics.datasets.list",
    "genomics.operations.get",
    "genomics.operations.list",
    "gkehub.features.get",
    "gkehub.features.getIamPolicy",
    "gkehub.features.list",
    "gkehub.gateway.get",
    "gkehub.gateway.getIamPolicy",
    "gkehub.locations.get",
    "gkehub.locations.list",
    "gkehub.memberships.generateConnectManifest",
    "gkehub.memberships.get",
    "gkehub.memberships.getIamPolicy",
    "gkehub.memberships.list",
    "gkehub.operations.get",
    "gkehub.operations.list",
    "gsuiteaddons.authorizations.get",
    "gsuiteaddons.deployments.get",
    "gsuiteaddons.deployments.list",
    "healthcare.annotationStores.evaluate",
    "healthcare.annotationStores.export",
    "healthcare.annotationStores.get",
    "healthcare.annotationStores.getIamPolicy",
    "healthcare.annotationStores.list",
    "healthcare.annotations.get",
    "healthcare.annotations.list",
    "healthcare.attributeDefinitions.get",
    "healthcare.attributeDefinitions.list",
    "healthcare.consentArtifacts.get",
    "healthcare.consentArtifacts.list",
    "healthcare.consentStores.checkDataAccess",
    "healthcare.consentStores.evaluateUserConsents",
    "healthcare.consentStores.get",
    "healthcare.consentStores.getIamPolicy",
    "healthcare.consentStores.list",
    "healthcare.consentStores.queryAccessibleData",
    "healthcare.consents.get",
    "healthcare.consents.list",
    "healthcare.datasets.get",
    "healthcare.datasets.getIamPolicy",
    "healthcare.datasets.list",
    "healthcare.dicomStores.dicomWebRead",
    "healthcare.dicomStores.export",
    "healthcare.dicomStores.get",
    "healthcare.dicomStores.getIamPolicy",
    "healthcare.dicomStores.list",
    "healthcare.fhirResources.get",
    "healthcare.fhirResources.translateConceptMap",
    "healthcare.fhirStores.executeBundle",
    "healthcare.fhirStores.export",
    "healthcare.fhirStores.get",
    "healthcare.fhirStores.getIamPolicy",
    "healthcare.fhirStores.list",
    "healthcare.fhirStores.searchResources",
    "healthcare.hl7V2Messages.get",
    "healthcare.hl7V2Messages.list",
    "healthcare.hl7V2Stores.get",
    "healthcare.hl7V2Stores.getIamPolicy",
    "healthcare.hl7V2Stores.list",
    "healthcare.locations.get",
    "healthcare.locations.list",
    "healthcare.nlpservice.analyzeEntities",
    "healthcare.operations.get",
    "healthcare.operations.list",
    "healthcare.userDataMappings.get",
    "healthcare.userDataMappings.list",
    "iam.googleapis.com/workloadIdentityPoolProviders.get",
    "iam.googleapis.com/workloadIdentityPoolProviders.list",
    "iam.googleapis.com/workloadIdentityPools.get",
    "iam.googleapis.com/workloadIdentityPools.list",
    "iam.roles.get",
    "iam.roles.list",
    "iam.serviceAccountKeys.get",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iap.projects.getSettings",
    "iap.web.getSettings",
    "iap.webServiceVersions.getSettings",
    "iap.webServices.getSettings",
    "iap.webTypes.getSettings",
    "identityplatform.workloadPoolProviders.get",
    "identityplatform.workloadPoolProviders.list",
    "identityplatform.workloadPools.get",
    "identityplatform.workloadPools.list",
    "lifesciences.operations.get",
    "lifesciences.operations.list",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.cmekSettings.get",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.download",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.notificationRules.get",
    "logging.notificationRules.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "logging.views.listLogs",
    "logging.views.listResourceKeys",
    "logging.views.listResourceValues",
    "managedidentities.domains.get",
    "managedidentities.domains.getIamPolicy",
    "managedidentities.domains.list",
    "managedidentities.domains.validateTrust",
    "managedidentities.locations.get",
    "managedidentities.locations.list",
    "managedidentities.operations.get",
    "managedidentities.operations.list",
    "memcache.instances.get",
    "memcache.instances.list",
    "memcache.locations.get",
    "memcache.locations.list",
    "memcache.operations.get",
    "memcache.operations.list",
    "metastore.imports.get",
    "metastore.imports.list",
    "metastore.locations.get",
    "metastore.locations.list",
    "metastore.operations.get",
    "metastore.operations.list",
    "metastore.services.export",
    "metastore.services.get",
    "metastore.services.getIamPolicy",
    "metastore.services.list",
    "ml.jobs.get",
    "ml.jobs.getIamPolicy",
    "ml.jobs.list",
    "ml.locations.get",
    "ml.locations.list",
    "ml.models.get",
    "ml.models.getIamPolicy",
    "ml.models.list",
    "ml.models.predict",
    "ml.operations.get",
    "ml.operations.list",
    "ml.projects.getConfig",
    "ml.studies.get",
    "ml.studies.getIamPolicy",
    "ml.studies.list",
    "ml.trials.get",
    "ml.trials.list",
    "ml.versions.get",
    "ml.versions.list",
    "ml.versions.predict",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "networkmanagement.connectivitytests.get",
    "networkmanagement.connectivitytests.getIamPolicy",
    "networkmanagement.connectivitytests.list",
    "networkmanagement.locations.get",
    "networkmanagement.locations.list",
    "networkmanagement.operations.get",
    "networkmanagement.operations.list",
    "networksecurity.authorizationPolicies.get",
    "networksecurity.authorizationPolicies.getIamPolicy",
    "networksecurity.authorizationPolicies.list",
    "networksecurity.clientTlsPolicies.get",
    "networksecurity.clientTlsPolicies.getIamPolicy",
    "networksecurity.clientTlsPolicies.list",
    "networksecurity.locations.get",
    "networksecurity.locations.list",
    "networksecurity.operations.get",
    "networksecurity.operations.list",
    "networksecurity.serverTlsPolicies.get",
    "networksecurity.serverTlsPolicies.getIamPolicy",
    "networksecurity.serverTlsPolicies.list",
    "networkservices.endpointConfigSelectors.get",
    "networkservices.endpointConfigSelectors.getIamPolicy",
    "networkservices.endpointConfigSelectors.list",
    "networkservices.httpFilters.get",
    "networkservices.httpFilters.getIamPolicy",
    "networkservices.httpFilters.list",
    "networkservices.httpfilters.get",
    "networkservices.httpfilters.getIamPolicy",
    "networkservices.httpfilters.list",
    "networkservices.locations.get",
    "networkservices.locations.list",
    "networkservices.operations.get",
    "networkservices.operations.list",
    "notebooks.environments.get",
    "notebooks.environments.getIamPolicy",
    "notebooks.environments.list",
    "notebooks.executions.get",
    "notebooks.executions.getIamPolicy",
    "notebooks.executions.list",
    "notebooks.instances.checkUpgradability",
    "notebooks.instances.get",
    "notebooks.instances.getIamPolicy",
    "notebooks.instances.list",
    "notebooks.locations.get",
    "notebooks.locations.list",
    "notebooks.operations.get",
    "notebooks.operations.list",
    "notebooks.schedules.get",
    "notebooks.schedules.getIamPolicy",
    "notebooks.schedules.list",
    "oauthconfig.clientpolicy.get",
    "oauthconfig.testusers.get",
    "oauthconfig.verification.get",
    "ondemandscanning.operations.get",
    "ondemandscanning.operations.list",
    "ondemandscanning.operations.wait",
    "ondemandscanning.scans.listVulnerabilities",
    "orgpolicy.policy.get",
    "osconfig.guestPolicies.get",
    "osconfig.guestPolicies.list",
    "osconfig.patchDeployments.get",
    "osconfig.patchDeployments.list",
    "osconfig.patchJobs.get",
    "osconfig.patchJobs.list",
    "policysimulator.replayResults.list",
    "policysimulator.replays.get",
    "policysimulator.replays.list",
    "privateca.certificateAuthorities.get",
    "privateca.certificateAuthorities.getIamPolicy",
    "privateca.certificateAuthorities.list",
    "privateca.certificateRevocationLists.get",
    "privateca.certificateRevocationLists.getIamPolicy",
    "privateca.certificateRevocationLists.list",
    "privateca.certificates.get",
    "privateca.certificates.getIamPolicy",
    "privateca.certificates.list",
    "privateca.locations.get",
    "privateca.locations.list",
    "privateca.operations.get",
    "privateca.operations.list",
    "privateca.reusableConfigs.get",
    "privateca.reusableConfigs.getIamPolicy",
    "privateca.reusableConfigs.list",
    "proximitybeacon.attachments.get",
    "proximitybeacon.attachments.list",
    "proximitybeacon.beacons.get",
    "proximitybeacon.beacons.list",
    "proximitybeacon.namespaces.get",
    "proximitybeacon.namespaces.list",
    "pubsub.schemas.attach",
    "pubsub.schemas.get",
    "pubsub.schemas.getIamPolicy",
    "pubsub.schemas.list",
    "pubsub.snapshots.get",
    "pubsub.snapshots.list",
    "pubsub.snapshots.seek",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsublite.subscriptions.get",
    "pubsublite.subscriptions.getCursor",
    "pubsublite.subscriptions.list",
    "pubsublite.subscriptions.subscribe",
    "pubsublite.topics.computeMessageStats",
    "pubsublite.topics.get",
    "pubsublite.topics.getPartitions",
    "pubsublite.topics.list",
    "pubsublite.topics.listSubscriptions",
    "pubsublite.topics.subscribe",
    "recaptchaenterprise.keys.get",
    "recaptchaenterprise.keys.list",
    "recaptchaenterprise.metrics.get",
    "recaptchaenterprise.projectmetadata.get",
    "recommender.commitmentUtilizationInsights.get",
    "recommender.commitmentUtilizationInsights.list",
    "recommender.computeAddressIdleResourceInsights.get",
    "recommender.computeAddressIdleResourceInsights.list",
    "recommender.computeAddressIdleResourceRecommendations.get",
    "recommender.computeAddressIdleResourceRecommendations.list",
    "recommender.computeDiskIdleResourceInsights.get",
    "recommender.computeDiskIdleResourceInsights.list",
    "recommender.computeDiskIdleResourceRecommendations.get",
    "recommender.computeDiskIdleResourceRecommendations.list",
    "recommender.computeFirewallInsights.get",
    "recommender.computeFirewallInsights.list",
    "recommender.computeImageIdleResourceInsights.get",
    "recommender.computeImageIdleResourceInsights.list",
    "recommender.computeImageIdleResourceRecommendations.get",
    "recommender.computeImageIdleResourceRecommendations.list",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
    "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
    "recommender.computeInstanceIdleResourceRecommendations.get",
    "recommender.computeInstanceIdleResourceRecommendations.list",
    "recommender.computeInstanceMachineTypeRecommendations.get",
    "recommender.computeInstanceMachineTypeRecommendations.list",
    "recommender.iamPolicyInsights.get",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamServiceAccountInsights.get",
    "recommender.iamServiceAccountInsights.list",
    "recommender.locations.get",
    "recommender.locations.list",
    "recommender.loggingProductSuggestionContainerInsights.get",
    "recommender.loggingProductSuggestionContainerInsights.list",
    "recommender.loggingProductSuggestionContainerRecommendations.get",
    "recommender.loggingProductSuggestionContainerRecommendations.list",
    "recommender.monitoringProductSuggestionComputeInsights.get",
    "recommender.monitoringProductSuggestionComputeInsights.list",
    "recommender.monitoringProductSuggestionComputeRecommendations.get",
    "recommender.monitoringProductSuggestionComputeRecommendations.list",
    "recommender.usageCommitmentRecommendations.get",
    "recommender.usageCommitmentRecommendations.list",
    "redis.instances.get",
    "redis.instances.list",
    "redis.locations.get",
    "redis.locations.list",
    "redis.operations.get",
    "redis.operations.list",
    "remotebuildexecution.actions.get",
    "remotebuildexecution.blobs.get",
    "remotebuildexecution.instances.get",
    "remotebuildexecution.instances.list",
    "remotebuildexecution.logstreams.get",
    "remotebuildexecution.workerpools.get",
    "remotebuildexecution.workerpools.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.get",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "retail.catalogs.list",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.export",
    "retail.products.get",
    "retail.products.list",
    "run.configurations.get",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.get",
    "run.revisions.list",
    "run.routes.get",
    "run.routes.list",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.list",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.list",
    "secretmanager.locations.get",
    "secretmanager.locations.list",
    "secretmanager.secrets.get",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.versions.get",
    "secretmanager.versions.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.getIamPolicy",
    "securitycenter.sources.list",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "servicebroker.bindingoperations.get",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.get",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.catalogs.get",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.instanceoperations.get",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.get",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "serviceconsumermanagement.consumers.get",
    "serviceconsumermanagement.quota.get",
    "serviceconsumermanagement.tenancyu.list",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve",
    "servicemanagement.consumerSettings.get",
    "servicemanagement.consumerSettings.list",
    "servicemanagement.services.get",
    "servicemanagement.services.list",
    "servicenetworking.operations.get",
    "servicenetworking.operations.list",
    "servicenetworking.services.get",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "source.repos.get",
    "source.repos.getIamPolicy",
    "source.repos.list",
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.get",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.get",
    "spanner.databases.getDdl",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.get",
    "spanner.instanceOperations.list",
    "spanner.instances.get",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list",
    "stackdriver.projects.get",
    "storage.buckets.list",
    "storage.hmacKeys.get",
    "storage.hmacKeys.list",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.projects.getServiceAccount",
    "subscribewithgoogledeveloper.tools.get",
    "tpu.acceleratortypes.get",
    "tpu.acceleratortypes.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.operations.get",
    "tpu.operations.list",
    "tpu.tensorflowversions.get",
    "tpu.tensorflowversions.list",
    "trafficdirector.networks.getConfigs",
    "transcoder.jobTemplates.get",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.get",
    "transcoder.jobs.list",
    "vmmigration.deployments.get",
    "vmmigration.deployments.list",
    "vmwareengine.services.view",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.connectors.use",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list"
   ]
  },
  {
   "name": "roles/spanner.restoreAdmin",
   "role": {
    "description": "Administrator role to restore Cloud Spanner databases from Cloud Spanner backups.",
    "etag": "AA==",
    "name": "roles/spanner.restoreAdmin",
    "stage": "GA",
    "title": "Cloud Spanner Restore Admin"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "spanner.backups.get",
    "spanner.backups.list",
    "spanner.backups.restoreDatabase",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.create",
    "spanner.databases.get",
    "spanner.databases.list",
    "spanner.instances.get",
    "spanner.instances.list"
   ]
  },
  {
   "name": "roles/storage.legacyObjectReader",
   "role": {
    "description": "Read access to objects without listing.",
    "etag": "AA==",
    "name": "roles/storage.legacyObjectReader",
    "stage": "GA",
    "title": "Storage Legacy Object Reader"
   },
   "included_permissions": [
    "storage.objects.get"
   ]
  },
  {
   "name": "roles/vpcaccess.serviceAgent",
   "role": {
    "description": "Can create and manage resources to support serverless application to connect to virtual private cloud.",
    "etag": "AA==",
    "name": "roles/vpcaccess.serviceAgent",
    "stage": "GA",
    "title": "Serverless VPC Access Service Agent"
   },
   "included_permissions": [
    "billing.accounts.get",
    "compute.autoscalers.create",
    "compute.autoscalers.delete",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.autoscalers.update",
    "compute.disks.create",
    "compute.firewalls.create",
    "compute.firewalls.delete",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.firewalls.update",
    "compute.healthChecks.create",
    "compute.healthChecks.delete",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.healthChecks.update",
    "compute.healthChecks.use",
    "compute.healthChecks.useReadOnly",
    "compute.httpHealthChecks.create",
    "compute.httpHealthChecks.delete",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpHealthChecks.use",
    "compute.httpHealthChecks.useReadOnly",
    "compute.httpsHealthChecks.create",
    "compute.httpsHealthChecks.delete",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.update",
    "compute.httpsHealthChecks.use",
    "compute.httpsHealthChecks.useReadOnly",
    "compute.images.get",
    "compute.images.useReadOnly",
    "compute.instanceGroupManagers.create",
    "compute.instanceGroupManagers.delete",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.update",
    "compute.instanceGroupManagers.use",
    "compute.instanceGroups.create",
    "compute.instanceGroups.delete",
    "compute.instanceGroups.get",
    "compute.instanceGroups.update",
    "compute.instanceTemplates.create",
    "compute.instanceTemplates.delete",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.useReadOnly",
    "compute.instances.create",
    "compute.instances.delete",
    "compute.instances.get",
    "compute.instances.getGuestAttributes",
    "compute.instances.list",
    "compute.instances.reset",
    "compute.instances.setLabels",
    "compute.instances.setMetadata",
    "compute.instances.setTags",
    "compute.instances.start",
    "compute.instances.stop",
    "compute.instances.use",
    "compute.machineTypes.get",
    "compute.networks.get",
    "compute.networks.use",
    "compute.projects.get",
    "compute.projects.setCommonInstanceMetadata",
    "compute.regionOperations.get",
    "compute.regionOperations.list",
    "compute.regions.get",
    "compute.regions.list",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.subnetworks.use",
    "compute.zoneOperations.get",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "deploymentmanager.compositeTypes.get",
    "deploymentmanager.deployments.create",
    "deploymentmanager.deployments.delete",
    "deploymentmanager.deployments.get",
    "deploymentmanager.deployments.list",
    "deploymentmanager.deployments.update",
    "deploymentmanager.manifests.get",
    "deploymentmanager.manifests.list",
    "deploymentmanager.operations.get",
    "deploymentmanager.operations.list",
    "deploymentmanager.typeProviders.create",
    "deploymentmanager.typeProviders.get",
    "logging.logEntries.create",
    "logging.logMetrics.create",
    "logging.logMetrics.delete",
    "logging.logMetrics.get",
    "logging.logMetrics.update",
    "resourcemanager.projects.get"
   ]
  },
  {
   "name": "roles/resourcemanager.folderViewer",
   "role": {
    "description": "Access to view a folder and all of its child resources.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderViewer",
    "stage": "GA",
    "title": "Folder Viewer"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/workflows.serviceAgent",
   "role": {
    "description": "Gives Cloud Workflows service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/workflows.serviceAgent",
    "stage": "GA",
    "title": "Cloud Workflows Service Agent"
   },
   "included_permissions": [
    "iam.serviceAccounts.get",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken"
   ]
  },
  {
   "name": "roles/vpcaccess.user",
   "role": {
    "description": "User of Serverless VPC Access connectors",
    "etag": "AA==",
    "name": "roles/vpcaccess.user",
    "stage": "GA",
    "title": "Serverless VPC Access User"
   },
   "included_permissions": [
    "compute.networks.access",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.connectors.use",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list"
   ]
  },
  {
   "name": "roles/resourcemanager.folderAdmin",
   "role": {
    "description": "Access and administer a folder and all of its sub-resources.",
    "etag": "AA==",
    "name": "roles/resourcemanager.folderAdmin",
    "stage": "GA",
    "title": "Folder Admin"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "resourcemanager.folders.create",
    "resourcemanager.folders.delete",
    "resourcemanager.folders.get",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list",
    "resourcemanager.folders.move",
    "resourcemanager.folders.setIamPolicy",
    "resourcemanager.folders.undelete",
    "resourcemanager.folders.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.projects.move",
    "resourcemanager.projects.setIamPolicy"
   ]
  },
  {
   "name": "roles/securitycenter.controlServiceAgent",
   "role": {
    "description": "Security Center Control service agent can monitor and configure GCP resources and import security findings.",
    "etag": "AA==",
    "name": "roles/securitycenter.controlServiceAgent",
    "stage": "GA",
    "title": "Security Center Control Service Agent"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.get",
    "appengine.versions.list",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "cloudsql.instances.connect",
    "cloudsql.instances.get",
    "cloudsql.users.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.bindings.get",
    "container.bindings.list",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.deployments.get",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.events.get",
    "container.events.list",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.leases.get",
    "container.leases.list",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.petSets.get",
    "container.petSets.list",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.pods.get",
    "container.pods.getStatus",
    "container.pods.list",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.statefulSets.get",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageStates.get",
    "container.storageStates.list",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.tokenReviews.create",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.list",
    "dlp.jobs.get",
    "dlp.jobs.list",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "orgpolicy.policy.get",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "serviceusage.quotas.get",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "stackdriver.projects.get",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list"
   ]
  },
  {
   "name": "roles/securitycenter.findingsEditor",
   "role": {
    "description": "Read-write access to findings",
    "etag": "AA==",
    "name": "roles/securitycenter.findingsEditor",
    "stage": "GA",
    "title": "Security Center Findings Editor"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.update",
    "securitycenter.sources.get",
    "securitycenter.sources.list"
   ]
  },
  {
   "name": "roles/securitycenter.findingsStateSetter",
   "role": {
    "description": "Set state access to findings",
    "etag": "AA==",
    "name": "roles/securitycenter.findingsStateSetter",
    "stage": "GA",
    "title": "Security Center Findings State Setter"
   },
   "included_permissions": [
    "securitycenter.findings.setState"
   ]
  },
  {
   "name": "roles/resourcemanager.organizationAdmin",
   "role": {
    "description": "Access to administer all resources belonging to the organization.",
    "etag": "AA==",
    "name": "roles/resourcemanager.organizationAdmin",
    "stage": "GA",
    "title": "Organization Administrator"
   },
   "included_permissions": [
    "orgpolicy.policy.get",
    "resourcemanager.folders.get",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list",
    "resourcemanager.folders.setIamPolicy",
    "resourcemanager.organizations.get",
    "resourcemanager.organizations.getIamPolicy",
    "resourcemanager.organizations.setIamPolicy",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.projects.setIamPolicy"
   ]
  },
  {
   "name": "roles/servicemanagement.serviceConsumer",
   "role": {
    "description": "Can enable the service.",
    "etag": "AA==",
    "name": "roles/servicemanagement.serviceConsumer",
    "stage": "GA",
    "title": "Service Consumer"
   },
   "included_permissions": [
    "servicemanagement.services.bind"
   ]
  },
  {
   "name": "roles/securitycenter.findingsViewer",
   "role": {
    "description": "Read access to findings",
    "etag": "AA==",
    "name": "roles/securitycenter.findingsViewer",
    "stage": "GA",
    "title": "Security Center Findings Viewer"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.sources.get",
    "securitycenter.sources.list"
   ]
  },
  {
   "name": "roles/resourcemanager.organizationViewer",
   "role": {
    "description": "Access only to view an Organization.",
    "etag": "AA==",
    "name": "roles/resourcemanager.organizationViewer",
    "stage": "GA",
    "title": "Organization Viewer"
   },
   "included_permissions": [
    "resourcemanager.organizations.get"
   ]
  },
  {
   "name": "roles/securitycenter.findingsWorkflowStateSetter",
   "role": {
    "description": "Set workflow state access to findings",
    "etag": "AA==",
    "name": "roles/securitycenter.findingsWorkflowStateSetter",
    "stage": "BETA",
    "title": "Security Center Findings Workflow State Setter"
   },
   "included_permissions": [
    "securitycenter.findings.setWorkflowState"
   ]
  },
  {
   "name": "roles/resourcemanager.projectCreator",
   "role": {
    "description": "Access to create new GCP projects.",
    "etag": "AA==",
    "name": "roles/resourcemanager.projectCreator",
    "stage": "GA",
    "title": "Project Creator"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "resourcemanager.projects.create"
   ]
  },
  {
   "name": "roles/securitycenter.notificationConfigEditor",
   "role": {
    "description": "Write access to notification configurations",
    "etag": "AA==",
    "name": "roles/securitycenter.notificationConfigEditor",
    "stage": "GA",
    "title": "Security Center Notification Configurations Editor"
   },
   "included_permissions": [
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update"
   ]
  },
  {
   "name": "roles/resourcemanager.projectDeleter",
   "role": {
    "description": "Access to delete GCP projects.",
    "etag": "AA==",
    "name": "roles/resourcemanager.projectDeleter",
    "stage": "GA",
    "title": "Project Deleter"
   },
   "included_permissions": [
    "resourcemanager.projects.delete"
   ]
  },
  {
   "name": "roles/servicemanagement.serviceController",
   "role": {
    "description": "Can check preconditions and report usage of a service during runtime.",
    "etag": "AA==",
    "name": "roles/servicemanagement.serviceController",
    "stage": "GA",
    "title": "Service Controller"
   },
   "included_permissions": [
    "servicemanagement.services.check",
    "servicemanagement.services.get",
    "servicemanagement.services.quota",
    "servicemanagement.services.report"
   ]
  },
  {
   "name": "roles/resourcemanager.projectIamAdmin",
   "role": {
    "description": "Access and administer a project IAM policies.",
    "etag": "AA==",
    "name": "roles/resourcemanager.projectIamAdmin",
    "stage": "GA",
    "title": "Project IAM Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.setIamPolicy"
   ]
  },
  {
   "name": "roles/storage.objectAdmin",
   "role": {
    "description": "Full control of GCS objects.",
    "etag": "AA==",
    "name": "roles/storage.objectAdmin",
    "stage": "GA",
    "title": "Storage Object Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/securitycenter.notificationServiceAgent",
   "role": {
    "description": "Security Center service agent can publish notifications to Pub/Sub topics.",
    "etag": "AA==",
    "name": "roles/securitycenter.notificationServiceAgent",
    "stage": "GA",
    "title": "Security Center Notification Service Agent"
   },
   "included_permissions": [
    "pubsub.topics.publish"
   ]
  },
  {
   "name": "roles/resourcemanager.tagAdmin",
   "role": {
    "description": "Access to create, delete, update, and manage access to Tags",
    "etag": "AA==",
    "name": "roles/resourcemanager.tagAdmin",
    "stage": "BETA",
    "title": "Tag Administrator"
   },
   "included_permissions": [
    "resourcemanager.tagKeys.create",
    "resourcemanager.tagKeys.delete",
    "resourcemanager.tagKeys.get",
    "resourcemanager.tagKeys.getIamPolicy",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagKeys.setIamPolicy",
    "resourcemanager.tagKeys.update",
    "resourcemanager.tagValues.create",
    "resourcemanager.tagValues.delete",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.getIamPolicy",
    "resourcemanager.tagValues.list",
    "resourcemanager.tagValues.setIamPolicy",
    "resourcemanager.tagValues.update"
   ]
  },
  {
   "name": "roles/servicenetworking.serviceAgent",
   "role": {
    "description": "Gives permission to manage network configuration, such as establishing network peering, necessary for service producers",
    "etag": "AA==",
    "name": "roles/servicenetworking.serviceAgent",
    "stage": "GA",
    "title": "Service Networking Service Agent"
   },
   "included_permissions": [
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.create",
    "compute.networks.delete",
    "compute.networks.get",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.networks.updatePeering",
    "compute.networks.updatePolicy",
    "compute.projects.get",
    "compute.regionOperations.get",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.list",
    "compute.subnetworks.create",
    "compute.subnetworks.delete",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "dns.changes.create",
    "dns.changes.get",
    "dns.changes.list",
    "dns.dnsKeys.get",
    "dns.dnsKeys.list",
    "dns.managedZoneOperations.get",
    "dns.managedZoneOperations.list",
    "dns.managedZones.create",
    "dns.managedZones.delete",
    "dns.managedZones.get",
    "dns.managedZones.list",
    "dns.managedZones.update",
    "dns.networks.bindPrivateDNSPolicy",
    "dns.networks.bindPrivateDNSZone",
    "dns.networks.targetWithPeeringZone",
    "dns.policies.create",
    "dns.policies.delete",
    "dns.policies.get",
    "dns.policies.list",
    "dns.policies.update",
    "dns.projects.get",
    "dns.resourceRecordSets.create",
    "dns.resourceRecordSets.delete",
    "dns.resourceRecordSets.list",
    "dns.resourceRecordSets.update",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/securitycenter.securityHealthAnalyticsServiceAgent",
   "role": {
    "description": "Security Health Analytics service agent can scan GCP resource metadata to find security vulnerabilities.",
    "etag": "AA==",
    "name": "roles/securitycenter.securityHealthAnalyticsServiceAgent",
    "stage": "GA",
    "title": "Security Health Analytics Service Agent"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "cloudsql.instances.connect",
    "cloudsql.instances.get",
    "cloudsql.users.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "container.clusters.get",
    "container.clusters.list",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "orgpolicy.policy.get",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "stackdriver.projects.get"
   ]
  },
  {
   "name": "roles/resourcemanager.tagUser",
   "role": {
    "description": "Access to list Tags and manage their associations with resources",
    "etag": "AA==",
    "name": "roles/resourcemanager.tagUser",
    "stage": "BETA",
    "title": "Tag User"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.resourceTagBindings.create",
    "resourcemanager.resourceTagBindings.delete",
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagValueBindings.create",
    "resourcemanager.tagValueBindings.delete",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.list"
   ]
  },
  {
   "name": "roles/serviceusage.apiKeysAdmin",
   "role": {
    "description": "Ability to create, delete, update, get and list API keys for a project.",
    "etag": "AA==",
    "name": "roles/serviceusage.apiKeysAdmin",
    "stage": "BETA",
    "title": "API Keys Admin"
   },
   "included_permissions": [
    "apikeys.keys.create",
    "apikeys.keys.delete",
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "apikeys.keys.update",
    "serviceusage.apiKeys.regenerate",
    "serviceusage.apiKeys.revert",
    "serviceusage.operations.get"
   ]
  },
  {
   "name": "roles/securitycenter.serviceAgent",
   "role": {
    "description": "Security Center service agent can scan GCP resources and import security scans.",
    "etag": "AA==",
    "name": "roles/securitycenter.serviceAgent",
    "stage": "GA",
    "title": "Security Center Service Agent"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup",
    "appengine.applications.get",
    "appengine.instances.get",
    "appengine.instances.list",
    "appengine.operations.get",
    "appengine.operations.list",
    "appengine.services.get",
    "appengine.services.list",
    "appengine.versions.get",
    "appengine.versions.list",
    "cloudasset.assets.analyzeIamPolicy",
    "cloudasset.assets.exportAccessLevel",
    "cloudasset.assets.exportAccessPolicy",
    "cloudasset.assets.exportAllAccessPolicy",
    "cloudasset.assets.exportAppengineApplications",
    "cloudasset.assets.exportAppengineServices",
    "cloudasset.assets.exportAppengineVersions",
    "cloudasset.assets.exportBigqueryDatasets",
    "cloudasset.assets.exportBigqueryTables",
    "cloudasset.assets.exportBigtableCluster",
    "cloudasset.assets.exportBigtableInstance",
    "cloudasset.assets.exportBigtableTable",
    "cloudasset.assets.exportCloudbillingBillingAccounts",
    "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
    "cloudasset.assets.exportCloudkmsCryptoKeys",
    "cloudasset.assets.exportCloudkmsImportJobs",
    "cloudasset.assets.exportCloudkmsKeyRings",
    "cloudasset.assets.exportCloudresourcemanagerFolders",
    "cloudasset.assets.exportCloudresourcemanagerOrganizations",
    "cloudasset.assets.exportCloudresourcemanagerProjects",
    "cloudasset.assets.exportComputeAddress",
    "cloudasset.assets.exportComputeAutoscalers",
    "cloudasset.assets.exportComputeBackendBuckets",
    "cloudasset.assets.exportComputeBackendServices",
    "cloudasset.assets.exportComputeDisks",
    "cloudasset.assets.exportComputeFirewalls",
    "cloudasset.assets.exportComputeForwardingRules",
    "cloudasset.assets.exportComputeGlobalAddress",
    "cloudasset.assets.exportComputeGlobalForwardingRules",
    "cloudasset.assets.exportComputeHealthChecks",
    "cloudasset.assets.exportComputeHttpHealthChecks",
    "cloudasset.assets.exportComputeHttpsHealthChecks",
    "cloudasset.assets.exportComputeImages",
    "cloudasset.assets.exportComputeInstanceGroupManagers",
    "cloudasset.assets.exportComputeInstanceGroups",
    "cloudasset.assets.exportComputeInstanceTemplates",
    "cloudasset.assets.exportComputeInstances",
    "cloudasset.assets.exportComputeInterconnect",
    "cloudasset.assets.exportComputeInterconnectAttachment",
    "cloudasset.assets.exportComputeLicenses",
    "cloudasset.assets.exportComputeNetworks",
    "cloudasset.assets.exportComputeProjects",
    "cloudasset.assets.exportComputeRegionAutoscaler",
    "cloudasset.assets.exportComputeRegionBackendServices",
    "cloudasset.assets.exportComputeRegionDisk",
    "cloudasset.assets.exportComputeRegionInstanceGroup",
    "cloudasset.assets.exportComputeRegionInstanceGroupManager",
    "cloudasset.assets.exportComputeRouters",
    "cloudasset.assets.exportComputeRoutes",
    "cloudasset.assets.exportComputeSecurityPolicy",
    "cloudasset.assets.exportComputeSnapshots",
    "cloudasset.assets.exportComputeSslCertificates",
    "cloudasset.assets.exportComputeSubnetworks",
    "cloudasset.assets.exportComputeTargetHttpProxies",
    "cloudasset.assets.exportComputeTargetHttpsProxies",
    "cloudasset.assets.exportComputeTargetInstances",
    "cloudasset.assets.exportComputeTargetPools",
    "cloudasset.assets.exportComputeTargetSslProxies",
    "cloudasset.assets.exportComputeTargetTcpProxies",
    "cloudasset.assets.exportComputeTargetVpnGateways",
    "cloudasset.assets.exportComputeUrlMaps",
    "cloudasset.assets.exportComputeVpnTunnels",
    "cloudasset.assets.exportContainerClusterrole",
    "cloudasset.assets.exportContainerClusterrolebinding",
    "cloudasset.assets.exportContainerClusters",
    "cloudasset.assets.exportContainerNamespace",
    "cloudasset.assets.exportContainerNode",
    "cloudasset.assets.exportContainerNodepool",
    "cloudasset.assets.exportContainerPod",
    "cloudasset.assets.exportContainerRole",
    "cloudasset.assets.exportContainerRolebinding",
    "cloudasset.assets.exportContainerregistryImage",
    "cloudasset.assets.exportDatafusionInstance",
    "cloudasset.assets.exportDataprocClusters",
    "cloudasset.assets.exportDataprocJobs",
    "cloudasset.assets.exportDnsManagedZones",
    "cloudasset.assets.exportDnsPolicies",
    "cloudasset.assets.exportIamPolicy",
    "cloudasset.assets.exportIamRoles",
    "cloudasset.assets.exportIamServiceAccountKeys",
    "cloudasset.assets.exportIamServiceAccounts",
    "cloudasset.assets.exportManagedidentitiesDomain",
    "cloudasset.assets.exportOrgPolicy",
    "cloudasset.assets.exportPubsubSubscriptions",
    "cloudasset.assets.exportPubsubTopics",
    "cloudasset.assets.exportResource",
    "cloudasset.assets.exportServicePerimeter",
    "cloudasset.assets.exportServicemanagementServices",
    "cloudasset.assets.exportSpannerDatabases",
    "cloudasset.assets.exportSpannerInstances",
    "cloudasset.assets.exportSqladminInstances",
    "cloudasset.assets.exportStorageBuckets",
    "cloudasset.assets.searchAllIamPolicies",
    "cloudasset.assets.searchAllResources",
    "cloudasset.feeds.create",
    "cloudasset.feeds.delete",
    "cloudasset.feeds.get",
    "cloudasset.feeds.list",
    "cloudasset.feeds.update",
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scanruns.stop",
    "cloudsecurityscanner.scans.create",
    "cloudsecurityscanner.scans.delete",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "cloudsecurityscanner.scans.run",
    "cloudsecurityscanner.scans.update",
    "cloudsql.instances.connect",
    "cloudsql.instances.get",
    "cloudsql.users.list",
    "compute.acceleratorTypes.get",
    "compute.acceleratorTypes.list",
    "compute.addresses.get",
    "compute.addresses.list",
    "compute.autoscalers.get",
    "compute.autoscalers.list",
    "compute.backendBuckets.get",
    "compute.backendBuckets.list",
    "compute.backendServices.get",
    "compute.backendServices.list",
    "compute.commitments.get",
    "compute.commitments.list",
    "compute.diskTypes.get",
    "compute.diskTypes.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.get",
    "compute.externalVpnGateways.list",
    "compute.firewallPolicies.get",
    "compute.firewallPolicies.getIamPolicy",
    "compute.firewallPolicies.list",
    "compute.firewalls.get",
    "compute.firewalls.list",
    "compute.forwardingRules.get",
    "compute.forwardingRules.list",
    "compute.globalAddresses.get",
    "compute.globalAddresses.list",
    "compute.globalForwardingRules.get",
    "compute.globalForwardingRules.list",
    "compute.globalForwardingRules.pscGet",
    "compute.globalNetworkEndpointGroups.get",
    "compute.globalNetworkEndpointGroups.list",
    "compute.globalOperations.get",
    "compute.globalOperations.getIamPolicy",
    "compute.globalOperations.list",
    "compute.globalPublicDelegatedPrefixes.get",
    "compute.globalPublicDelegatedPrefixes.list",
    "compute.healthChecks.get",
    "compute.healthChecks.list",
    "compute.httpHealthChecks.get",
    "compute.httpHealthChecks.list",
    "compute.httpsHealthChecks.get",
    "compute.httpsHealthChecks.list",
    "compute.images.get",
    "compute.images.getFromFamily",
    "compute.images.getIamPolicy",
    "compute.images.list",
    "compute.instanceGroupManagers.get",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.get",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.get",
    "compute.instanceTemplates.getIamPolicy",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getEffectiveFirewalls",
    "compute.instances.getGuestAttributes",
    "compute.instances.getIamPolicy",
    "compute.instances.getScreenshot",
    "compute.instances.getSerialPortOutput",
    "compute.instances.getShieldedInstanceIdentity",
    "compute.instances.getShieldedVmIdentity",
    "compute.instances.list",
    "compute.instances.listReferrers",
    "compute.interconnectAttachments.get",
    "compute.interconnectAttachments.list",
    "compute.interconnectLocations.get",
    "compute.interconnectLocations.list",
    "compute.interconnects.get",
    "compute.interconnects.list",
    "compute.licenseCodes.get",
    "compute.licenseCodes.getIamPolicy",
    "compute.licenseCodes.list",
    "compute.licenses.get",
    "compute.licenses.getIamPolicy",
    "compute.licenses.list",
    "compute.machineImages.get",
    "compute.machineImages.getIamPolicy",
    "compute.machineImages.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.maintenancePolicies.get",
    "compute.maintenancePolicies.getIamPolicy",
    "compute.maintenancePolicies.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.getIamPolicy",
    "compute.networkEndpointGroups.list",
    "compute.networks.get",
    "compute.networks.getEffectiveFirewalls",
    "compute.networks.list",
    "compute.networks.listPeeringRoutes",
    "compute.nodeGroups.get",
    "compute.nodeGroups.getIamPolicy",
    "compute.nodeGroups.list",
    "compute.nodeTemplates.get",
    "compute.nodeTemplates.getIamPolicy",
    "compute.nodeTemplates.list",
    "compute.nodeTypes.get",
    "compute.nodeTypes.list",
    "compute.organizations.listAssociations",
    "compute.projects.get",
    "compute.publicAdvertisedPrefixes.get",
    "compute.publicAdvertisedPrefixes.list",
    "compute.publicDelegatedPrefixes.get",
    "compute.publicDelegatedPrefixes.list",
    "compute.regionBackendServices.get",
    "compute.regionBackendServices.list",
    "compute.regionHealthCheckServices.get",
    "compute.regionHealthCheckServices.list",
    "compute.regionHealthChecks.get",
    "compute.regionHealthChecks.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regionNetworkEndpointGroups.list",
    "compute.regionNotificationEndpoints.get",
    "compute.regionNotificationEndpoints.list",
    "compute.regionOperations.get",
    "compute.regionOperations.getIamPolicy",
    "compute.regionOperations.list",
    "compute.regionSslCertificates.get",
    "compute.regionSslCertificates.list",
    "compute.regionTargetHttpProxies.get",
    "compute.regionTargetHttpProxies.list",
    "compute.regionTargetHttpsProxies.get",
    "compute.regionTargetHttpsProxies.list",
    "compute.regionUrlMaps.get",
    "compute.regionUrlMaps.list",
    "compute.regionUrlMaps.validate",
    "compute.regions.get",
    "compute.regions.list",
    "compute.reservations.get",
    "compute.reservations.list",
    "compute.resourcePolicies.get",
    "compute.resourcePolicies.list",
    "compute.routers.get",
    "compute.routers.list",
    "compute.routes.get",
    "compute.routes.list",
    "compute.securityPolicies.get",
    "compute.securityPolicies.getIamPolicy",
    "compute.securityPolicies.list",
    "compute.serviceAttachments.get",
    "compute.serviceAttachments.list",
    "compute.snapshots.get",
    "compute.snapshots.getIamPolicy",
    "compute.snapshots.list",
    "compute.sslCertificates.get",
    "compute.sslCertificates.list",
    "compute.sslPolicies.get",
    "compute.sslPolicies.list",
    "compute.sslPolicies.listAvailableFeatures",
    "compute.subnetworks.get",
    "compute.subnetworks.getIamPolicy",
    "compute.subnetworks.list",
    "compute.targetGrpcProxies.get",
    "compute.targetGrpcProxies.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.get",
    "compute.targetHttpsProxies.list",
    "compute.targetInstances.get",
    "compute.targetInstances.list",
    "compute.targetPools.get",
    "compute.targetPools.list",
    "compute.targetSslProxies.get",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.get",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.get",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.urlMaps.validate",
    "compute.vpnGateways.get",
    "compute.vpnGateways.list",
    "compute.vpnTunnels.get",
    "compute.vpnTunnels.list",
    "compute.zoneOperations.get",
    "compute.zoneOperations.getIamPolicy",
    "compute.zoneOperations.list",
    "compute.zones.get",
    "compute.zones.list",
    "container.apiServices.get",
    "container.apiServices.getStatus",
    "container.apiServices.list",
    "container.auditSinks.get",
    "container.auditSinks.list",
    "container.backendConfigs.get",
    "container.backendConfigs.list",
    "container.bindings.get",
    "container.bindings.list",
    "container.certificateSigningRequests.get",
    "container.certificateSigningRequests.getStatus",
    "container.certificateSigningRequests.list",
    "container.clusterRoleBindings.get",
    "container.clusterRoleBindings.list",
    "container.clusterRoles.get",
    "container.clusterRoles.list",
    "container.clusters.get",
    "container.clusters.list",
    "container.componentStatuses.get",
    "container.componentStatuses.list",
    "container.configMaps.get",
    "container.configMaps.list",
    "container.controllerRevisions.get",
    "container.controllerRevisions.list",
    "container.cronJobs.get",
    "container.cronJobs.getStatus",
    "container.cronJobs.list",
    "container.csiDrivers.get",
    "container.csiDrivers.list",
    "container.csiNodeInfos.get",
    "container.csiNodeInfos.list",
    "container.csiNodes.get",
    "container.csiNodes.list",
    "container.customResourceDefinitions.get",
    "container.customResourceDefinitions.getStatus",
    "container.customResourceDefinitions.list",
    "container.daemonSets.get",
    "container.daemonSets.getStatus",
    "container.daemonSets.list",
    "container.deployments.get",
    "container.deployments.getStatus",
    "container.deployments.list",
    "container.endpointSlices.get",
    "container.endpointSlices.list",
    "container.endpoints.get",
    "container.endpoints.list",
    "container.events.get",
    "container.events.list",
    "container.frontendConfigs.get",
    "container.frontendConfigs.list",
    "container.horizontalPodAutoscalers.get",
    "container.horizontalPodAutoscalers.getStatus",
    "container.horizontalPodAutoscalers.list",
    "container.ingresses.get",
    "container.ingresses.getStatus",
    "container.ingresses.list",
    "container.initializerConfigurations.get",
    "container.initializerConfigurations.list",
    "container.jobs.get",
    "container.jobs.getStatus",
    "container.jobs.list",
    "container.leases.get",
    "container.leases.list",
    "container.limitRanges.get",
    "container.limitRanges.list",
    "container.managedCertificates.get",
    "container.managedCertificates.list",
    "container.mutatingWebhookConfigurations.get",
    "container.mutatingWebhookConfigurations.list",
    "container.namespaces.get",
    "container.namespaces.getStatus",
    "container.namespaces.list",
    "container.networkPolicies.get",
    "container.networkPolicies.list",
    "container.nodes.get",
    "container.nodes.getStatus",
    "container.nodes.list",
    "container.operations.get",
    "container.operations.list",
    "container.persistentVolumeClaims.get",
    "container.persistentVolumeClaims.getStatus",
    "container.persistentVolumeClaims.list",
    "container.persistentVolumes.get",
    "container.persistentVolumes.getStatus",
    "container.persistentVolumes.list",
    "container.petSets.get",
    "container.petSets.list",
    "container.podDisruptionBudgets.get",
    "container.podDisruptionBudgets.getStatus",
    "container.podDisruptionBudgets.list",
    "container.podPresets.get",
    "container.podPresets.list",
    "container.podSecurityPolicies.get",
    "container.podSecurityPolicies.list",
    "container.podTemplates.get",
    "container.podTemplates.list",
    "container.pods.get",
    "container.pods.getStatus",
    "container.pods.list",
    "container.priorityClasses.get",
    "container.priorityClasses.list",
    "container.replicaSets.get",
    "container.replicaSets.getScale",
    "container.replicaSets.getStatus",
    "container.replicaSets.list",
    "container.replicationControllers.get",
    "container.replicationControllers.getScale",
    "container.replicationControllers.getStatus",
    "container.replicationControllers.list",
    "container.resourceQuotas.get",
    "container.resourceQuotas.getStatus",
    "container.resourceQuotas.list",
    "container.roleBindings.get",
    "container.roleBindings.list",
    "container.roles.get",
    "container.roles.list",
    "container.runtimeClasses.get",
    "container.runtimeClasses.list",
    "container.scheduledJobs.get",
    "container.scheduledJobs.list",
    "container.serviceAccounts.get",
    "container.serviceAccounts.list",
    "container.services.get",
    "container.services.getStatus",
    "container.services.list",
    "container.statefulSets.get",
    "container.statefulSets.getStatus",
    "container.statefulSets.list",
    "container.storageClasses.get",
    "container.storageClasses.list",
    "container.storageStates.get",
    "container.storageStates.list",
    "container.storageVersionMigrations.get",
    "container.storageVersionMigrations.list",
    "container.thirdPartyObjects.get",
    "container.thirdPartyObjects.list",
    "container.thirdPartyResources.get",
    "container.thirdPartyResources.list",
    "container.tokenReviews.create",
    "container.updateInfos.get",
    "container.updateInfos.list",
    "container.validatingWebhookConfigurations.get",
    "container.validatingWebhookConfigurations.list",
    "container.volumeAttachments.get",
    "container.volumeAttachments.getStatus",
    "container.volumeAttachments.list",
    "container.volumeSnapshotClasses.get",
    "container.volumeSnapshotClasses.list",
    "container.volumeSnapshotContents.get",
    "container.volumeSnapshotContents.list",
    "container.volumeSnapshots.get",
    "container.volumeSnapshots.list",
    "dlp.jobs.get",
    "dlp.jobs.list",
    "logging.buckets.get",
    "logging.buckets.list",
    "logging.exclusions.get",
    "logging.exclusions.list",
    "logging.locations.get",
    "logging.locations.list",
    "logging.logEntries.list",
    "logging.logMetrics.get",
    "logging.logMetrics.list",
    "logging.logServiceIndexes.list",
    "logging.logServices.list",
    "logging.logs.list",
    "logging.queries.create",
    "logging.queries.delete",
    "logging.queries.get",
    "logging.queries.list",
    "logging.queries.listShared",
    "logging.queries.update",
    "logging.sinks.get",
    "logging.sinks.list",
    "logging.usage.get",
    "logging.views.get",
    "logging.views.list",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "orgpolicy.policy.get",
    "recommender.locations.get",
    "recommender.locations.list",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.assets.runDiscovery",
    "securitycenter.assetsecuritymarks.update",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.findings.setState",
    "securitycenter.findings.setWorkflowState",
    "securitycenter.findings.update",
    "securitycenter.findingsecuritymarks.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.sources.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "stackdriver.projects.get",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list"
   ]
  },
  {
   "name": "roles/resourcemanager.tagViewer",
   "role": {
    "description": "Access to list Tags and their associations with resources",
    "etag": "AA==",
    "name": "roles/resourcemanager.tagViewer",
    "stage": "BETA",
    "title": "Tag Viewer"
   },
   "included_permissions": [
    "resourcemanager.resourceTagBindings.list",
    "resourcemanager.tagKeys.get",
    "resourcemanager.tagKeys.list",
    "resourcemanager.tagValues.get",
    "resourcemanager.tagValues.list"
   ]
  },
  {
   "name": "roles/securitycenter.settingsAdmin",
   "role": {
    "description": "Admin(super user) access to security center settings",
    "etag": "AA==",
    "name": "roles/securitycenter.settingsAdmin",
    "stage": "GA",
    "title": "Security Center Settings Admin"
   },
   "included_permissions": [
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.containerthreatdetectionsettings.update",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.organizationsettings.update",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securitycentersettings.update",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.securityhealthanalyticssettings.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "securitycenter.websecurityscannersettings.update"
   ]
  },
  {
   "name": "roles/serviceusage.apiKeysViewer",
   "role": {
    "description": "Ability to get and list API keys for a project.",
    "etag": "AA==",
    "name": "roles/serviceusage.apiKeysViewer",
    "stage": "BETA",
    "title": "API Keys Viewer"
   },
   "included_permissions": [
    "apikeys.keys.get",
    "apikeys.keys.list",
    "apikeys.keys.lookup"
   ]
  },
  {
   "name": "roles/retail.admin",
   "role": {
    "description": "Full access to Retail api resources.",
    "etag": "AA==",
    "name": "roles/retail.admin",
    "stage": "GA",
    "title": "Retail Admin"
   },
   "included_permissions": [
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.delete",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.catalogs.update",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.events.purge",
    "automlrecommendations.events.rejoin",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.delete",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.delete",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import",
    "retail.userEvents.purge",
    "retail.userEvents.rejoin"
   ]
  },
  {
   "name": "roles/securitycenter.settingsEditor",
   "role": {
    "description": "Read-Write access to security center settings",
    "etag": "AA==",
    "name": "roles/securitycenter.settingsEditor",
    "stage": "GA",
    "title": "Security Center Settings Editor"
   },
   "included_permissions": [
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.containerthreatdetectionsettings.update",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.update",
    "securitycenter.notificationconfig.create",
    "securitycenter.notificationconfig.delete",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.notificationconfig.update",
    "securitycenter.organizationsettings.get",
    "securitycenter.organizationsettings.update",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securitycentersettings.update",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.securityhealthanalyticssettings.update",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "securitycenter.websecurityscannersettings.update"
   ]
  },
  {
   "name": "roles/serviceusage.serviceUsageAdmin",
   "role": {
    "description": "Ability to enable, disable, and inspect service states, inspect operations, and consume quota and billing for a consumer project.",
    "etag": "AA==",
    "name": "roles/serviceusage.serviceUsageAdmin",
    "stage": "BETA",
    "title": "Service Usage Admin"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "serviceusage.operations.cancel",
    "serviceusage.operations.delete",
    "serviceusage.operations.get",
    "serviceusage.operations.list",
    "serviceusage.quotas.get",
    "serviceusage.quotas.update",
    "serviceusage.services.disable",
    "serviceusage.services.enable",
    "serviceusage.services.get",
    "serviceusage.services.list",
    "serviceusage.services.use"
   ]
  },
  {
   "name": "roles/retail.editor",
   "role": {
    "description": "Full access to Retail api resources except purge and rejoin.",
    "etag": "AA==",
    "name": "roles/retail.editor",
    "stage": "GA",
    "title": "Retail Editor"
   },
   "included_permissions": [
    "automlrecommendations.apiKeys.create",
    "automlrecommendations.apiKeys.delete",
    "automlrecommendations.catalogItems.create",
    "automlrecommendations.catalogItems.delete",
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogItems.update",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.catalogs.update",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.create",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.create",
    "automlrecommendations.placements.delete",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.create",
    "automlrecommendations.recommendations.delete",
    "automlrecommendations.recommendations.list",
    "automlrecommendations.recommendations.pause",
    "automlrecommendations.recommendations.resume",
    "automlrecommendations.recommendations.update",
    "retail.catalogs.list",
    "retail.catalogs.update",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.create",
    "retail.products.delete",
    "retail.products.export",
    "retail.products.get",
    "retail.products.import",
    "retail.products.list",
    "retail.products.update",
    "retail.userEvents.create",
    "retail.userEvents.import"
   ]
  },
  {
   "name": "roles/remotebuildexecution.logstreamWriter",
   "role": {
    "description": "Remote Build Execution Logstream Writer",
    "etag": "AA==",
    "name": "roles/remotebuildexecution.logstreamWriter",
    "stage": "BETA",
    "title": "Remote Build Execution Logstream Writer"
   },
   "included_permissions": [
    "remotebuildexecution.logstreams.create",
    "remotebuildexecution.logstreams.update"
   ]
  },
  {
   "name": "roles/retail.serviceAgent",
   "role": {
    "description": "Retail service uploads product feeds and user events from Cloud Storage and BigQuery, reports results to the customer Cloud Storage bucket, writes logs to customer projects, and writes and reads Stackdriver metrics for customer projects.",
    "etag": "AA==",
    "name": "roles/retail.serviceAgent",
    "stage": "GA",
    "title": "Retail Service Agent"
   },
   "included_permissions": [
    "bigquery.datasets.create",
    "bigquery.datasets.get",
    "bigquery.jobs.create",
    "bigquery.jobs.get",
    "bigquery.jobs.list",
    "bigquery.jobs.update",
    "bigquery.tables.create",
    "bigquery.tables.export",
    "bigquery.tables.get",
    "bigquery.tables.getData",
    "bigquery.tables.list",
    "bigquery.tables.updateData",
    "cloudnotifications.activities.list",
    "logging.logEntries.create",
    "monitoring.alertPolicies.get",
    "monitoring.alertPolicies.list",
    "monitoring.dashboards.get",
    "monitoring.dashboards.list",
    "monitoring.groups.get",
    "monitoring.groups.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.notificationChannelDescriptors.get",
    "monitoring.notificationChannelDescriptors.list",
    "monitoring.notificationChannels.get",
    "monitoring.notificationChannels.list",
    "monitoring.publicWidgets.get",
    "monitoring.publicWidgets.list",
    "monitoring.services.get",
    "monitoring.services.list",
    "monitoring.slos.get",
    "monitoring.slos.list",
    "monitoring.timeSeries.create",
    "monitoring.timeSeries.list",
    "monitoring.uptimeCheckConfigs.get",
    "monitoring.uptimeCheckConfigs.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "stackdriver.projects.get",
    "storage.buckets.create",
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.list",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/retail.viewer",
   "role": {
    "description": "Grants access to read all resources in Retail.",
    "etag": "AA==",
    "name": "roles/retail.viewer",
    "stage": "GA",
    "title": "Retail Viewer"
   },
   "included_permissions": [
    "automlrecommendations.catalogItems.get",
    "automlrecommendations.catalogItems.list",
    "automlrecommendations.catalogs.getStats",
    "automlrecommendations.catalogs.list",
    "automlrecommendations.eventStores.getStats",
    "automlrecommendations.events.list",
    "automlrecommendations.placements.getStats",
    "automlrecommendations.placements.list",
    "automlrecommendations.recommendations.list",
    "retail.catalogs.list",
    "retail.operations.get",
    "retail.operations.list",
    "retail.placements.predict",
    "retail.products.export",
    "retail.products.get",
    "retail.products.list"
   ]
  },
  {
   "name": "roles/run.admin",
   "role": {
    "description": "Full control over all Cloud Run resources.",
    "etag": "AA==",
    "name": "roles/run.admin",
    "stage": "BETA",
    "title": "Cloud Run Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "run.configurations.get",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.delete",
    "run.revisions.get",
    "run.revisions.list",
    "run.routes.get",
    "run.routes.invoke",
    "run.routes.list",
    "run.services.create",
    "run.services.delete",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list",
    "run.services.setIamPolicy",
    "run.services.update"
   ]
  },
  {
   "name": "roles/storage.objectCreator",
   "role": {
    "description": "Access to create objects in GCS.",
    "etag": "AA==",
    "name": "roles/storage.objectCreator",
    "stage": "GA",
    "title": "Storage Object Creator"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.objects.create"
   ]
  },
  {
   "name": "roles/securitycenter.sourcesEditor",
   "role": {
    "description": "Read-write access to sources",
    "etag": "AA==",
    "name": "roles/securitycenter.sourcesEditor",
    "stage": "GA",
    "title": "Security Center Sources Editor"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.sources.update"
   ]
  },
  {
   "name": "roles/run.invoker",
   "role": {
    "description": "Can invoke a Cloud Run service.",
    "etag": "AA==",
    "name": "roles/run.invoker",
    "stage": "BETA",
    "title": "Cloud Run Invoker"
   },
   "included_permissions": [
    "run.routes.invoke"
   ]
  },
  {
   "name": "roles/securitycenter.sourcesViewer",
   "role": {
    "description": "Read access to sources",
    "etag": "AA==",
    "name": "roles/securitycenter.sourcesViewer",
    "stage": "GA",
    "title": "Security Center Sources Viewer"
   },
   "included_permissions": [
    "resourcemanager.organizations.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list"
   ]
  },
  {
   "name": "roles/run.serviceAgent",
   "role": {
    "description": "Gives Cloud Run service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/run.serviceAgent",
    "stage": "GA",
    "title": "Cloud Run Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "clientauthconfig.clients.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "compute.globalOperations.get",
    "compute.networks.access",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.signBlob",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "run.routes.invoke",
    "serviceusage.services.use",
    "storage.objects.get",
    "storage.objects.list",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.use"
   ]
  },
  {
   "name": "roles/serverless.serviceAgent",
   "role": {
    "description": "Gives Cloud Run service account access to managed resources.",
    "etag": "AA==",
    "name": "roles/serverless.serviceAgent",
    "stage": "GA",
    "title": "Cloud Run Service Agent"
   },
   "included_permissions": [
    "artifactregistry.files.get",
    "artifactregistry.files.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.tags.get",
    "artifactregistry.tags.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "clientauthconfig.clients.list",
    "cloudbuild.builds.create",
    "cloudbuild.builds.get",
    "compute.globalOperations.get",
    "compute.networks.access",
    "iam.serviceAccounts.actAs",
    "iam.serviceAccounts.getAccessToken",
    "iam.serviceAccounts.getOpenIdToken",
    "iam.serviceAccounts.signBlob",
    "pubsub.subscriptions.create",
    "pubsub.subscriptions.delete",
    "pubsub.subscriptions.get",
    "pubsub.subscriptions.list",
    "pubsub.topics.attachSubscription",
    "pubsub.topics.create",
    "pubsub.topics.delete",
    "pubsub.topics.get",
    "pubsub.topics.list",
    "pubsub.topics.publish",
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "run.routes.invoke",
    "serviceusage.services.use",
    "storage.objects.get",
    "storage.objects.list",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.use"
   ]
  },
  {
   "name": "roles/storage.objectViewer",
   "role": {
    "description": "Read access to GCS objects.",
    "etag": "AA==",
    "name": "roles/storage.objectViewer",
    "stage": "GA",
    "title": "Storage Object Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.objects.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/run.viewer",
   "role": {
    "description": "Can view the state of all Cloud Run resources, including IAM policies.",
    "etag": "AA==",
    "name": "roles/run.viewer",
    "stage": "BETA",
    "title": "Cloud Run Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "run.configurations.get",
    "run.configurations.list",
    "run.locations.list",
    "run.revisions.get",
    "run.revisions.list",
    "run.routes.get",
    "run.routes.list",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list"
   ]
  },
  {
   "name": "roles/servicebroker.admin",
   "role": {
    "description": "Full access to ServiceBroker resources.",
    "etag": "AA==",
    "name": "roles/servicebroker.admin",
    "stage": "DEPRECATED",
    "title": "Service Broker Admin"
   },
   "included_permissions": [
    "servicebroker.bindingoperations.get",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.create",
    "servicebroker.bindings.delete",
    "servicebroker.bindings.get",
    "servicebroker.bindings.getIamPolicy",
    "servicebroker.bindings.list",
    "servicebroker.bindings.setIamPolicy",
    "servicebroker.catalogs.create",
    "servicebroker.catalogs.delete",
    "servicebroker.catalogs.get",
    "servicebroker.catalogs.getIamPolicy",
    "servicebroker.catalogs.list",
    "servicebroker.catalogs.setIamPolicy",
    "servicebroker.catalogs.validate",
    "servicebroker.instanceoperations.get",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.create",
    "servicebroker.instances.delete",
    "servicebroker.instances.get",
    "servicebroker.instances.getIamPolicy",
    "servicebroker.instances.list",
    "servicebroker.instances.setIamPolicy",
    "servicebroker.instances.update"
   ]
  },
  {
   "name": "roles/runtimeconfig.admin",
   "role": {
    "description": "Full access to RuntimeConfig resources.",
    "etag": "AA==",
    "name": "roles/runtimeconfig.admin",
    "stage": "GA",
    "title": "Cloud RuntimeConfig Admin"
   },
   "included_permissions": [
    "runtimeconfig.configs.create",
    "runtimeconfig.configs.delete",
    "runtimeconfig.configs.get",
    "runtimeconfig.configs.getIamPolicy",
    "runtimeconfig.configs.list",
    "runtimeconfig.configs.setIamPolicy",
    "runtimeconfig.configs.update",
    "runtimeconfig.operations.get",
    "runtimeconfig.operations.list",
    "runtimeconfig.variables.create",
    "runtimeconfig.variables.delete",
    "runtimeconfig.variables.get",
    "runtimeconfig.variables.getIamPolicy",
    "runtimeconfig.variables.list",
    "runtimeconfig.variables.setIamPolicy",
    "runtimeconfig.variables.update",
    "runtimeconfig.variables.watch",
    "runtimeconfig.waiters.create",
    "runtimeconfig.waiters.delete",
    "runtimeconfig.waiters.get",
    "runtimeconfig.waiters.getIamPolicy",
    "runtimeconfig.waiters.list",
    "runtimeconfig.waiters.setIamPolicy",
    "runtimeconfig.waiters.update"
   ]
  },
  {
   "name": "roles/servicebroker.operator",
   "role": {
    "description": "Operational access to the ServiceBroker resources.",
    "etag": "AA==",
    "name": "roles/servicebroker.operator",
    "stage": "DEPRECATED",
    "title": "Service Broker Operator"
   },
   "included_permissions": [
    "servicebroker.bindingoperations.get",
    "servicebroker.bindingoperations.list",
    "servicebroker.bindings.create",
    "servicebroker.bindings.delete",
    "servicebroker.bindings.get",
    "servicebroker.bindings.list",
    "servicebroker.catalogs.create",
    "servicebroker.catalogs.delete",
    "servicebroker.catalogs.get",
    "servicebroker.catalogs.list",
    "servicebroker.instanceoperations.get",
    "servicebroker.instanceoperations.list",
    "servicebroker.instances.create",
    "servicebroker.instances.delete",
    "servicebroker.instances.get",
    "servicebroker.instances.list",
    "servicebroker.instances.update"
   ]
  },
  {
   "name": "roles/secretmanager.admin",
   "role": {
    "description": "Full access to administer Secret Manager resources.",
    "etag": "AA==",
    "name": "roles/secretmanager.admin",
    "stage": "GA",
    "title": "Secret Manager Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "secretmanager.locations.get",
    "secretmanager.locations.list",
    "secretmanager.secrets.create",
    "secretmanager.secrets.delete",
    "secretmanager.secrets.get",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.secrets.setIamPolicy",
    "secretmanager.secrets.update",
    "secretmanager.versions.access",
    "secretmanager.versions.add",
    "secretmanager.versions.destroy",
    "secretmanager.versions.disable",
    "secretmanager.versions.enable",
    "secretmanager.versions.get",
    "secretmanager.versions.list"
   ]
  },
  {
   "name": "roles/serviceconsumermanagement.tenancyUnitsAdmin",
   "role": {
    "description": "Administrate tenancy units",
    "etag": "AA==",
    "name": "roles/serviceconsumermanagement.tenancyUnitsAdmin",
    "stage": "BETA",
    "title": "Admin of Tenancy Units"
   },
   "included_permissions": [
    "serviceconsumermanagement.tenancyu.addResource",
    "serviceconsumermanagement.tenancyu.create",
    "serviceconsumermanagement.tenancyu.delete",
    "serviceconsumermanagement.tenancyu.list",
    "serviceconsumermanagement.tenancyu.removeResource"
   ]
  },
  {
   "name": "roles/secretmanager.secretAccessor",
   "role": {
    "description": "Allows accessing the payload of secrets.",
    "etag": "AA==",
    "name": "roles/secretmanager.secretAccessor",
    "stage": "GA",
    "title": "Secret Manager Secret Accessor"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "secretmanager.versions.access"
   ]
  },
  {
   "name": "roles/storagetransfer.admin",
   "role": {
    "description": "Create, update and manage transfer jobs and operations.",
    "etag": "AA==",
    "name": "roles/storagetransfer.admin",
    "stage": "GA",
    "title": "Storage Transfer Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storagetransfer.jobs.create",
    "storagetransfer.jobs.delete",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.jobs.run",
    "storagetransfer.jobs.update",
    "storagetransfer.operations.cancel",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.operations.pause",
    "storagetransfer.operations.resume",
    "storagetransfer.projects.getServiceAccount"
   ]
  },
  {
   "name": "roles/serviceconsumermanagement.tenancyUnitsViewer",
   "role": {
    "description": "View tenancy units",
    "etag": "AA==",
    "name": "roles/serviceconsumermanagement.tenancyUnitsViewer",
    "stage": "BETA",
    "title": "Viewer of Tenancy Units"
   },
   "included_permissions": [
    "serviceconsumermanagement.tenancyu.list"
   ]
  },
  {
   "name": "roles/secretmanager.secretVersionAdder",
   "role": {
    "description": "Allows adding versions to existing secrets.",
    "etag": "AA==",
    "name": "roles/secretmanager.secretVersionAdder",
    "stage": "GA",
    "title": "Secret Manager Secret Version Adder"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "secretmanager.versions.add"
   ]
  },
  {
   "name": "roles/servicedirectory.admin",
   "role": {
    "description": "Full control of all Service Directory resources and permissions.",
    "etag": "AA==",
    "name": "roles/servicedirectory.admin",
    "stage": "GA",
    "title": "Service Directory Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicedirectory.endpoints.create",
    "servicedirectory.endpoints.delete",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.endpoints.setIamPolicy",
    "servicedirectory.endpoints.update",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.associatePrivateZone",
    "servicedirectory.namespaces.create",
    "servicedirectory.namespaces.delete",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.namespaces.setIamPolicy",
    "servicedirectory.namespaces.update",
    "servicedirectory.services.create",
    "servicedirectory.services.delete",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve",
    "servicedirectory.services.setIamPolicy",
    "servicedirectory.services.update"
   ]
  },
  {
   "name": "roles/secretmanager.secretVersionManager",
   "role": {
    "description": "Allows creating and managing versions of existing secrets.",
    "etag": "AA==",
    "name": "roles/secretmanager.secretVersionManager",
    "stage": "GA",
    "title": "Secret Manager Secret Version Manager"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "secretmanager.versions.add",
    "secretmanager.versions.destroy",
    "secretmanager.versions.disable",
    "secretmanager.versions.enable",
    "secretmanager.versions.get",
    "secretmanager.versions.list"
   ]
  },
  {
   "name": "roles/servicedirectory.editor",
   "role": {
    "description": "Edit Service Directory resources.",
    "etag": "AA==",
    "name": "roles/servicedirectory.editor",
    "stage": "GA",
    "title": "Service Directory Editor"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicedirectory.endpoints.create",
    "servicedirectory.endpoints.delete",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.endpoints.update",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.associatePrivateZone",
    "servicedirectory.namespaces.create",
    "servicedirectory.namespaces.delete",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.namespaces.update",
    "servicedirectory.services.create",
    "servicedirectory.services.delete",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve",
    "servicedirectory.services.update"
   ]
  },
  {
   "name": "roles/secretmanager.viewer",
   "role": {
    "description": "Allows viewing metadata of all Secret Manager resources",
    "etag": "AA==",
    "name": "roles/secretmanager.viewer",
    "stage": "GA",
    "title": "Secret Manager Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "secretmanager.locations.get",
    "secretmanager.locations.list",
    "secretmanager.secrets.get",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.list",
    "secretmanager.versions.get",
    "secretmanager.versions.list"
   ]
  },
  {
   "name": "roles/servicedirectory.viewer",
   "role": {
    "description": "View Service Directory resources.",
    "etag": "AA==",
    "name": "roles/servicedirectory.viewer",
    "stage": "GA",
    "title": "Service Directory Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "servicedirectory.endpoints.get",
    "servicedirectory.endpoints.getIamPolicy",
    "servicedirectory.endpoints.list",
    "servicedirectory.locations.get",
    "servicedirectory.locations.list",
    "servicedirectory.namespaces.get",
    "servicedirectory.namespaces.getIamPolicy",
    "servicedirectory.namespaces.list",
    "servicedirectory.services.get",
    "servicedirectory.services.getIamPolicy",
    "servicedirectory.services.list",
    "servicedirectory.services.resolve"
   ]
  },
  {
   "name": "roles/storagetransfer.user",
   "role": {
    "description": "Create and update storage transfer jobs and operations.",
    "etag": "AA==",
    "name": "roles/storagetransfer.user",
    "stage": "GA",
    "title": "Storage Transfer User"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storagetransfer.jobs.create",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.jobs.run",
    "storagetransfer.jobs.update",
    "storagetransfer.operations.cancel",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.operations.pause",
    "storagetransfer.operations.resume",
    "storagetransfer.projects.getServiceAccount"
   ]
  },
  {
   "name": "roles/servicemanagement.admin",
   "role": {
    "description": "Full control of Google Service Management resources.",
    "etag": "AA==",
    "name": "roles/servicemanagement.admin",
    "stage": "GA",
    "title": "Service Management Administrator"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.folders.get",
    "resourcemanager.folders.list",
    "resourcemanager.organizations.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "serviceconsumermanagement.consumers.get",
    "serviceconsumermanagement.quota.get",
    "serviceconsumermanagement.quota.update",
    "serviceconsumermanagement.tenancyu.addResource",
    "serviceconsumermanagement.tenancyu.create",
    "serviceconsumermanagement.tenancyu.delete",
    "serviceconsumermanagement.tenancyu.list",
    "serviceconsumermanagement.tenancyu.removeResource",
    "servicemanagement.services.bind",
    "servicemanagement.services.check",
    "servicemanagement.services.create",
    "servicemanagement.services.delete",
    "servicemanagement.services.get",
    "servicemanagement.services.getIamPolicy",
    "servicemanagement.services.list",
    "servicemanagement.services.quota",
    "servicemanagement.services.report",
    "servicemanagement.services.setIamPolicy",
    "servicemanagement.services.update",
    "serviceusage.quotas.get",
    "serviceusage.services.get"
   ]
  },
  {
   "name": "roles/source.admin",
   "role": {
    "description": "Admin access to repositories",
    "etag": "AA==",
    "name": "roles/source.admin",
    "stage": "GA",
    "title": "Source Repository Administrator"
   },
   "included_permissions": [
    "source.repos.create",
    "source.repos.delete",
    "source.repos.get",
    "source.repos.getIamPolicy",
    "source.repos.getProjectConfig",
    "source.repos.list",
    "source.repos.setIamPolicy",
    "source.repos.update",
    "source.repos.updateProjectConfig",
    "source.repos.updateRepoConfig"
   ]
  },
  {
   "name": "roles/storagetransfer.viewer",
   "role": {
    "description": "Read access to storage transfer jobs and operations.",
    "etag": "AA==",
    "name": "roles/storagetransfer.viewer",
    "stage": "GA",
    "title": "Storage Transfer Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storagetransfer.jobs.get",
    "storagetransfer.jobs.list",
    "storagetransfer.operations.get",
    "storagetransfer.operations.list",
    "storagetransfer.projects.getServiceAccount"
   ]
  },
  {
   "name": "roles/spanner.viewer",
   "role": {
    "description": "Viewer access to Cloud Spanner resources.",
    "etag": "AA==",
    "name": "roles/spanner.viewer",
    "stage": "GA",
    "title": "Cloud Spanner Viewer"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "spanner.databases.list",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instances.get",
    "spanner.instances.list"
   ]
  },
  {
   "name": "roles/source.writer",
   "role": {
    "description": "Read / Write access to repositories",
    "etag": "AA==",
    "name": "roles/source.writer",
    "stage": "GA",
    "title": "Source Repository Writer"
   },
   "included_permissions": [
    "source.repos.get",
    "source.repos.list",
    "source.repos.update"
   ]
  },
  {
   "name": "roles/subscribewithgoogledeveloper.developer",
   "role": {
    "description": "Access DevTools for Subscribe with Google",
    "etag": "AA==",
    "name": "roles/subscribewithgoogledeveloper.developer",
    "stage": "BETA",
    "title": "Subscribe with Google Developer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "subscribewithgoogledeveloper.tools.get"
   ]
  },
  {
   "name": "roles/securitycenter.adminViewer",
   "role": {
    "description": "Admin Read access to security center",
    "etag": "AA==",
    "name": "roles/securitycenter.adminViewer",
    "stage": "GA",
    "title": "Security Center Admin Viewer"
   },
   "included_permissions": [
    "cloudsecurityscanner.crawledurls.list",
    "cloudsecurityscanner.results.get",
    "cloudsecurityscanner.results.list",
    "cloudsecurityscanner.scanruns.get",
    "cloudsecurityscanner.scanruns.getSummary",
    "cloudsecurityscanner.scanruns.list",
    "cloudsecurityscanner.scans.get",
    "cloudsecurityscanner.scans.list",
    "resourcemanager.organizations.get",
    "securitycenter.assets.group",
    "securitycenter.assets.list",
    "securitycenter.assets.listAssetPropertyNames",
    "securitycenter.containerthreatdetectionsettings.calculate",
    "securitycenter.containerthreatdetectionsettings.get",
    "securitycenter.eventthreatdetectionsettings.calculate",
    "securitycenter.eventthreatdetectionsettings.get",
    "securitycenter.findings.group",
    "securitycenter.findings.list",
    "securitycenter.findings.listFindingPropertyNames",
    "securitycenter.notificationconfig.get",
    "securitycenter.notificationconfig.list",
    "securitycenter.organizationsettings.get",
    "securitycenter.securitycentersettings.get",
    "securitycenter.securityhealthanalyticssettings.calculate",
    "securitycenter.securityhealthanalyticssettings.get",
    "securitycenter.sources.get",
    "securitycenter.sources.list",
    "securitycenter.subscription.get",
    "securitycenter.websecurityscannersettings.calculate",
    "securitycenter.websecurityscannersettings.get",
    "serviceusage.quotas.get",
    "serviceusage.services.get",
    "serviceusage.services.list"
   ]
  },
  {
   "name": "roles/threatdetection.editor",
   "role": {
    "description": "Read-write access to all Threat Detection settings",
    "etag": "AA==",
    "name": "roles/threatdetection.editor",
    "stage": "BETA",
    "title": "Threat Detection Settings Editor"
   },
   "included_permissions": [
    "threatdetection.detectorSettings.clear",
    "threatdetection.detectorSettings.get",
    "threatdetection.detectorSettings.update",
    "threatdetection.sinkSettings.get",
    "threatdetection.sinkSettings.update",
    "threatdetection.sourceSettings.get",
    "threatdetection.sourceSettings.update"
   ]
  },
  {
   "name": "roles/spanner.admin",
   "role": {
    "description": "Full control of Cloud Spanner resources.",
    "etag": "AA==",
    "name": "roles/spanner.admin",
    "stage": "GA",
    "title": "Cloud Spanner Admin"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "spanner.backupOperations.cancel",
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.create",
    "spanner.backups.delete",
    "spanner.backups.get",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.backups.restoreDatabase",
    "spanner.backups.setIamPolicy",
    "spanner.backups.update",
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.create",
    "spanner.databases.createBackup",
    "spanner.databases.drop",
    "spanner.databases.get",
    "spanner.databases.getDdl",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.setIamPolicy",
    "spanner.databases.update",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instanceConfigs.get",
    "spanner.instanceConfigs.list",
    "spanner.instanceOperations.cancel",
    "spanner.instanceOperations.delete",
    "spanner.instanceOperations.get",
    "spanner.instanceOperations.list",
    "spanner.instances.create",
    "spanner.instances.delete",
    "spanner.instances.get",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "spanner.instances.setIamPolicy",
    "spanner.instances.update",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list"
   ]
  },
  {
   "name": "roles/threatdetection.viewer",
   "role": {
    "description": "Read access to all Threat Detection settings",
    "etag": "AA==",
    "name": "roles/threatdetection.viewer",
    "stage": "BETA",
    "title": "Threat Detection Settings Viewer"
   },
   "included_permissions": [
    "threatdetection.detectorSettings.get",
    "threatdetection.sinkSettings.get",
    "threatdetection.sourceSettings.get"
   ]
  },
  {
   "name": "roles/storage.legacyBucketOwner",
   "role": {
    "description": "Read and write access to existing buckets with object listing/creation/deletion.",
    "etag": "AA==",
    "name": "roles/storage.legacyBucketOwner",
    "stage": "GA",
    "title": "Storage Legacy Bucket Owner"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/spanner.backupAdmin",
   "role": {
    "description": "Administrator role to manage Cloud Spanner backups. Does not include permissions to restore from Cloud Spanner backups.",
    "etag": "AA==",
    "name": "roles/spanner.backupAdmin",
    "stage": "GA",
    "title": "Cloud Spanner Backup Admin"
   },
   "included_permissions": [
    "monitoring.timeSeries.list",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "spanner.backupOperations.cancel",
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.create",
    "spanner.backups.delete",
    "spanner.backups.get",
    "spanner.backups.getIamPolicy",
    "spanner.backups.list",
    "spanner.backups.setIamPolicy",
    "spanner.backups.update",
    "spanner.databases.createBackup",
    "spanner.databases.get",
    "spanner.databases.list",
    "spanner.instances.get",
    "spanner.instances.list"
   ]
  },
  {
   "name": "roles/stackdriver.resourceMetadata.writer",
   "role": {
    "description": "Write-only access to resource metadata.  This provides exactly the permissions needed by the Stackdriver metadata agent and other systems that send metadata.",
    "etag": "AA==",
    "name": "roles/stackdriver.resourceMetadata.writer",
    "stage": "BETA",
    "title": "Stackdriver Resource Metadata Writer"
   },
   "included_permissions": [
    "stackdriver.resourceMetadata.write"
   ]
  },
  {
   "name": "roles/tpu.admin",
   "role": {
    "description": "Full access to TPU nodes and related resources.",
    "etag": "AA==",
    "name": "roles/tpu.admin",
    "stage": "GA",
    "title": "TPU Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "tpu.acceleratortypes.get",
    "tpu.acceleratortypes.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.create",
    "tpu.nodes.delete",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.nodes.reimage",
    "tpu.nodes.reset",
    "tpu.nodes.start",
    "tpu.nodes.stop",
    "tpu.operations.get",
    "tpu.operations.list",
    "tpu.tensorflowversions.get",
    "tpu.tensorflowversions.list"
   ]
  },
  {
   "name": "roles/spanner.backupWriter",
   "role": {
    "description": "Role with limited permissions to create and manage Cloud Spanner backups. Does not have permission to modify backups.",
    "etag": "AA==",
    "name": "roles/spanner.backupWriter",
    "stage": "GA",
    "title": "Cloud Spanner Backup Writer"
   },
   "included_permissions": [
    "spanner.backupOperations.get",
    "spanner.backupOperations.list",
    "spanner.backups.create",
    "spanner.backups.get",
    "spanner.backups.list",
    "spanner.databases.createBackup",
    "spanner.databases.get",
    "spanner.databases.list",
    "spanner.instances.get"
   ]
  },
  {
   "name": "roles/storage.admin",
   "role": {
    "description": "Full control of GCS resources.",
    "etag": "AA==",
    "name": "roles/storage.admin",
    "stage": "GA",
    "title": "Storage Admin"
   },
   "included_permissions": [
    "firebase.projects.get",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "storage.buckets.create",
    "storage.buckets.delete",
    "storage.buckets.get",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list",
    "storage.buckets.setIamPolicy",
    "storage.buckets.update",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.list",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/tpu.serviceAgent",
   "role": {
    "description": "Give Cloud TPUs service account access to managed resources",
    "etag": "AA==",
    "name": "roles/tpu.serviceAgent",
    "stage": "GA",
    "title": "Cloud TPU API Service Agent"
   },
   "included_permissions": [
    "compute.globalOperations.get",
    "compute.networks.addPeering",
    "compute.networks.get",
    "compute.networks.removePeering",
    "compute.networks.update",
    "compute.routes.get",
    "compute.routes.list",
    "compute.subnetworks.get",
    "compute.subnetworks.list",
    "compute.zones.get",
    "compute.zones.list",
    "monitoring.metricDescriptors.create",
    "monitoring.metricDescriptors.get",
    "monitoring.metricDescriptors.list",
    "monitoring.monitoredResourceDescriptors.get",
    "monitoring.monitoredResourceDescriptors.list",
    "monitoring.timeSeries.create",
    "resourcemanager.projects.get",
    "resourcemanager.projects.list"
   ]
  },
  {
   "name": "roles/tpu.viewer",
   "role": {
    "description": "Read-only access to TPU nodes and related resources.",
    "etag": "AA==",
    "name": "roles/tpu.viewer",
    "stage": "GA",
    "title": "TPU Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "tpu.acceleratortypes.get",
    "tpu.acceleratortypes.list",
    "tpu.locations.get",
    "tpu.locations.list",
    "tpu.nodes.get",
    "tpu.nodes.list",
    "tpu.operations.get",
    "tpu.operations.list",
    "tpu.tensorflowversions.get",
    "tpu.tensorflowversions.list"
   ]
  },
  {
   "name": "roles/trafficdirector.client",
   "role": {
    "description": "Traffic Director Client to fetch service configurations and report metrics",
    "etag": "AA==",
    "name": "roles/trafficdirector.client",
    "stage": "BETA",
    "title": "Traffic Director Client"
   },
   "included_permissions": [
    "trafficdirector.networks.getConfigs",
    "trafficdirector.networks.reportMetrics"
   ]
  },
  {
   "name": "roles/storage.legacyBucketReader",
   "role": {
    "description": "Read access to buckets with object listing.",
    "etag": "AA==",
    "name": "roles/storage.legacyBucketReader",
    "stage": "GA",
    "title": "Storage Legacy Bucket Reader"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/transcoder.admin",
   "role": {
    "description": "Full access to all transcoder resources.",
    "etag": "AA==",
    "name": "roles/transcoder.admin",
    "stage": "BETA",
    "title": "Transcoder Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "transcoder.jobTemplates.create",
    "transcoder.jobTemplates.delete",
    "transcoder.jobTemplates.get",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.create",
    "transcoder.jobs.delete",
    "transcoder.jobs.get",
    "transcoder.jobs.list"
   ]
  },
  {
   "name": "roles/spanner.databaseReader",
   "role": {
    "description": "Access to read and/or query a Cloud Spanner database.",
    "etag": "AA==",
    "name": "roles/spanner.databaseReader",
    "stage": "GA",
    "title": "Cloud Spanner Database Reader"
   },
   "included_permissions": [
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.getDdl",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.instances.get",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list"
   ]
  },
  {
   "name": "roles/transcoder.viewer",
   "role": {
    "description": "Viewer of all transcoder resources.",
    "etag": "AA==",
    "name": "roles/transcoder.viewer",
    "stage": "BETA",
    "title": "Transcoder Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "transcoder.jobTemplates.get",
    "transcoder.jobTemplates.list",
    "transcoder.jobs.get",
    "transcoder.jobs.list"
   ]
  },
  {
   "name": "roles/spanner.databaseUser",
   "role": {
    "description": "Access to read, query, write and view and change the schema of Cloud Spanner databases",
    "etag": "AA==",
    "name": "roles/spanner.databaseUser",
    "stage": "GA",
    "title": "Cloud Spanner Database User"
   },
   "included_permissions": [
    "spanner.databaseOperations.cancel",
    "spanner.databaseOperations.delete",
    "spanner.databaseOperations.get",
    "spanner.databaseOperations.list",
    "spanner.databases.beginOrRollbackReadWriteTransaction",
    "spanner.databases.beginPartitionedDmlTransaction",
    "spanner.databases.beginReadOnlyTransaction",
    "spanner.databases.getDdl",
    "spanner.databases.partitionQuery",
    "spanner.databases.partitionRead",
    "spanner.databases.read",
    "spanner.databases.select",
    "spanner.databases.updateDdl",
    "spanner.databases.write",
    "spanner.instances.get",
    "spanner.sessions.create",
    "spanner.sessions.delete",
    "spanner.sessions.get",
    "spanner.sessions.list"
   ]
  },
  {
   "name": "roles/storage.legacyBucketWriter",
   "role": {
    "description": "Read access to buckets with object listing/creation/deletion.",
    "etag": "AA==",
    "name": "roles/storage.legacyBucketWriter",
    "stage": "GA",
    "title": "Storage Legacy Bucket Writer"
   },
   "included_permissions": [
    "storage.buckets.get",
    "storage.objects.create",
    "storage.objects.delete",
    "storage.objects.list"
   ]
  },
  {
   "name": "roles/storage.legacyObjectOwner",
   "role": {
    "description": "Read/write access to existing objects without listing.",
    "etag": "AA==",
    "name": "roles/storage.legacyObjectOwner",
    "stage": "GA",
    "title": "Storage Legacy Object Owner"
   },
   "included_permissions": [
    "storage.objects.get",
    "storage.objects.getIamPolicy",
    "storage.objects.setIamPolicy",
    "storage.objects.update"
   ]
  },
  {
   "name": "roles/vmmigration.admin",
   "role": {
    "description": "Ability to view and edit all VM Migration objects",
    "etag": "AA==",
    "name": "roles/vmmigration.admin",
    "stage": "BETA",
    "title": "VM Migration Administrator"
   },
   "included_permissions": [
    "vmmigration.deployments.create",
    "vmmigration.deployments.get",
    "vmmigration.deployments.list"
   ]
  },
  {
   "name": "roles/vmmigration.viewer",
   "role": {
    "description": "Ability to view all VM Migration objects",
    "etag": "AA==",
    "name": "roles/vmmigration.viewer",
    "stage": "BETA",
    "title": "VM Migration Viewer"
   },
   "included_permissions": [
    "vmmigration.deployments.get",
    "vmmigration.deployments.list"
   ]
  },
  {
   "name": "roles/vpcaccess.viewer",
   "role": {
    "description": "Viewer of all Serverless VPC Access resources",
    "etag": "AA==",
    "name": "roles/vpcaccess.viewer",
    "stage": "GA",
    "title": "Serverless VPC Access Viewer"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list"
   ]
  },
  {
   "name": "roles/websecurityscanner.serviceAgent",
   "role": {
    "description": "Gives the Cloud Web Security Scanner service account access to compute engine details and app engine details.",
    "etag": "AA==",
    "name": "roles/websecurityscanner.serviceAgent",
    "stage": "GA",
    "title": "Cloud Web Security Scanner Service Agent"
   },
   "included_permissions": [
    "appengine.applications.get",
    "compute.addresses.list",
    "compute.backendServices.get",
    "compute.forwardingRules.get",
    "compute.globalForwardingRules.get",
    "compute.sslCertificates.list",
    "compute.targetHttpProxies.get",
    "compute.targetHttpsProxies.get",
    "compute.urlMaps.get"
   ]
  },
  {
   "name": "roles/vpcaccess.admin",
   "role": {
    "description": "Full access to all Serverless VPC Access resources",
    "etag": "AA==",
    "name": "roles/vpcaccess.admin",
    "stage": "GA",
    "title": "Serverless VPC Access Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "vpcaccess.connectors.create",
    "vpcaccess.connectors.delete",
    "vpcaccess.connectors.get",
    "vpcaccess.connectors.list",
    "vpcaccess.connectors.use",
    "vpcaccess.locations.list",
    "vpcaccess.operations.get",
    "vpcaccess.operations.list"
   ]
  },
  {
   "name": "roles/workflows.admin",
   "role": {
    "description": "Full access to workflows and related resources.",
    "etag": "AA==",
    "name": "roles/workflows.admin",
    "stage": "BETA",
    "title": "Workflows Admin"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "workflows.executions.cancel",
    "workflows.executions.create",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.cancel",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.create",
    "workflows.workflows.delete",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list",
    "workflows.workflows.setIamPolicy",
    "workflows.workflows.update"
   ]
  },
  {
   "name": "roles/vmwareengine.vmwareengineAdmin",
   "role": {
    "description": "Admin has full access to VMware Engine Service",
    "etag": "AA==",
    "name": "roles/vmwareengine.vmwareengineAdmin",
    "stage": "GA",
    "title": "VMware Engine Service Admin"
   },
   "included_permissions": [
    "vmwareengine.services.use",
    "vmwareengine.services.view"
   ]
  },
  {
   "name": "roles/workflows.editor",
   "role": {
    "description": "Read and write access to workflows and related resources.",
    "etag": "AA==",
    "name": "roles/workflows.editor",
    "stage": "BETA",
    "title": "Workflows Editor"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "workflows.executions.cancel",
    "workflows.executions.create",
    "workflows.executions.get",
    "workflows.executions.list",
    "workflows.locations.get",
    "workflows.locations.list",
    "workflows.operations.cancel",
    "workflows.operations.get",
    "workflows.operations.list",
    "workflows.workflows.create",
    "workflows.workflows.delete",
    "workflows.workflows.get",
    "workflows.workflows.getIamPolicy",
    "workflows.workflows.list",
    "workflows.workflows.update"
   ]
  },
  {
   "name": "roles/workflows.invoker",
   "role": {
    "description": "Access to execute workflows and manage the executions.",
    "etag": "AA==",
    "name": "roles/workflows.invoker",
    "stage": "BETA",
    "title": "Workflows Invoker"
   },
   "included_permissions": [
    "resourcemanager.projects.get",
    "resourcemanager.projects.list",
    "workflows.executions.cancel",
    "workflows.executions.create",
    "workflows.executions.get",
    "workflows.executions.list"
   ]
  },
  {
   "name": "roles/vmwareengine.vmwareengineViewer",
   "role": {
    "description": "Viewer has read-only access to VMware Engine Service",
    "etag": "AA==",
    "name": "roles/vmwareengine.vmwareengineViewer",
    "stage": "GA",
    "title": "VMware Engine Service Viewer"
   },
   "included_permissions": [
    "vmwareengine.services.view"
   ]
  }
 ]
}